{"version":3,"sources":["../../../../../src/modules/repositories/sql/games-pricing/games-pricing.service.ts"],"sourcesContent":["// NestJS\r\nimport {\r\n  BadRequestException,\r\n  Injectable,\r\n  InternalServerErrorException,\r\n  Logger,\r\n  NotFoundException,\r\n} from '@nestjs/common';\r\n\r\n// TypeORM\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Between, FindOptionsRelations, FindOptionsWhere, LessThanOrEqual, MoreThanOrEqual, Repository } from 'typeorm';\r\n\r\n// DecimalJS\r\nimport Decimal from 'decimal.js';\r\n\r\n// Entities\r\nimport { GamePricing } from '@repositories/sql/games-pricing/game-pricing.entity';\r\n\r\n// Types\r\nimport type { GamePricing as GamePricingType } from '@repositories/sql/games-pricing/game-pricing.entity';\r\nimport type { Game as GameType } from '@repositories/sql/games/game.entity';\r\n\r\n@Injectable()\r\nexport class GamesPricingService {\r\n  private readonly relations: FindOptionsRelations<GamePricing>;\r\n\r\n  constructor(\r\n    private readonly logger: Logger,\r\n    @InjectRepository(GamePricing, 'sql')\r\n    private readonly gamesPricingRepository: Repository<GamePricing>,\r\n  ) {\r\n    this.relations = { game: true };\r\n  }\r\n\r\n  /**\r\n   * Get all pricing\r\n   * @param sortBy Sort by\r\n   * @param sortOrder Sort order\r\n   * @returns Promise that resolves to an array of pricings\r\n   */\r\n  public async getAll(\r\n    sortBy:\r\n      | 'id'\r\n      | 'basePrice'\r\n      | 'discountPrice'\r\n      | 'discountPercentage'\r\n      | 'discountStartDate'\r\n      | 'discountEndDate'\r\n      | 'offerType',\r\n    sortOrder: 'ASC' | 'DESC',\r\n  ): Promise<GamePricingType[]> {\r\n    this.logger.log(`Retrieving all pricings with sort order ${sortOrder} and sort by ${sortBy}`);\r\n\r\n    // Get all pricings\r\n    const pricings = await this.gamesPricingRepository.find({\r\n      relations: this.relations,\r\n      order: { [sortBy]: sortOrder },\r\n    });\r\n\r\n    // Update discount status for each pricing\r\n    pricings.forEach(this.updateDiscountStatus);\r\n\r\n    // Return pricings\r\n    return pricings;\r\n  }\r\n\r\n  /**\r\n   * Get pricing by ID\r\n   * @param id Pricing ID\r\n   * @returns Promise that resolves to a pricing\r\n   * @throws `NotFoundException` If pricing not found\r\n   */\r\n  public async getById(id: number): Promise<GamePricing> {\r\n    this.logger.log(`Retrieving pricing with ID ${id}`);\r\n\r\n    // Find pricing by ID\r\n    const pricing = await this.gamesPricingRepository.findOne({ where: { id }, relations: this.relations });\r\n    if (!pricing) throw new NotFoundException(`Pricing with ID ${id} not found`);\r\n\r\n    // Update discount status for pricing\r\n    this.updateDiscountStatus(pricing);\r\n\r\n    // Return pricing\r\n    return pricing;\r\n  }\r\n\r\n  /**\r\n   * Get pricing by game ID\r\n   * @param id Game ID\r\n   * @returns Promise that resolves to a pricing\r\n   * @throws `NotFoundException` If pricing not found\r\n   */\r\n  public async getByGameId(id: number): Promise<GamePricing> {\r\n    this.logger.log(`Retrieving pricing for game with ID ${id}`);\r\n\r\n    // Find pricing by game ID\r\n    const pricing = await this.gamesPricingRepository.findOne({ where: { game: { id } }, relations: this.relations });\r\n    if (!pricing) throw new NotFoundException(`Pricing for game with ID ${id} not found`);\r\n\r\n    // Update discount status for pricing\r\n    this.updateDiscountStatus(pricing);\r\n\r\n    return pricing;\r\n  }\r\n\r\n  /**\r\n   * Get games by pricing\r\n   * @param options Options\r\n   * @returns Promise that resolves to an array of games\r\n   */\r\n  public async getGamesByPricing(options: {\r\n    free: boolean;\r\n    discount: boolean;\r\n    sortBy:\r\n      | 'id'\r\n      | 'basePrice'\r\n      | 'discountPrice'\r\n      | 'discountPercentage'\r\n      | 'discountStartDate'\r\n      | 'discountEndDate'\r\n      | 'offerType';\r\n    sortOrder: 'ASC' | 'DESC';\r\n    minPrice?: string;\r\n    maxPrice?: string;\r\n    skip?: number;\r\n    take?: number;\r\n  }): Promise<GameType[]> {\r\n    this.logger.log(`Retrieving games by pricing with options ${JSON.stringify(options)}`);\r\n\r\n    // Validate options\r\n    if (options.free && options.discount)\r\n      throw new BadRequestException(`Game can't be free and discounted at the same time`);\r\n\r\n    // Build where conditions\r\n    const whereConditions: FindOptionsWhere<GamePricing>[] = [];\r\n\r\n    // Add where conditions\r\n    if (options.discount) whereConditions.push({ discount: true });\r\n    if (options.free) whereConditions.push({ free: true });\r\n\r\n    // Add price range\r\n    if (options.minPrice || options.maxPrice) {\r\n      if (options.minPrice && options.maxPrice) {\r\n        whereConditions.push(\r\n          options.discount\r\n            ? { discountPrice: Between(options.minPrice, options.maxPrice) }\r\n            : { basePrice: Between(options.minPrice, options.maxPrice) },\r\n        );\r\n      } else if (options.minPrice) {\r\n        whereConditions.push(\r\n          options.discount\r\n            ? { discountPrice: MoreThanOrEqual(options.minPrice) }\r\n            : { basePrice: MoreThanOrEqual(options.minPrice) },\r\n        );\r\n      } else if (options.maxPrice) {\r\n        whereConditions.push(\r\n          options.discount\r\n            ? { discountPrice: LessThanOrEqual(options.maxPrice) }\r\n            : { basePrice: LessThanOrEqual(options.maxPrice) },\r\n        );\r\n      }\r\n    }\r\n\r\n    // Add pagination\r\n    let skip: number;\r\n    let take: number;\r\n    if (options.skip || options.take) {\r\n      skip = options.skip;\r\n      take = options.take;\r\n    }\r\n\r\n    // Fetch pricings\r\n    const pricings = await this.gamesPricingRepository.find({\r\n      where: whereConditions.length > 0 ? whereConditions : {},\r\n      relations: this.relations,\r\n      order: { [options.sortBy]: options.sortOrder },\r\n      skip,\r\n      take,\r\n    });\r\n\r\n    // Update discount status for each pricing\r\n    return pricings.map((pricing) => pricing.game);\r\n  }\r\n\r\n  /**\r\n   * Create pricing\r\n   * @param pricing Pricing\r\n   * @returns Promise that resolves when the creation is successful\r\n   */\r\n  public async create(pricing: {\r\n    free: boolean;\r\n    basePrice: string;\r\n    discount?: boolean;\r\n    discountPrice?: string;\r\n    discountStartDate?: Date;\r\n    discountEndDate?: Date;\r\n    offerType?: 'SPECIAL PROMOTION' | 'WEEKEND DEAL';\r\n    game: GameType;\r\n  }): Promise<GamePricing> {\r\n    this.logger.log(`Creating pricing for game with ID ${pricing.game.id}`);\r\n\r\n    // Validate pricing\r\n    await this.validatePricing({\r\n      free: pricing.free,\r\n      basePrice: pricing.basePrice,\r\n      discount: pricing.discount,\r\n      discountPrice: pricing.discountPrice,\r\n      discountStartDate: pricing.discountStartDate,\r\n      discountEndDate: pricing.discountEndDate,\r\n      offerType: pricing.offerType,\r\n    });\r\n\r\n    // Calculate discount percentage\r\n    const discountPercentage = pricing.discount\r\n      ? await this.calculateDiscountPercentage(pricing.discountPrice, pricing.basePrice)\r\n      : null;\r\n\r\n    // Create new game pricing entity\r\n    const createdPricing = this.gamesPricingRepository.create({\r\n      free: pricing.free,\r\n      basePrice: pricing.basePrice,\r\n      discount: pricing.discount,\r\n      discountPrice: pricing.discountPrice,\r\n      discountStartDate: pricing.discountStartDate,\r\n      discountEndDate: pricing.discountEndDate,\r\n      offerType: pricing.offerType,\r\n      discountPercentage,\r\n      game: pricing.game,\r\n    });\r\n\r\n    // Update discount status\r\n    this.updateDiscountStatus(createdPricing);\r\n\r\n    // Save the pricing entity\r\n    const result = await this.gamesPricingRepository.save(createdPricing);\r\n\r\n    // Log the successful creation of the pricing\r\n    if (!result) throw new InternalServerErrorException('Failed to create pricing');\r\n\r\n    // Return the created pricing\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Update pricing\r\n   * @param id Pricing ID\r\n   * @param pricing Pricing\r\n   * @returns Promise that resolves when the update is successful\r\n   * @throws `NotFoundException` If pricing not found\r\n   */\r\n  public async update(\r\n    id: number,\r\n    pricing: {\r\n      free?: boolean;\r\n      basePrice?: string;\r\n      discount?: boolean;\r\n      discountPrice?: string;\r\n      discountStartDate?: Date;\r\n      discountEndDate?: Date;\r\n      offerType?: 'SPECIAL PROMOTION' | 'WEEKEND DEAL';\r\n    },\r\n  ): Promise<GamePricingType> {\r\n    this.logger.log(`Updating pricing with ID ${id}`);\r\n\r\n    // Check if pricing exists\r\n    const existingPricing = await this.gamesPricingRepository.findOne({\r\n      where: { id },\r\n    });\r\n\r\n    if (!existingPricing) throw new NotFoundException(`Game with ID ${id} not found`);\r\n\r\n    // Validate pricing\r\n    await this.validatePricing({\r\n      free: pricing.free ?? existingPricing.free,\r\n      basePrice: pricing.basePrice ?? existingPricing.basePrice,\r\n      discount: pricing.discount ?? existingPricing.discount,\r\n      discountPrice: pricing.discountPrice,\r\n      discountStartDate: pricing.discountStartDate,\r\n      discountEndDate: pricing.discountEndDate,\r\n      offerType: pricing.offerType,\r\n    });\r\n\r\n    // Calculate discount percentage\r\n    const discountPercentage = pricing.discount\r\n      ? await this.calculateDiscountPercentage(pricing.discountPrice, existingPricing.basePrice)\r\n      : existingPricing.discountPercentage;\r\n\r\n    // Update fields\r\n    if (pricing.basePrice) existingPricing.basePrice = pricing.basePrice ?? existingPricing.basePrice;\r\n    if (pricing.discount) existingPricing.discount = pricing.discount ?? existingPricing.discount;\r\n    if (discountPercentage)\r\n      existingPricing.discountPercentage = discountPercentage ?? existingPricing.discountPercentage;\r\n    if (pricing.discountPrice) existingPricing.discountPrice = pricing.discountPrice ?? existingPricing.discountPrice;\r\n    if (pricing.discountStartDate)\r\n      existingPricing.discountStartDate = pricing.discountStartDate ?? existingPricing.discountStartDate;\r\n    if (pricing.discountEndDate)\r\n      existingPricing.discountEndDate = pricing.discountEndDate ?? existingPricing.discountEndDate;\r\n    if (pricing.offerType) existingPricing.offerType = pricing.offerType ?? existingPricing.offerType;\r\n    if (pricing.free) existingPricing.free = pricing.free ?? existingPricing.free;\r\n\r\n    // Update discount status\r\n    this.updateDiscountStatus(existingPricing);\r\n\r\n    // Save changes\r\n    const result = this.gamesPricingRepository.save(existingPricing);\r\n\r\n    // Log the successful update of the pricing\r\n    if (!result) throw new InternalServerErrorException(`Failed to update pricing with ID ${id}`);\r\n\r\n    // Return the updated pricing\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Delete pricing\r\n   * @param id Pricing ID\r\n   * @returns Promise that resolves when the deletion is successful\r\n   * @throws `NotFoundException` If pricing not found\r\n   * @throws `InternalServerErrorException` If failed to delete\r\n   */\r\n  public async remove(id: number): Promise<GamePricingType> {\r\n    this.logger.log(`Deleting pricing with ID ${id}`);\r\n\r\n    // Check if pricing exists\r\n    const existingPricing = await this.gamesPricingRepository.findOne({ where: { id } });\r\n\r\n    // Log the initiation of the pricing deletion process\r\n    if (!existingPricing) throw new NotFoundException(`Pricing with ID ${id} not found`);\r\n\r\n    // Delete the pricing\r\n    const result = await this.gamesPricingRepository.remove(existingPricing);\r\n\r\n    // Log the successful deletion of the pricing\r\n    if (!result) throw new InternalServerErrorException(`Failed to delete pricing with ID ${id}`);\r\n\r\n    // Return the deleted pricing\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Delete all pricings\r\n   * @returns Promise that resolves when the deletion is successful\r\n   * @throws `InternalServerErrorException` If failed to delete\r\n   */\r\n  public async removeAll(): Promise<void> {\r\n    this.logger.log('Deleting all pricings');\r\n\r\n    // Delete the pricings\r\n    const result = await this.gamesPricingRepository.delete({});\r\n\r\n    // Log the successful deletion of the pricings\r\n    if (result === undefined) throw new InternalServerErrorException('Failed to delete pricings');\r\n  }\r\n\r\n  /**\r\n   * Update discount status based on current date\r\n   * @param pricing GamePricing entity\r\n   */\r\n  private updateDiscountStatus(pricing: GamePricingType): void {\r\n    // Get current date\r\n    const currentDate = new Date();\r\n\r\n    // Update discount status to false if discount end date is before current date\r\n    if (pricing.discount && pricing.discountEndDate && currentDate > pricing.discountEndDate) {\r\n      pricing.discount = false;\r\n      pricing.discountPrice = null;\r\n      pricing.discountPercentage = null;\r\n      pricing.discountStartDate = null;\r\n      pricing.discountEndDate = null;\r\n      pricing.offerType = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate pricing\r\n   * @param pricing Pricing entity\r\n   * @returns Promise that resolves when validation is successful\r\n   * @throws `BadRequestException` If validation fails\r\n   */\r\n  private async validatePricing(pricing: {\r\n    free: boolean;\r\n    basePrice?: string;\r\n    discount?: boolean;\r\n    discountPrice?: string;\r\n    discountStartDate?: Date;\r\n    discountEndDate?: Date;\r\n    offerType?: 'SPECIAL PROMOTION' | 'WEEKEND DEAL';\r\n  }): Promise<void> {\r\n    // Create decimals\r\n    const basePriceDecimal = pricing.basePrice && new Decimal(pricing.basePrice);\r\n\r\n    // If game is free, throw a bad request exception with a message\r\n    if (pricing.free && pricing.discount) throw new BadRequestException('Game is free, cannot have discount');\r\n\r\n    // If game is not free and base price is not provided or less than or equal to 0, throw a bad request exception with a message\r\n    if (!pricing.free && (!pricing.basePrice || basePriceDecimal.lte(0)))\r\n      throw new BadRequestException('Game is not free, Base price is required, and must be greater than 0');\r\n\r\n    // If discount is provided, validate the following\r\n    if (pricing.discount) {\r\n      // If discount price is not provided, throw a bad request exception with a message\r\n      if (!pricing.discountPrice) throw new BadRequestException('Discount price is required');\r\n\r\n      // If discount start date is not provided, throw a bad request exception with a message\r\n      if (!pricing.discountStartDate) throw new BadRequestException('Discount start date is required');\r\n\r\n      // If discount end date is not provided, throw a bad request exception with a message\r\n      if (!pricing.discountEndDate) throw new BadRequestException('Discount end date is required');\r\n\r\n      // If offer type is not provided, throw a bad request exception with a message\r\n      if (!pricing.offerType) throw new BadRequestException('Offer type is required');\r\n\r\n      // If discount start date is greater than discount end date, throw a bad request exception with a message\r\n      if (pricing.discountStartDate > pricing.discountEndDate)\r\n        throw new BadRequestException('Discount start date cannot be greater than discount end date');\r\n\r\n      // If discount end date is less than current date, throw a bad request exception with a message\r\n      if (pricing.discountEndDate < new Date())\r\n        throw new BadRequestException('Discount end date cannot be less than current date');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate discount percentage\r\n   * @param discountPrice Discount price\r\n   * @param basePrice Base price\r\n   * @returns Promise that resolves to discount percentage\r\n   * @throws `BadRequestException` If base price is less than or equal to 0\r\n   */\r\n  private async calculateDiscountPercentage(discountPrice: string, basePrice: string): Promise<number> {\r\n    // Create decimals\r\n    const basePriceDecimal = new Decimal(basePrice);\r\n    const discountPriceDecimal = new Decimal(discountPrice);\r\n\r\n    // If base price is less than or equal to 0, throw a bad request exception with a message\r\n    if (!basePrice || basePriceDecimal.eq(0))\r\n      throw new BadRequestException('Base price must be greater than 0 to calculate discount percentage');\r\n\r\n    // Calculate discount percentage\r\n    const discountPercentage = basePriceDecimal\r\n      .minus(discountPriceDecimal)\r\n      .dividedBy(basePriceDecimal)\r\n      .times(100)\r\n      .toDecimalPlaces(0)\r\n      .toNumber();\r\n\r\n    return discountPercentage;\r\n  }\r\n}\r\n"],"names":["GamesPricingService","constructor","logger","gamesPricingRepository","relations","game","getAll","sortBy","sortOrder","log","pricings","find","order","forEach","updateDiscountStatus","getById","id","pricing","findOne","where","NotFoundException","getByGameId","getGamesByPricing","options","JSON","stringify","free","discount","BadRequestException","whereConditions","push","minPrice","maxPrice","discountPrice","Between","basePrice","MoreThanOrEqual","LessThanOrEqual","skip","take","length","map","create","validatePricing","discountStartDate","discountEndDate","offerType","discountPercentage","calculateDiscountPercentage","createdPricing","result","save","InternalServerErrorException","update","existingPricing","remove","removeAll","delete","undefined","currentDate","Date","basePriceDecimal","Decimal","lte","discountPriceDecimal","eq","minus","dividedBy","times","toDecimalPlaces","toNumber"],"mappings":"AAAA,SAAS;;;;;+BAwBIA;;;eAAAA;;;wBAjBN;yBAG0B;0BAC6E;gEAG1F;mCAGQ;;;;;;;;;;;;;;;;;;;;AAOrB,IAAA,AAAMA,sBAAN,MAAMA;IAGXC,YACE,AAAiBC,MAAc,EAC/B,AACiBC,sBAA+C,CAChE;aAHiBD,SAAAA;aAEAC,yBAAAA;QAEjB,IAAI,CAACC,SAAS,GAAG;YAAEC,MAAM;QAAK;IAChC;IAEA;;;;;GAKC,GACD,MAAaC,OACXC,MAOe,EACfC,SAAyB,EACG;QAC5B,IAAI,CAACN,MAAM,CAACO,GAAG,CAAC,CAAC,wCAAwC,EAAED,UAAU,aAAa,EAAED,QAAQ;QAE5F,mBAAmB;QACnB,MAAMG,WAAW,MAAM,IAAI,CAACP,sBAAsB,CAACQ,IAAI,CAAC;YACtDP,WAAW,IAAI,CAACA,SAAS;YACzBQ,OAAO;gBAAE,CAACL,OAAO,EAAEC;YAAU;QAC/B;QAEA,0CAA0C;QAC1CE,SAASG,OAAO,CAAC,IAAI,CAACC,oBAAoB;QAE1C,kBAAkB;QAClB,OAAOJ;IACT;IAEA;;;;;GAKC,GACD,MAAaK,QAAQC,EAAU,EAAwB;QACrD,IAAI,CAACd,MAAM,CAACO,GAAG,CAAC,CAAC,2BAA2B,EAAEO,IAAI;QAElD,qBAAqB;QACrB,MAAMC,UAAU,MAAM,IAAI,CAACd,sBAAsB,CAACe,OAAO,CAAC;YAAEC,OAAO;gBAAEH;YAAG;YAAGZ,WAAW,IAAI,CAACA,SAAS;QAAC;QACrG,IAAI,CAACa,SAAS,MAAM,IAAIG,yBAAiB,CAAC,CAAC,gBAAgB,EAAEJ,GAAG,UAAU,CAAC;QAE3E,qCAAqC;QACrC,IAAI,CAACF,oBAAoB,CAACG;QAE1B,iBAAiB;QACjB,OAAOA;IACT;IAEA;;;;;GAKC,GACD,MAAaI,YAAYL,EAAU,EAAwB;QACzD,IAAI,CAACd,MAAM,CAACO,GAAG,CAAC,CAAC,oCAAoC,EAAEO,IAAI;QAE3D,0BAA0B;QAC1B,MAAMC,UAAU,MAAM,IAAI,CAACd,sBAAsB,CAACe,OAAO,CAAC;YAAEC,OAAO;gBAAEd,MAAM;oBAAEW;gBAAG;YAAE;YAAGZ,WAAW,IAAI,CAACA,SAAS;QAAC;QAC/G,IAAI,CAACa,SAAS,MAAM,IAAIG,yBAAiB,CAAC,CAAC,yBAAyB,EAAEJ,GAAG,UAAU,CAAC;QAEpF,qCAAqC;QACrC,IAAI,CAACF,oBAAoB,CAACG;QAE1B,OAAOA;IACT;IAEA;;;;GAIC,GACD,MAAaK,kBAAkBC,OAgB9B,EAAuB;QACtB,IAAI,CAACrB,MAAM,CAACO,GAAG,CAAC,CAAC,yCAAyC,EAAEe,KAAKC,SAAS,CAACF,UAAU;QAErF,mBAAmB;QACnB,IAAIA,QAAQG,IAAI,IAAIH,QAAQI,QAAQ,EAClC,MAAM,IAAIC,2BAAmB,CAAC,CAAC,kDAAkD,CAAC;QAEpF,yBAAyB;QACzB,MAAMC,kBAAmD,EAAE;QAE3D,uBAAuB;QACvB,IAAIN,QAAQI,QAAQ,EAAEE,gBAAgBC,IAAI,CAAC;YAAEH,UAAU;QAAK;QAC5D,IAAIJ,QAAQG,IAAI,EAAEG,gBAAgBC,IAAI,CAAC;YAAEJ,MAAM;QAAK;QAEpD,kBAAkB;QAClB,IAAIH,QAAQQ,QAAQ,IAAIR,QAAQS,QAAQ,EAAE;YACxC,IAAIT,QAAQQ,QAAQ,IAAIR,QAAQS,QAAQ,EAAE;gBACxCH,gBAAgBC,IAAI,CAClBP,QAAQI,QAAQ,GACZ;oBAAEM,eAAeC,IAAAA,iBAAO,EAACX,QAAQQ,QAAQ,EAAER,QAAQS,QAAQ;gBAAE,IAC7D;oBAAEG,WAAWD,IAAAA,iBAAO,EAACX,QAAQQ,QAAQ,EAAER,QAAQS,QAAQ;gBAAE;YAEjE,OAAO,IAAIT,QAAQQ,QAAQ,EAAE;gBAC3BF,gBAAgBC,IAAI,CAClBP,QAAQI,QAAQ,GACZ;oBAAEM,eAAeG,IAAAA,yBAAe,EAACb,QAAQQ,QAAQ;gBAAE,IACnD;oBAAEI,WAAWC,IAAAA,yBAAe,EAACb,QAAQQ,QAAQ;gBAAE;YAEvD,OAAO,IAAIR,QAAQS,QAAQ,EAAE;gBAC3BH,gBAAgBC,IAAI,CAClBP,QAAQI,QAAQ,GACZ;oBAAEM,eAAeI,IAAAA,yBAAe,EAACd,QAAQS,QAAQ;gBAAE,IACnD;oBAAEG,WAAWE,IAAAA,yBAAe,EAACd,QAAQS,QAAQ;gBAAE;YAEvD;QACF;QAEA,iBAAiB;QACjB,IAAIM;QACJ,IAAIC;QACJ,IAAIhB,QAAQe,IAAI,IAAIf,QAAQgB,IAAI,EAAE;YAChCD,OAAOf,QAAQe,IAAI;YACnBC,OAAOhB,QAAQgB,IAAI;QACrB;QAEA,iBAAiB;QACjB,MAAM7B,WAAW,MAAM,IAAI,CAACP,sBAAsB,CAACQ,IAAI,CAAC;YACtDQ,OAAOU,gBAAgBW,MAAM,GAAG,IAAIX,kBAAkB,CAAC;YACvDzB,WAAW,IAAI,CAACA,SAAS;YACzBQ,OAAO;gBAAE,CAACW,QAAQhB,MAAM,CAAC,EAAEgB,QAAQf,SAAS;YAAC;YAC7C8B;YACAC;QACF;QAEA,0CAA0C;QAC1C,OAAO7B,SAAS+B,GAAG,CAAC,CAACxB,UAAYA,QAAQZ,IAAI;IAC/C;IAEA;;;;GAIC,GACD,MAAaqC,OAAOzB,OASnB,EAAwB;QACvB,IAAI,CAACf,MAAM,CAACO,GAAG,CAAC,CAAC,kCAAkC,EAAEQ,QAAQZ,IAAI,CAACW,EAAE,EAAE;QAEtE,mBAAmB;QACnB,MAAM,IAAI,CAAC2B,eAAe,CAAC;YACzBjB,MAAMT,QAAQS,IAAI;YAClBS,WAAWlB,QAAQkB,SAAS;YAC5BR,UAAUV,QAAQU,QAAQ;YAC1BM,eAAehB,QAAQgB,aAAa;YACpCW,mBAAmB3B,QAAQ2B,iBAAiB;YAC5CC,iBAAiB5B,QAAQ4B,eAAe;YACxCC,WAAW7B,QAAQ6B,SAAS;QAC9B;QAEA,gCAAgC;QAChC,MAAMC,qBAAqB9B,QAAQU,QAAQ,GACvC,MAAM,IAAI,CAACqB,2BAA2B,CAAC/B,QAAQgB,aAAa,EAAEhB,QAAQkB,SAAS,IAC/E;QAEJ,iCAAiC;QACjC,MAAMc,iBAAiB,IAAI,CAAC9C,sBAAsB,CAACuC,MAAM,CAAC;YACxDhB,MAAMT,QAAQS,IAAI;YAClBS,WAAWlB,QAAQkB,SAAS;YAC5BR,UAAUV,QAAQU,QAAQ;YAC1BM,eAAehB,QAAQgB,aAAa;YACpCW,mBAAmB3B,QAAQ2B,iBAAiB;YAC5CC,iBAAiB5B,QAAQ4B,eAAe;YACxCC,WAAW7B,QAAQ6B,SAAS;YAC5BC;YACA1C,MAAMY,QAAQZ,IAAI;QACpB;QAEA,yBAAyB;QACzB,IAAI,CAACS,oBAAoB,CAACmC;QAE1B,0BAA0B;QAC1B,MAAMC,SAAS,MAAM,IAAI,CAAC/C,sBAAsB,CAACgD,IAAI,CAACF;QAEtD,6CAA6C;QAC7C,IAAI,CAACC,QAAQ,MAAM,IAAIE,oCAA4B,CAAC;QAEpD,6BAA6B;QAC7B,OAAOF;IACT;IAEA;;;;;;GAMC,GACD,MAAaG,OACXrC,EAAU,EACVC,OAQC,EACyB;QAC1B,IAAI,CAACf,MAAM,CAACO,GAAG,CAAC,CAAC,yBAAyB,EAAEO,IAAI;QAEhD,0BAA0B;QAC1B,MAAMsC,kBAAkB,MAAM,IAAI,CAACnD,sBAAsB,CAACe,OAAO,CAAC;YAChEC,OAAO;gBAAEH;YAAG;QACd;QAEA,IAAI,CAACsC,iBAAiB,MAAM,IAAIlC,yBAAiB,CAAC,CAAC,aAAa,EAAEJ,GAAG,UAAU,CAAC;QAEhF,mBAAmB;QACnB,MAAM,IAAI,CAAC2B,eAAe,CAAC;YACzBjB,MAAMT,QAAQS,IAAI,IAAI4B,gBAAgB5B,IAAI;YAC1CS,WAAWlB,QAAQkB,SAAS,IAAImB,gBAAgBnB,SAAS;YACzDR,UAAUV,QAAQU,QAAQ,IAAI2B,gBAAgB3B,QAAQ;YACtDM,eAAehB,QAAQgB,aAAa;YACpCW,mBAAmB3B,QAAQ2B,iBAAiB;YAC5CC,iBAAiB5B,QAAQ4B,eAAe;YACxCC,WAAW7B,QAAQ6B,SAAS;QAC9B;QAEA,gCAAgC;QAChC,MAAMC,qBAAqB9B,QAAQU,QAAQ,GACvC,MAAM,IAAI,CAACqB,2BAA2B,CAAC/B,QAAQgB,aAAa,EAAEqB,gBAAgBnB,SAAS,IACvFmB,gBAAgBP,kBAAkB;QAEtC,gBAAgB;QAChB,IAAI9B,QAAQkB,SAAS,EAAEmB,gBAAgBnB,SAAS,GAAGlB,QAAQkB,SAAS,IAAImB,gBAAgBnB,SAAS;QACjG,IAAIlB,QAAQU,QAAQ,EAAE2B,gBAAgB3B,QAAQ,GAAGV,QAAQU,QAAQ,IAAI2B,gBAAgB3B,QAAQ;QAC7F,IAAIoB,oBACFO,gBAAgBP,kBAAkB,GAAGA,sBAAsBO,gBAAgBP,kBAAkB;QAC/F,IAAI9B,QAAQgB,aAAa,EAAEqB,gBAAgBrB,aAAa,GAAGhB,QAAQgB,aAAa,IAAIqB,gBAAgBrB,aAAa;QACjH,IAAIhB,QAAQ2B,iBAAiB,EAC3BU,gBAAgBV,iBAAiB,GAAG3B,QAAQ2B,iBAAiB,IAAIU,gBAAgBV,iBAAiB;QACpG,IAAI3B,QAAQ4B,eAAe,EACzBS,gBAAgBT,eAAe,GAAG5B,QAAQ4B,eAAe,IAAIS,gBAAgBT,eAAe;QAC9F,IAAI5B,QAAQ6B,SAAS,EAAEQ,gBAAgBR,SAAS,GAAG7B,QAAQ6B,SAAS,IAAIQ,gBAAgBR,SAAS;QACjG,IAAI7B,QAAQS,IAAI,EAAE4B,gBAAgB5B,IAAI,GAAGT,QAAQS,IAAI,IAAI4B,gBAAgB5B,IAAI;QAE7E,yBAAyB;QACzB,IAAI,CAACZ,oBAAoB,CAACwC;QAE1B,eAAe;QACf,MAAMJ,SAAS,IAAI,CAAC/C,sBAAsB,CAACgD,IAAI,CAACG;QAEhD,2CAA2C;QAC3C,IAAI,CAACJ,QAAQ,MAAM,IAAIE,oCAA4B,CAAC,CAAC,iCAAiC,EAAEpC,IAAI;QAE5F,6BAA6B;QAC7B,OAAOkC;IACT;IAEA;;;;;;GAMC,GACD,MAAaK,OAAOvC,EAAU,EAA4B;QACxD,IAAI,CAACd,MAAM,CAACO,GAAG,CAAC,CAAC,yBAAyB,EAAEO,IAAI;QAEhD,0BAA0B;QAC1B,MAAMsC,kBAAkB,MAAM,IAAI,CAACnD,sBAAsB,CAACe,OAAO,CAAC;YAAEC,OAAO;gBAAEH;YAAG;QAAE;QAElF,qDAAqD;QACrD,IAAI,CAACsC,iBAAiB,MAAM,IAAIlC,yBAAiB,CAAC,CAAC,gBAAgB,EAAEJ,GAAG,UAAU,CAAC;QAEnF,qBAAqB;QACrB,MAAMkC,SAAS,MAAM,IAAI,CAAC/C,sBAAsB,CAACoD,MAAM,CAACD;QAExD,6CAA6C;QAC7C,IAAI,CAACJ,QAAQ,MAAM,IAAIE,oCAA4B,CAAC,CAAC,iCAAiC,EAAEpC,IAAI;QAE5F,6BAA6B;QAC7B,OAAOkC;IACT;IAEA;;;;GAIC,GACD,MAAaM,YAA2B;QACtC,IAAI,CAACtD,MAAM,CAACO,GAAG,CAAC;QAEhB,sBAAsB;QACtB,MAAMyC,SAAS,MAAM,IAAI,CAAC/C,sBAAsB,CAACsD,MAAM,CAAC,CAAC;QAEzD,8CAA8C;QAC9C,IAAIP,WAAWQ,WAAW,MAAM,IAAIN,oCAA4B,CAAC;IACnE;IAEA;;;GAGC,GACD,AAAQtC,qBAAqBG,OAAwB,EAAQ;QAC3D,mBAAmB;QACnB,MAAM0C,cAAc,IAAIC;QAExB,8EAA8E;QAC9E,IAAI3C,QAAQU,QAAQ,IAAIV,QAAQ4B,eAAe,IAAIc,cAAc1C,QAAQ4B,eAAe,EAAE;YACxF5B,QAAQU,QAAQ,GAAG;YACnBV,QAAQgB,aAAa,GAAG;YACxBhB,QAAQ8B,kBAAkB,GAAG;YAC7B9B,QAAQ2B,iBAAiB,GAAG;YAC5B3B,QAAQ4B,eAAe,GAAG;YAC1B5B,QAAQ6B,SAAS,GAAG;QACtB;IACF;IAEA;;;;;GAKC,GACD,MAAcH,gBAAgB1B,OAQ7B,EAAiB;QAChB,kBAAkB;QAClB,MAAM4C,mBAAmB5C,QAAQkB,SAAS,IAAI,IAAI2B,gBAAO,CAAC7C,QAAQkB,SAAS;QAE3E,gEAAgE;QAChE,IAAIlB,QAAQS,IAAI,IAAIT,QAAQU,QAAQ,EAAE,MAAM,IAAIC,2BAAmB,CAAC;QAEpE,8HAA8H;QAC9H,IAAI,CAACX,QAAQS,IAAI,IAAK,CAAA,CAACT,QAAQkB,SAAS,IAAI0B,iBAAiBE,GAAG,CAAC,EAAC,GAChE,MAAM,IAAInC,2BAAmB,CAAC;QAEhC,kDAAkD;QAClD,IAAIX,QAAQU,QAAQ,EAAE;YACpB,kFAAkF;YAClF,IAAI,CAACV,QAAQgB,aAAa,EAAE,MAAM,IAAIL,2BAAmB,CAAC;YAE1D,uFAAuF;YACvF,IAAI,CAACX,QAAQ2B,iBAAiB,EAAE,MAAM,IAAIhB,2BAAmB,CAAC;YAE9D,qFAAqF;YACrF,IAAI,CAACX,QAAQ4B,eAAe,EAAE,MAAM,IAAIjB,2BAAmB,CAAC;YAE5D,8EAA8E;YAC9E,IAAI,CAACX,QAAQ6B,SAAS,EAAE,MAAM,IAAIlB,2BAAmB,CAAC;YAEtD,yGAAyG;YACzG,IAAIX,QAAQ2B,iBAAiB,GAAG3B,QAAQ4B,eAAe,EACrD,MAAM,IAAIjB,2BAAmB,CAAC;YAEhC,+FAA+F;YAC/F,IAAIX,QAAQ4B,eAAe,GAAG,IAAIe,QAChC,MAAM,IAAIhC,2BAAmB,CAAC;QAClC;IACF;IAEA;;;;;;GAMC,GACD,MAAcoB,4BAA4Bf,aAAqB,EAAEE,SAAiB,EAAmB;QACnG,kBAAkB;QAClB,MAAM0B,mBAAmB,IAAIC,gBAAO,CAAC3B;QACrC,MAAM6B,uBAAuB,IAAIF,gBAAO,CAAC7B;QAEzC,yFAAyF;QACzF,IAAI,CAACE,aAAa0B,iBAAiBI,EAAE,CAAC,IACpC,MAAM,IAAIrC,2BAAmB,CAAC;QAEhC,gCAAgC;QAChC,MAAMmB,qBAAqBc,iBACxBK,KAAK,CAACF,sBACNG,SAAS,CAACN,kBACVO,KAAK,CAAC,KACNC,eAAe,CAAC,GAChBC,QAAQ;QAEX,OAAOvB;IACT;AACF"}