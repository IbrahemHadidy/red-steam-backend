{"version":3,"sources":["../../../../../src/modules/repositories/sql/games-features/games-features.service.spec.ts"],"sourcesContent":["import { ConflictException, InternalServerErrorException, Logger, NotFoundException } from '@nestjs/common';\r\nimport { ConfigModule, ConfigService } from '@nestjs/config';\r\nimport { Test, TestingModule } from '@nestjs/testing';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { environmentConfig, getSqlTypeOrmConfig } from '@test/integration-setup';\r\n\r\n// Games Features Module and Service\r\nimport { GamesFeaturesModule } from '@repositories/sql/games-features/games-features.module';\r\nimport { GamesFeaturesService } from '@repositories/sql/games-features/games-features.service';\r\n\r\n// Entities\r\nimport { GameFeature } from '@repositories/sql/games-features/game-feature.entity';\r\n\r\ndescribe('gamesTagsService', () => {\r\n  let gameFeature: GameFeature;\r\n  let gameFeature2: GameFeature;\r\n  let testIconBuffer: Buffer;\r\n  let testIconBuffer2: Buffer;\r\n  let testIconBuffer3: Buffer;\r\n  let featuresService: GamesFeaturesService;\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      imports: [\r\n        ConfigModule.forRoot(environmentConfig),\r\n        TypeOrmModule.forRootAsync({\r\n          inject: [ConfigService],\r\n          name: 'sql',\r\n          useFactory: async (configService: ConfigService) => getSqlTypeOrmConfig(configService),\r\n        }),\r\n        GamesFeaturesModule,\r\n      ],\r\n      providers: [GamesFeaturesService, Logger],\r\n    }).compile();\r\n\r\n    featuresService = module.get<GamesFeaturesService>(GamesFeaturesService);\r\n\r\n    testIconBuffer = Buffer.from('test-icon-data');\r\n    testIconBuffer2 = Buffer.from('test-icon-data2');\r\n    testIconBuffer3 = Buffer.from('test-icon-data3');\r\n\r\n    gameFeature = await featuresService.create({ name: 'Test1', icon: testIconBuffer });\r\n    gameFeature2 = await featuresService.create({ name: 'Test2', icon: testIconBuffer2 });\r\n  });\r\n\r\n  afterEach(async () => {\r\n    await featuresService.removeAll();\r\n  });\r\n\r\n  describe('getAll', () => {\r\n    it('should return an array of game features', async () => {\r\n      const gameFeatures = await featuresService.getAll('name', 'ASC');\r\n      expect(gameFeatures.length).toEqual(2);\r\n    });\r\n  });\r\n\r\n  describe('getById', () => {\r\n    it('should return the game feature with the given id', async () => {\r\n      const foundGameFeature = await featuresService.getById(gameFeature.id);\r\n      expect(foundGameFeature).toEqual(expect.objectContaining({ name: 'Test1' }));\r\n    });\r\n\r\n    it('should throw an error if the game feature does not exist', async () => {\r\n      await expect(featuresService.getById(0)).rejects.toThrow(NotFoundException);\r\n    });\r\n  });\r\n\r\n  describe('getByName', () => {\r\n    it('should return the game feature with the given name', async () => {\r\n      const foundGameFeature = await featuresService.getByName('Test1');\r\n      expect(foundGameFeature).toEqual(expect.objectContaining({ name: 'Test1' }));\r\n    });\r\n\r\n    it('should throw an error if the game feature does not exist', async () => {\r\n      await expect(featuresService.getByName('Test3')).rejects.toThrow(NotFoundException);\r\n    });\r\n  });\r\n\r\n  describe('getFeaturesPaginated', () => {\r\n    it('should return an array of game features sorted by name', async () => {\r\n      const gameFeatures = await featuresService.getFeaturesPaginated(0, 10, 'name', 'ASC');\r\n      expect(gameFeatures.items.length).toEqual(2);\r\n      expect(gameFeatures.items[0].name).toEqual('Test1');\r\n      expect(gameFeatures.items[1].name).toEqual('Test2');\r\n    });\r\n\r\n    it('should return an array of game features sorted by id', async () => {\r\n      const gameFeatures = await featuresService.getFeaturesPaginated(0, 10, 'id', 'ASC');\r\n      expect(gameFeatures.items.length).toEqual(2);\r\n      expect(gameFeatures.items[0].id).toEqual(gameFeature.id);\r\n      expect(gameFeatures.items[1].id).toEqual(gameFeature2.id);\r\n    });\r\n\r\n    it('should return values with the given search', async () => {\r\n      const gameFeatures = await featuresService.getFeaturesPaginated(0, 10, 'name', 'ASC', { name: 'Test2' });\r\n      expect(gameFeatures.items.length).toEqual(1);\r\n      expect(gameFeatures.items[0].name).toEqual('Test2');\r\n    });\r\n  });\r\n\r\n  describe('create', () => {\r\n    it('should create a new game feature', async () => {\r\n      const createdGameFeature = await featuresService.create({ name: 'Test3', icon: testIconBuffer2 });\r\n      expect(createdGameFeature).toEqual(expect.objectContaining({ name: 'Test3' }));\r\n    });\r\n\r\n    it('should throw an error if the game feature name already exists', async () => {\r\n      await expect(featuresService.create({ name: 'Test1', icon: testIconBuffer })).rejects.toThrow(ConflictException);\r\n    });\r\n  });\r\n\r\n  describe('update', () => {\r\n    it('should update the game feature with the given id', async () => {\r\n      const updatedGameFeature = await featuresService.update(gameFeature2.id, {\r\n        name: 'Test3',\r\n        icon: testIconBuffer3,\r\n      });\r\n      expect(updatedGameFeature).toEqual(expect.objectContaining({ name: 'Test3' }));\r\n    });\r\n\r\n    it('should throw an error if the game feature does not exist', async () => {\r\n      await expect(featuresService.update(0, { name: 'Test3', icon: testIconBuffer })).rejects.toThrow(\r\n        NotFoundException,\r\n      );\r\n    });\r\n\r\n    it('should throw an error if no name or description is provided', async () => {\r\n      await expect(featuresService.update(gameFeature.id, {})).rejects.toThrow(InternalServerErrorException);\r\n    });\r\n  });\r\n\r\n  describe('remove', () => {\r\n    it('should remove the game feature with the given id', async () => {\r\n      const removedGameFeature = await featuresService.remove(gameFeature.id);\r\n      expect(removedGameFeature).toEqual(expect.objectContaining({ name: 'Test1' }));\r\n    });\r\n\r\n    it('should throw an error if the game feature does not exist', async () => {\r\n      await expect(featuresService.remove(0)).rejects.toThrow(NotFoundException);\r\n    });\r\n  });\r\n\r\n  describe('removeAll', () => {\r\n    it('should remove all game features', async () => {\r\n      await featuresService.removeAll();\r\n      const gameFeatures = await featuresService.getAll('name', 'ASC');\r\n      expect(gameFeatures.length).toEqual(0);\r\n    });\r\n  });\r\n});\r\n"],"names":["describe","gameFeature","gameFeature2","testIconBuffer","testIconBuffer2","testIconBuffer3","featuresService","beforeEach","module","Test","createTestingModule","imports","ConfigModule","forRoot","environmentConfig","TypeOrmModule","forRootAsync","inject","ConfigService","name","useFactory","configService","getSqlTypeOrmConfig","GamesFeaturesModule","providers","GamesFeaturesService","Logger","compile","get","Buffer","from","create","icon","afterEach","removeAll","it","gameFeatures","getAll","expect","length","toEqual","foundGameFeature","getById","id","objectContaining","rejects","toThrow","NotFoundException","getByName","getFeaturesPaginated","items","createdGameFeature","ConflictException","updatedGameFeature","update","InternalServerErrorException","removedGameFeature","remove"],"mappings":"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"}