{"version":3,"sources":["../../../../../src/modules/repositories/sql/companies/companies.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { ConfigModule, ConfigService } from '@nestjs/config';\r\nimport { BadRequestException, ConflictException, Logger } from '@nestjs/common';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { environmentConfig, getSqlTypeOrmConfig } from '@test/integration-setup';\r\n\r\nimport { CompaniesModule } from '@repositories/sql/companies/companies.module';\r\nimport { CompaniesService } from '@repositories/sql/companies/companies.service';\r\nimport { Publisher, Developer } from '@repositories/sql/companies/company.entity';\r\n\r\ndescribe('gamesTagsService', () => {\r\n  let publisher1: Publisher;\r\n  let publisher2: Publisher;\r\n  let developer1: Developer;\r\n  let developer2: Developer;\r\n  let companiesService: CompaniesService;\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      imports: [\r\n        ConfigModule.forRoot(environmentConfig),\r\n        TypeOrmModule.forRootAsync({\r\n          inject: [ConfigService],\r\n          name: 'sql',\r\n          useFactory: async (configService: ConfigService) => getSqlTypeOrmConfig(configService),\r\n        }),\r\n        CompaniesModule,\r\n      ],\r\n      providers: [CompaniesService, Logger],\r\n    }).compile();\r\n\r\n    companiesService = module.get<CompaniesService>(CompaniesService);\r\n\r\n    publisher1 = await companiesService.create(\r\n      { name: 'publisher 1', website: 'https://www.publisher1.com' },\r\n      'publisher',\r\n    );\r\n    publisher2 = await companiesService.create(\r\n      { name: 'publisher 2', website: 'https://www.publisher2.com' },\r\n      'publisher',\r\n    );\r\n\r\n    developer1 = await companiesService.create(\r\n      { name: 'developer 1', website: 'https://www.developer1.com' },\r\n      'developer',\r\n    );\r\n    developer2 = await companiesService.create(\r\n      { name: 'developer 2', website: 'https://www.developer2.com' },\r\n      'developer',\r\n    );\r\n  });\r\n\r\n  afterEach(async () => {\r\n    await companiesService.removeAll('developers');\r\n    await companiesService.removeAll('publishers');\r\n  });\r\n\r\n  describe('getAll', () => {\r\n    it('should return an array of publishers', async () => {\r\n      const publishers = await companiesService.getAll('id', 'asc', 'publishers');\r\n      expect(publishers.length).toEqual(2);\r\n    });\r\n\r\n    it('should return an array of developers', async () => {\r\n      const developers = await companiesService.getAll('id', 'asc', 'developers');\r\n      expect(developers.length).toEqual(2);\r\n    });\r\n  });\r\n\r\n  describe('getById', () => {\r\n    it('should return the publisher with the given id', async () => {\r\n      const foundPublisher = await companiesService.getById(publisher1.id, 'publisher');\r\n      expect(foundPublisher).toEqual(expect.objectContaining({ name: publisher1.name, website: publisher1.website }));\r\n    });\r\n\r\n    it('should return the developer with the given id', async () => {\r\n      const foundDeveloper = await companiesService.getById(developer1.id, 'developer');\r\n      expect(foundDeveloper).toEqual(expect.objectContaining({ name: developer1.name, website: developer1.website }));\r\n    });\r\n  });\r\n\r\n  describe('getByName', () => {\r\n    it('should return the publisher with the given name', async () => {\r\n      const foundPublisher = await companiesService.getByName(publisher1.name, 'publisher');\r\n      expect(foundPublisher).toEqual(expect.objectContaining({ name: publisher1.name, website: publisher1.website }));\r\n    });\r\n\r\n    it('should return the developer with the given name', async () => {\r\n      const foundDeveloper = await companiesService.getByName(developer1.name, 'developer');\r\n      expect(foundDeveloper).toEqual(expect.objectContaining({ name: developer1.name, website: developer1.website }));\r\n    });\r\n  });\r\n\r\n  describe('getCompaniesPaginated', () => {\r\n    it('should return an array of game companies sorted by name', async () => {\r\n      const publishers = await companiesService.getCompaniesPaginated(0, 10, 'name', 'ASC', 'publisher');\r\n      expect(publishers.items.length).toEqual(2);\r\n      expect(publishers.items[0].name).toEqual('publisher 1');\r\n      expect(publishers.items[1].name).toEqual('publisher 2');\r\n    });\r\n\r\n    it('should return an array of game companies sorted by id', async () => {\r\n      const developers = await companiesService.getCompaniesPaginated(0, 10, 'id', 'ASC', 'developer');\r\n      expect(developers.items.length).toEqual(2);\r\n      expect(developers.items[0].id).toEqual(developer1.id);\r\n      expect(developers.items[1].id).toEqual(developer2.id);\r\n    });\r\n\r\n    it('should return values with the given search', async () => {\r\n      const publishers = await companiesService.getCompaniesPaginated(0, 10, 'name', 'ASC', 'publisher', {\r\n        name: 'publisher 1',\r\n      });\r\n      expect(publishers.items.length).toEqual(1);\r\n      expect(publishers.items[0].name).toEqual('publisher 1');\r\n    })\r\n  });\r\n\r\n  describe('create', () => {\r\n    it('should create a new publisher', async () => {\r\n      const createdPublisher = await companiesService.create(\r\n        { name: 'publisher 3', website: 'https://www.publisher3.com' },\r\n        'publisher',\r\n      );\r\n      expect(createdPublisher.name).toEqual('publisher 3');\r\n    });\r\n\r\n    it('should create a new developer', async () => {\r\n      const createdDeveloper = await companiesService.create(\r\n        { name: 'developer 3', website: 'https://www.developer3.com' },\r\n        'developer',\r\n      );\r\n      expect(createdDeveloper.name).toEqual('developer 3');\r\n    });\r\n\r\n    it('should throw an error if the name already exists', async () => {\r\n      await expect(\r\n        companiesService.create({ name: 'publisher 1', website: 'https://www.publisher11.com' }, 'publisher'),\r\n      ).rejects.toThrow(ConflictException);\r\n    });\r\n\r\n    it('should throw an error if the website already exists', async () => {\r\n      await expect(\r\n        companiesService.create({ name: 'publisher 11', website: 'https://www.publisher1.com' }, 'publisher'),\r\n      ).rejects.toThrow(ConflictException);\r\n    });\r\n\r\n    it('should throw an error if website is not valid', async () => {\r\n      await expect(\r\n        companiesService.create({ name: 'publisher 11', website: 'www.publisher1.com' }, 'publisher'),\r\n      ).rejects.toThrow(BadRequestException);\r\n    });\r\n  });\r\n\r\n  describe('update', () => {\r\n    it('should update the name of the publisher with the given id', async () => {\r\n      const updatedPublisher = await companiesService.update(publisher1.id, 'name', 'publisher 1 updated', 'publisher');\r\n      expect(updatedPublisher.name).toEqual('publisher 1 updated');\r\n    });\r\n\r\n    it('should update the name of the developer with the given id', async () => {\r\n      const updatedDeveloper = await companiesService.update(developer1.id, 'name', 'developer 1 updated', 'developer');\r\n      expect(updatedDeveloper.name).toEqual('developer 1 updated');\r\n    });\r\n\r\n    it('should update the website of the publisher with the given id', async () => {\r\n      const updatedPublisher = await companiesService.update(\r\n        publisher1.id,\r\n        'website',\r\n        'https://www.publisher1updated.com',\r\n        'publisher',\r\n      );\r\n      expect(updatedPublisher.website).toEqual('https://www.publisher1updated.com');\r\n    });\r\n\r\n    it('should update the website of the developer with the given id', async () => {\r\n      const updatedDeveloper = await companiesService.update(\r\n        developer1.id,\r\n        'website',\r\n        'https://www.developer1updated.com',\r\n        'developer',\r\n      );\r\n      expect(updatedDeveloper.website).toEqual('https://www.developer1updated.com');\r\n    });\r\n  });\r\n\r\n  describe('delete', () => {\r\n    it('should delete the publisher with the given id', async () => {\r\n      await companiesService.remove(publisher2.id, 'publisher');\r\n      const publishers = await companiesService.getAll('id', 'asc', 'publishers');\r\n      expect(publishers.length).toEqual(1);\r\n    });\r\n\r\n    it('should delete the developer with the given id', async () => {\r\n      await companiesService.remove(developer2.id, 'developer');\r\n      const developers = await companiesService.getAll('id', 'asc', 'developers');\r\n      expect(developers.length).toEqual(1);\r\n    });\r\n  });\r\n\r\n  describe('removeAll', () => {\r\n    it('should remove all publishers', async () => {\r\n      await companiesService.removeAll('publishers');\r\n      const publishers = await companiesService.getAll('id', 'asc', 'publishers');\r\n      expect(publishers.length).toEqual(0);\r\n    });\r\n\r\n    it('should remove all developers', async () => {\r\n      await companiesService.removeAll('developers');\r\n      const developers = await companiesService.getAll('id', 'asc', 'developers');\r\n      expect(developers.length).toEqual(0);\r\n    });\r\n  });\r\n});\r\n"],"names":["describe","publisher1","publisher2","developer1","developer2","companiesService","beforeEach","module","Test","createTestingModule","imports","ConfigModule","forRoot","environmentConfig","TypeOrmModule","forRootAsync","inject","ConfigService","name","useFactory","configService","getSqlTypeOrmConfig","CompaniesModule","providers","CompaniesService","Logger","compile","get","create","website","afterEach","removeAll","it","publishers","getAll","expect","length","toEqual","developers","foundPublisher","getById","id","objectContaining","foundDeveloper","getByName","getCompaniesPaginated","items","createdPublisher","createdDeveloper","rejects","toThrow","ConflictException","BadRequestException","updatedPublisher","update","updatedDeveloper","remove"],"mappings":"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"}