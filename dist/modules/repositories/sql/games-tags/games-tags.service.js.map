{"version":3,"sources":["../../../../../src/modules/repositories/sql/games-tags/games-tags.service.ts"],"sourcesContent":["// NestJS\r\nimport { ConflictException, Injectable, InternalServerErrorException, Logger, NotFoundException } from '@nestjs/common';\r\n\r\n// TypeORM\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { FindOptionsWhere, ILike, In, Repository } from 'typeorm';\r\n\r\n// Entities\r\nimport { GameTag } from '@repositories/sql/games-tags/game-tag.entity';\r\n\r\n// Types\r\nimport type { GameTag as GameTagType } from '@repositories/sql/games-tags/game-tag.entity';\r\n\r\n@Injectable()\r\nexport class GamesTagsService {\r\n  constructor(\r\n    private readonly logger: Logger,\r\n    @InjectRepository(GameTag, 'sql')\r\n    private readonly gameTagsRepository: Repository<GameTag>,\r\n  ) {}\r\n\r\n  /**\r\n   * Retrieves all game tags.\r\n   * @return A Promise that resolves to an array of game tags.\r\n   */\r\n  public async getAll(orderBy: 'id' | 'name', order: 'ASC' | 'DESC'): Promise<GameTagType[]> {\r\n    this.logger.log(`Retrieving all game tags, order by: ${orderBy}, order: ${order}`);\r\n\r\n    // Get all game tags\r\n    const tags = await this.gameTagsRepository.find({ order: { [orderBy]: order } });\r\n\r\n    // Return the game tags\r\n    return tags;\r\n  }\r\n\r\n  /**\r\n   * Retrieves a game tag by its name.\r\n   * @param name - The name of the game tag to retrieve.\r\n   * @return A Promise that resolves to the retrieved game tag or null if not found.\r\n   */\r\n  public async getByName(name: string): Promise<GameTagType> {\r\n    this.logger.log(`Retrieving game tag with name ${name}`);\r\n\r\n    // Get the game tag by name\r\n    const tag = await this.gameTagsRepository.findOne({ where: { name } });\r\n\r\n    // Return the game tag\r\n    return tag;\r\n  }\r\n\r\n  /**\r\n   * Retrieves multiple game tags by their names.\r\n   * @param names - The names of the game tags to retrieve.\r\n   * @return A Promise that resolves to an array of retrieved game tags.\r\n   */\r\n  public async getByNameList(names: string[]): Promise<GameTagType[]> {\r\n    this.logger.log(`Retrieving game tags with names ${names}`);\r\n\r\n    // Get the game tags by names\r\n    const tags = await this.gameTagsRepository.find({ where: { name: In(names) } });\r\n\r\n    // Return the game tags\r\n    return tags;\r\n  }\r\n\r\n  /**\r\n   * Retrieves a game tag by its ID.\r\n   * @param id - The ID of the game tag to retrieve.\r\n   * @return A Promise that resolves to the retrieved game tag or null if not found.\r\n   */\r\n  public async getById(id: number): Promise<GameTagType> {\r\n    this.logger.log(`Retrieving game tag with ID ${id}`);\r\n\r\n    // Get the game tag by ID\r\n    const tag = await this.gameTagsRepository.findOne({ where: { id } });\r\n\r\n    // If the game tag is not found, throw a NotFoundException\r\n    if (!tag) throw new NotFoundException(`Game tag with ID ${id} not found`);\r\n\r\n    // Return the game tag\r\n    return tag;\r\n  }\r\n\r\n  /**\r\n   * Retrieves multiple game tags by their IDs.\r\n   * @param ids - The IDs of the game tags to retrieve.\r\n   */\r\n  public async getByIds(ids: number[]): Promise<GameTagType[]> {\r\n    this.logger.log(`Retrieving game tags with IDs ${ids}`);\r\n\r\n    // Get the game tags by IDs\r\n    const tags = await this.gameTagsRepository.find({ where: { id: In(ids) } });\r\n\r\n    // If any of the game tags are not found, throw a NotFoundException\r\n    if (tags.length !== ids.length) {\r\n      const missingIds = ids.filter((id) => !tags.some((tag) => tag.id === id));\r\n      throw new NotFoundException(`Game tags with IDs ${missingIds} not found`);\r\n    }\r\n\r\n    // Return the game tags\r\n    return tags;\r\n  }\r\n\r\n  /**\r\n   * Gets paginated tags.\r\n   * @param page - The current page number.\r\n   * @param limit - The number of items per page.\r\n   * @param orderBy - The field to order by.\r\n   * @param order - The order direction.\r\n   * @param searchQuery - The search query.\r\n   * @returns A promise that resolves to the paginated tags.\r\n   */\r\n  public async getTagsPaginated(\r\n    page: number,\r\n    limit: number,\r\n    orderBy: 'id' | 'name',\r\n    order: 'ASC' | 'DESC',\r\n    searchQuery?: { name?: string },\r\n  ): Promise<{ items: GameTagType[]; total: number; totalPages: number }> {\r\n    this.logger.log(`Getting tags paginated: page ${page}, limit ${limit}, order by ${orderBy} ${order}`);\r\n\r\n    // Create the where clause\r\n    const where: FindOptionsWhere<GameTagType> = {};\r\n    if (searchQuery?.name) {\r\n      where.name = ILike(`%${searchQuery.name}%`);\r\n    }\r\n\r\n    // Get the paginated tags\r\n    const [items, total] = await this.gameTagsRepository.findAndCount({\r\n      where,\r\n      order: { [orderBy]: order },\r\n      skip: Math.max((page - 1) * limit, 0),\r\n      take: limit,\r\n    });\r\n\r\n    // Calculate the total number of pages\r\n    const totalPages = Math.ceil(total / limit);\r\n\r\n    // Return the paginated tags and total number of pages\r\n    return { items, total, totalPages };\r\n  }\r\n\r\n  /**\r\n   * Creates a new game tag.\r\n   * @param name - The name of the new game tag.\r\n   * @return A Promise that resolves to the created game tag.\r\n   * @throws `ConflictException` if the game tag already exists.\r\n   * @throws `InternalServerErrorException` if the creation fails.\r\n   */\r\n  public async create(name: string): Promise<GameTagType> {\r\n    this.logger.log(`Creating new game tag: ${name}`);\r\n\r\n    // Check if the game tag already exists\r\n    const existingTag = await this.getByName(name);\r\n\r\n    // If the game tag already exists, throw a ConflictException\r\n    if (existingTag) throw new ConflictException(`Game tag ${name} already exists`);\r\n\r\n    // Create the new game tag\r\n    const newTag = new GameTag();\r\n    newTag.name = name;\r\n\r\n    // Save the new game tag\r\n    return this.gameTagsRepository.save(newTag);\r\n  }\r\n\r\n  /**\r\n   * Updates a game tag by its ID.\r\n   * @param id - The ID of the game tag to update.\r\n   * @param name - The new name of the game tag.\r\n   * @return A Promise that resolves to the updated game tag.\r\n   * @throws `NotFoundException` Throws a NotFoundException if the game tag with the specified ID is not found.\r\n   * @throws `InternalServerErrorException` Throws an InternalServerErrorException if the update fails.\r\n   * @throws `ConflictException` Throws a ConflictException if the new name conflicts with an existing game tag.\r\n   */\r\n  public async update(id: number, name: string): Promise<GameTagType> {\r\n    this.logger.log(`Updating game tag with ID ${id}`);\r\n\r\n    // Check if the game tag exists\r\n    const tag = await this.getById(id);\r\n\r\n    // Check if the new name conflicts with an existing game tag\r\n    const existingTag = await this.getByName(name);\r\n\r\n    // If the new name conflicts with an existing game tag, throw a ConflictException\r\n    if (existingTag && existingTag.id !== id) throw new ConflictException(`Game tag ${name} already exists`);\r\n\r\n    // Update the game tag\r\n    tag.name = name;\r\n\r\n    // Save the updated game tag\r\n    return this.gameTagsRepository.save(tag);\r\n  }\r\n\r\n  /**\r\n   * Removes a game tag by its ID.\r\n   * @param id - The ID of the game tag to remove.\r\n   * @return A Promise that resolves to the removed game tag.\r\n   * @throws `InternalServerErrorException` Throws an InternalServerErrorException if the removal fails.\r\n   */\r\n  public async removeById(id: number): Promise<GameTagType> {\r\n    this.logger.log(`Removing game tag with ID ${id}`);\r\n\r\n    // Check if the game tag exists\r\n    const tag = await this.getById(id);\r\n\r\n    // Remove the game tag\r\n    const removedTag = await this.gameTagsRepository.remove(tag);\r\n\r\n    // If the removal fails, throw an InternalServerErrorException\r\n    if (!removedTag)\r\n      throw new InternalServerErrorException(`Failed to remove game tag with ID ${id} from the database`);\r\n\r\n    // Return the removed game tag\r\n    return removedTag;\r\n  }\r\n\r\n  /**\r\n   * Removes multiple game tags by their IDs.\r\n   * @param ids - The IDs of the game tags to remove.\r\n   * @return A Promise that resolves to an array of removed game tags.\r\n   * @throws `InternalServerErrorException` Throws an InternalServerErrorException if the removal fails.\r\n   */\r\n  public async removeByIds(ids: number[]): Promise<GameTagType[]> {\r\n    this.logger.log(`Removing game tags with IDs ${ids}`);\r\n\r\n    // Check if the game tags exist\r\n    const tags = await this.getByIds(ids);\r\n\r\n    // Remove the game tags\r\n    const removedTags = await this.gameTagsRepository.remove(tags);\r\n\r\n    // If the removal fails, throw an InternalServerErrorException\r\n    if (removedTags.length === 0)\r\n      throw new InternalServerErrorException(`Failed to remove game tags with IDs ${ids} from the database`);\r\n\r\n    // Return the removed game tags\r\n    return removedTags;\r\n  }\r\n\r\n  /**\r\n   * Removes a game tag by its name.\r\n   * @param name - The name of the game tag to remove.\r\n   * @return A Promise that resolves to the removed game tag.\r\n   * @throws `InternalServerErrorException` Throws an InternalServerErrorException if the removal fails.\r\n   */\r\n  public async removeByName(name: string): Promise<GameTagType> {\r\n    this.logger.log(`Removing game tag with name ${name}`);\r\n\r\n    // Check if the game tag exists\r\n    const tag = await this.getByName(name);\r\n\r\n    // Remove the game tag\r\n    const removedTag = await this.gameTagsRepository.remove(tag);\r\n\r\n    // If the removal fails, throw an InternalServerErrorException\r\n    if (!removedTag) throw new InternalServerErrorException(`Failed to remove game tag ${name} from the database`);\r\n\r\n    // Return the removed game tag\r\n    return removedTag;\r\n  }\r\n\r\n  /**\r\n   * Removes multiple game tags by their names.\r\n   * @param names - The names of the game tags to remove.\r\n   * @return A Promise that resolves to an array of removed game tags.\r\n   * @throws `InternalServerErrorException` Throws an InternalServerErrorException if the removal fails.\r\n   */\r\n  public async removeByNameList(names: string[]): Promise<GameTagType[]> {\r\n    this.logger.log(`Removing game tags with names ${names}`);\r\n\r\n    // Check if the game tags exist\r\n    const tags = await this.getByNameList(names);\r\n\r\n    // Remove the game tags\r\n    const removedTags = await this.gameTagsRepository.remove(tags);\r\n\r\n    // If the removal fails, throw an InternalServerErrorException\r\n    if (removedTags.length === 0)\r\n      throw new InternalServerErrorException(`Failed to remove game tags ${names} from the database`);\r\n\r\n    // Return the removed game tags\r\n    return removedTags;\r\n  }\r\n\r\n  /**\r\n   * Deletes all game tags from the database.\r\n   * @return {Promise<void>} A Promise that resolves when the deletion is complete.\r\n   * @throws `InternalServerErrorException` Throws an InternalServerErrorException if the deletion fails.\r\n   */\r\n  public async removeAll(): Promise<void> {\r\n    this.logger.log('Deleting all game tags');\r\n\r\n    // Delete all game tags\r\n    const result = await this.gameTagsRepository.delete({});\r\n\r\n    // If the deletion fails, throw an InternalServerErrorException\r\n    if (result.affected === undefined)\r\n      throw new InternalServerErrorException('Failed to delete game tags from the database');\r\n  }\r\n}\r\n"],"names":["GamesTagsService","constructor","logger","gameTagsRepository","getAll","orderBy","order","log","tags","find","getByName","name","tag","findOne","where","getByNameList","names","In","getById","id","NotFoundException","getByIds","ids","length","missingIds","filter","some","getTagsPaginated","page","limit","searchQuery","ILike","items","total","findAndCount","skip","Math","max","take","totalPages","ceil","create","existingTag","ConflictException","newTag","GameTag","save","update","removeById","removedTag","remove","InternalServerErrorException","removeByIds","removedTags","removeByName","removeByNameList","removeAll","result","delete","affected","undefined"],"mappings":"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"}