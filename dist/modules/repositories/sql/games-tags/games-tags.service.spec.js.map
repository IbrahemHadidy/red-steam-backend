{"version":3,"sources":["../../../../../src/modules/repositories/sql/games-tags/games-tags.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { ConflictException, Logger } from '@nestjs/common';\r\nimport { ConfigModule, ConfigService } from '@nestjs/config';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { environmentConfig, getSqlTypeOrmConfig } from '@test/integration-setup';\r\n\r\n// Game tags Module and Service\r\nimport { GamesTagsService } from '@repositories/sql/games-tags/games-tags.service';\r\nimport { GamesTagsModule } from '@repositories/sql/games-tags/games-tags.module';\r\n\r\n// Entities\r\nimport { GameTag } from '@repositories/sql/games-tags/game-tag.entity';\r\n\r\ndescribe('gamesTagsService', () => {\r\n  let testTag: GameTag;\r\n  let testTag2: GameTag;\r\n  let gamesTagsService: GamesTagsService;\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      imports: [\r\n        ConfigModule.forRoot(environmentConfig),\r\n        TypeOrmModule.forRootAsync({\r\n          inject: [ConfigService],\r\n          name: 'sql',\r\n          useFactory: async (configService: ConfigService) => getSqlTypeOrmConfig(configService),\r\n        }),\r\n        GamesTagsModule,\r\n      ],\r\n      providers: [GamesTagsService, Logger],\r\n    }).compile();\r\n\r\n    gamesTagsService = module.get<GamesTagsService>(GamesTagsService);\r\n\r\n    testTag = await gamesTagsService.create('Test');\r\n    testTag2 = await gamesTagsService.create('Test2');\r\n  });\r\n\r\n  afterEach(async () => {\r\n    await gamesTagsService.removeAll();\r\n  });\r\n\r\n  describe('getAll', () => {\r\n    it('should return an array of game tags', async () => {\r\n      const tags = await gamesTagsService.getAll('name', 'ASC');\r\n      expect(tags.length).toBeGreaterThan(0);\r\n    });\r\n  });\r\n\r\n  describe('getByName', () => {\r\n    it('should return the game tag with the given name', async () => {\r\n      const tag = await gamesTagsService.getByName('Test');\r\n      expect(tag.name).toEqual('Test');\r\n    });\r\n  });\r\n\r\n  describe('getByNameList', () => {\r\n    it('should return the game tags with the given names', async () => {\r\n      const tags = await gamesTagsService.getByNameList(['Test', 'Test2']);\r\n\r\n      // Assert\r\n      expect(tags.length).toEqual(2);\r\n      expect(tags[0].name).toEqual('Test');\r\n      expect(tags[1].name).toEqual('Test2');\r\n    });\r\n  });\r\n\r\n  describe('getById', () => {\r\n    it('should return the game tag with the given id', async () => {\r\n      const tag = await gamesTagsService.getById(testTag.id);\r\n\r\n      // Assert\r\n      expect(tag.name).toEqual(testTag.name);\r\n    });\r\n  });\r\n\r\n  describe('getByIds', () => {\r\n    it('should return the game tags with the given ids', async () => {\r\n      const tags = await gamesTagsService.getByIds([testTag.id, testTag2.id]);\r\n\r\n      // Assert\r\n      expect(tags[0].name).toEqual(testTag.name);\r\n      expect(tags[1].name).toEqual(testTag2.name);\r\n    });\r\n  });\r\n\r\n  describe('getTagsPaginated', () => {\r\n    it('should return an array of game tags sorted by name', async () => {\r\n      const gameTags = await gamesTagsService.getTagsPaginated(0, 10, 'name', 'ASC');\r\n      expect(gameTags.items.length).toEqual(2);\r\n      expect(gameTags.items[0].name).toEqual('Test1');\r\n      expect(gameTags.items[1].name).toEqual('Test2');\r\n    });\r\n\r\n    it('should return an array of game tags sorted by id', async () => {\r\n      const gameTags = await gamesTagsService.getTagsPaginated(0, 10, 'id', 'ASC');\r\n      expect(gameTags.items.length).toEqual(2);\r\n      expect(gameTags.items[0].id).toEqual(testTag.id);\r\n      expect(gameTags.items[1].id).toEqual(testTag2.id);\r\n    });\r\n\r\n    it('should return values with the given search', async () => {\r\n      const gameTags = await gamesTagsService.getTagsPaginated(0, 10, 'name', 'ASC', { name: 'Test2' });\r\n      expect(gameTags.items.length).toEqual(1);\r\n      expect(gameTags.items[0].name).toEqual('Test2');\r\n    });\r\n  });\r\n\r\n  describe('create', () => {\r\n    it('should create a new game tag', async () => {\r\n      const name = 'Test1';\r\n      const createdTag = await gamesTagsService.create(name);\r\n\r\n      // Assert\r\n      expect(createdTag.name).toEqual(name);\r\n\r\n      // Cleanup\r\n      await gamesTagsService.removeByName(name);\r\n    });\r\n\r\n    it('should throw a ConflictException if the game tag already exists', async () => {\r\n      // Assert\r\n      await expect(gamesTagsService.create('Test')).rejects.toThrow(ConflictException);\r\n    });\r\n  });\r\n\r\n  describe('removeById', () => {\r\n    it('should remove the game tag with the given id', async () => {\r\n      const createdTag = await gamesTagsService.create('Test3');\r\n      const removedTag = await gamesTagsService.removeById(createdTag.id);\r\n\r\n      // Assert\r\n      expect(removedTag.name).toEqual('Test3');\r\n    });\r\n  });\r\n\r\n  describe('removeByIds', () => {\r\n    it('should remove the game tags with the given ids', async () => {\r\n      const createdTag = await gamesTagsService.create('Test3');\r\n      const createdTag2 = await gamesTagsService.create('Test4');\r\n      const removedTags = await gamesTagsService.removeByIds([createdTag.id, createdTag2.id]);\r\n\r\n      // Assert\r\n      expect(removedTags.length).toEqual(2);\r\n      expect(removedTags[0].name).toEqual('Test3');\r\n      expect(removedTags[1].name).toEqual('Test4');\r\n    });\r\n  });\r\n\r\n  describe('removeByName', () => {\r\n    it('should remove the game tag with the given name', async () => {\r\n      const createdTag = await gamesTagsService.create('Test3');\r\n      const removedTag = await gamesTagsService.removeByName(createdTag.name);\r\n\r\n      // Assert\r\n      expect(removedTag.name).toEqual('Test3');\r\n    });\r\n  });\r\n\r\n  describe('removeByNameList', () => {\r\n    it('should remove the game tags with the given names', async () => {\r\n      const createdTag = await gamesTagsService.create('Test3');\r\n      const createdTag2 = await gamesTagsService.create('Test4');\r\n      const removedTags = await gamesTagsService.removeByNameList([createdTag.name, createdTag2.name]);\r\n\r\n      // Assert\r\n      expect(removedTags.length).toEqual(2);\r\n      expect(removedTags[0].name).toEqual('Test3');\r\n      expect(removedTags[1].name).toEqual('Test4');\r\n    });\r\n  });\r\n\r\n  describe('removeAll', () => {\r\n    it('should delete all game tags', async () => {\r\n      await gamesTagsService.create('Test3');\r\n      await gamesTagsService.create('Test4');\r\n      await gamesTagsService.removeAll();\r\n      const tags = await gamesTagsService.getAll('name', 'ASC');\r\n      expect(tags.length).toEqual(0);\r\n    });\r\n  });\r\n});\r\n"],"names":["describe","testTag","testTag2","gamesTagsService","beforeEach","module","Test","createTestingModule","imports","ConfigModule","forRoot","environmentConfig","TypeOrmModule","forRootAsync","inject","ConfigService","name","useFactory","configService","getSqlTypeOrmConfig","GamesTagsModule","providers","GamesTagsService","Logger","compile","get","create","afterEach","removeAll","it","tags","getAll","expect","length","toBeGreaterThan","tag","getByName","toEqual","getByNameList","getById","id","getByIds","gameTags","getTagsPaginated","items","createdTag","removeByName","rejects","toThrow","ConflictException","removedTag","removeById","createdTag2","removedTags","removeByIds","removeByNameList"],"mappings":"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"}