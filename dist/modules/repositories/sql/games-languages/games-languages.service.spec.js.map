{"version":3,"sources":["../../../../../src/modules/repositories/sql/games-languages/games-languages.service.spec.ts"],"sourcesContent":["import { ConflictException, Logger, NotFoundException } from '@nestjs/common';\r\nimport { ConfigModule, ConfigService } from '@nestjs/config';\r\nimport { Test, TestingModule } from '@nestjs/testing';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { environmentConfig, getSqlTypeOrmConfig } from '@test/integration-setup';\r\n\r\n// Modules\r\nimport { CompaniesModule } from '@repositories/sql/companies/companies.module';\r\nimport { GamesFeaturesModule } from '@repositories/sql/games-features/games-features.module';\r\nimport { GamesLanguagesModule } from '@repositories/sql/games-languages/games-languages.module';\r\nimport { GamesPricingModule } from '@repositories/sql/games-pricing/games-pricing.module';\r\nimport { GamesTagsModule } from '@repositories/sql/games-tags/games-tags.module';\r\nimport { GamesModule } from '@repositories/sql/games/games.module';\r\n\r\n// Services\r\nimport { CompaniesService } from '@repositories/sql/companies/companies.service';\r\nimport { GamesFeaturesService } from '@repositories/sql/games-features/games-features.service';\r\nimport { GamesLanguagesService } from '@repositories/sql/games-languages/games-languages.service';\r\nimport { GamesPricingService } from '@repositories/sql/games-pricing/games-pricing.service';\r\nimport { GamesTagsService } from '@repositories/sql/games-tags/games-tags.service';\r\nimport { GamesService } from '@repositories/sql/games/games.service';\r\n\r\n// Entities\r\nimport { GameLanguage } from '@repositories/sql/games-languages/game-language.entity';\r\nimport { Game } from '@repositories/sql/games/game.entity';\r\n\r\ndescribe('gamesLanguagesService', () => {\r\n  let gameLanguage: GameLanguage;\r\n  let gameLanguage2: GameLanguage;\r\n  let game: Game;\r\n  let game2: Game;\r\n  let gamesService: GamesService;\r\n  let gamesLanguagesService: GamesLanguagesService;\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      imports: [\r\n        ConfigModule.forRoot(environmentConfig),\r\n        TypeOrmModule.forRootAsync({\r\n          inject: [ConfigService],\r\n          name: 'sql',\r\n          useFactory: async (configService: ConfigService) => getSqlTypeOrmConfig(configService),\r\n        }),\r\n        GamesPricingModule,\r\n        GamesModule,\r\n        CompaniesModule,\r\n        GamesLanguagesModule,\r\n        GamesFeaturesModule,\r\n        GamesTagsModule,\r\n      ],\r\n      providers: [\r\n        GamesPricingService,\r\n        GamesService,\r\n        CompaniesService,\r\n        GamesLanguagesService,\r\n        GamesFeaturesService,\r\n        GamesTagsService,\r\n        Logger,\r\n      ],\r\n    }).compile();\r\n\r\n    gamesService = module.get<GamesService>(GamesService);\r\n    gamesLanguagesService = module.get<GamesLanguagesService>(GamesLanguagesService);\r\n\r\n    gameLanguage = await gamesLanguagesService.create('Lang1');\r\n    gameLanguage2 = await gamesLanguagesService.create('Lang2');\r\n\r\n    game = await gamesService.create({\r\n      name: 'Test Game 1',\r\n      category: 'Test Category',\r\n      description: 'Test Description',\r\n      releaseDate: new Date('2022-01-01'),\r\n      publishers: [],\r\n      developers: [],\r\n      thumbnailEntries: {\r\n        mainImage: null,\r\n        backgroundImage: null,\r\n        menuImg: null,\r\n        horizontalHeaderImage: null,\r\n        verticalHeaderImage: null,\r\n        smallHeaderImage: null,\r\n        searchImage: null,\r\n        tabImage: null,\r\n      },\r\n      imageEntries: [],\r\n      videoEntries: [],\r\n      tags: [],\r\n      pricing: {\r\n        free: false,\r\n        price: 10,\r\n      },\r\n      features: [],\r\n      languages: [\r\n        { name: gameLanguage.name, interface: true, fullAudio: true, subtitles: true },\r\n        { name: gameLanguage2.name, interface: true, fullAudio: false, subtitles: true },\r\n      ],\r\n      platformEntries: {\r\n        win: true,\r\n        mac: false,\r\n      },\r\n      link: 'Test Link',\r\n      about: 'Test About',\r\n      mature: false,\r\n      matureDescription: 'Test Mature Description',\r\n      systemRequirements: {\r\n        mini: {},\r\n        recommended: {},\r\n      },\r\n      legal: 'Test Legal',\r\n      featured: false,\r\n    });\r\n\r\n    game2 = await gamesService.create({\r\n      name: 'Test Game 2',\r\n      category: 'Test Category',\r\n      description: 'Test Description',\r\n      releaseDate: new Date('2022-01-02'),\r\n      publishers: [],\r\n      developers: [],\r\n      thumbnailEntries: {\r\n        mainImage: null,\r\n        backgroundImage: null,\r\n        menuImg: null,\r\n        horizontalHeaderImage: null,\r\n        verticalHeaderImage: null,\r\n        smallHeaderImage: null,\r\n        searchImage: null,\r\n        tabImage: null,\r\n      },\r\n      imageEntries: [],\r\n      videoEntries: [],\r\n      tags: [],\r\n      pricing: {\r\n        free: false,\r\n        price: 10,\r\n      },\r\n      features: [],\r\n      languages: [\r\n        { name: gameLanguage.name, interface: true, fullAudio: true, subtitles: false },\r\n        { name: gameLanguage2.name, interface: true, fullAudio: false, subtitles: false },\r\n      ],\r\n      platformEntries: {\r\n        win: true,\r\n        mac: false,\r\n      },\r\n      link: 'Test Link',\r\n      about: 'Test About',\r\n      mature: false,\r\n      matureDescription: 'Test Mature Description',\r\n      systemRequirements: {\r\n        mini: {},\r\n        recommended: {},\r\n      },\r\n      legal: 'Test Legal',\r\n      featured: false,\r\n    });\r\n  });\r\n\r\n  afterEach(async () => {\r\n    await gamesLanguagesService.removeAll();\r\n    await gamesService.removeAll();\r\n  });\r\n\r\n  describe('getAll', () => {\r\n    it('should return an array of game languages', async () => {\r\n      const gameLanguages = await gamesLanguagesService.getAll('name', 'ASC');\r\n      expect(gameLanguages.length).toEqual(2);\r\n      expect(game.languages[0]).toEqual(expect.objectContaining({ name: 'Lang1' }));\r\n      expect(game.languages[1]).toEqual(expect.objectContaining({ name: 'Lang2' }));\r\n      expect(game2.languages[0]).toEqual(expect.objectContaining({ name: 'Lang1' }));\r\n      expect(game2.languages[1]).toEqual(expect.objectContaining({ name: 'Lang2' }));\r\n    });\r\n  });\r\n\r\n  describe('getById', () => {\r\n    it('should return the game languages with the given id', async () => {\r\n      const foundGameLanguage = await gamesLanguagesService.getById(gameLanguage.id);\r\n      expect(foundGameLanguage).toEqual(expect.objectContaining({ name: 'Lang1' }));\r\n      expect(gameLanguage);\r\n    });\r\n\r\n    it('should throw an error if the game language does not exist', async () => {\r\n      await expect(gamesLanguagesService.getById(0)).rejects.toThrow(NotFoundException);\r\n    });\r\n  });\r\n\r\n  describe('getByName', () => {\r\n    it('should return the game langauge with the given name', async () => {\r\n      const foundGameLanguage = await gamesLanguagesService.getByName('Lang1');\r\n      expect(foundGameLanguage).toEqual(expect.objectContaining({ name: 'Lang1' }));\r\n    });\r\n\r\n    it('should throw an error if the game language does not exist', async () => {\r\n      await expect(gamesLanguagesService.getByName('Lang6')).rejects.toThrow(NotFoundException);\r\n    });\r\n  });\r\n\r\n  describe('getLanguagesPaginated', () => {\r\n    it('should return an array of game tags sorted by name', async () => {\r\n      const gameLanguages = await gamesLanguagesService.getLanguagesPaginated(0, 10, 'name', 'ASC');\r\n      expect(gameLanguages.items.length).toEqual(2);\r\n      expect(gameLanguages.items[0].name).toEqual('Test1');\r\n      expect(gameLanguages.items[1].name).toEqual('Test2');\r\n    });\r\n\r\n    it('should return an array of game tags sorted by id', async () => {\r\n      const gameLanguages = await gamesLanguagesService.getLanguagesPaginated(0, 10, 'id', 'ASC');\r\n      expect(gameLanguages.items.length).toEqual(2);\r\n      expect(gameLanguages.items[0].id).toEqual(gameLanguage.id);\r\n      expect(gameLanguages.items[1].id).toEqual(gameLanguage2.id);\r\n    });\r\n\r\n    it('should return values with the given search', async () => {\r\n      const gameLanguages = await gamesLanguagesService.getLanguagesPaginated(0, 10, 'name', 'ASC', { name: 'Test2' });\r\n      expect(gameLanguages.items.length).toEqual(1);\r\n      expect(gameLanguages.items[0].name).toEqual('Test2');\r\n    });\r\n  });\r\n\r\n  describe('create', () => {\r\n    it('should create a new game language', async () => {\r\n      const createdGameLanguage = await gamesLanguagesService.create('Lang6');\r\n      expect(createdGameLanguage).toEqual(expect.objectContaining({ name: 'Lang6' }));\r\n    });\r\n\r\n    it('should throw an error if the game language name already exists', async () => {\r\n      await expect(gamesLanguagesService.create('Lang1')).rejects.toThrow(ConflictException);\r\n    });\r\n  });\r\n\r\n  describe('update', () => {\r\n    it('should update the game language with the given id', async () => {\r\n      const updatedGameLanguage = await gamesLanguagesService.update(gameLanguage2.id, 'Lang6');\r\n      expect(updatedGameLanguage).toEqual(expect.objectContaining({ name: 'Lang6' }));\r\n    });\r\n\r\n    it('should throw an error if the game language does not exist', async () => {\r\n      await expect(gamesLanguagesService.update(0, 'Lang6')).rejects.toThrow(NotFoundException);\r\n    });\r\n  });\r\n\r\n  describe('remove', () => {\r\n    it('should remove the game langauge with the given id', async () => {\r\n      const removedGameLanguage = await gamesLanguagesService.remove(gameLanguage.id);\r\n      const changedGame = await gamesService.getById(game.id);\r\n      expect(removedGameLanguage).toEqual(expect.objectContaining({ name: 'Lang1' }));\r\n      expect(changedGame.languages.length).toEqual(1);\r\n    });\r\n\r\n    it('should throw an error if the game langauges does not exist', async () => {\r\n      await expect(gamesLanguagesService.remove(0)).rejects.toThrow(NotFoundException);\r\n    });\r\n  });\r\n\r\n  describe('removeAll', () => {\r\n    it('should remove all game langauges', async () => {\r\n      await gamesLanguagesService.removeAll();\r\n      const gameLanguages = await gamesLanguagesService.getAll('name', 'ASC');\r\n      const changedGame = await gamesService.getById(game.id);\r\n      const changedGame2 = await gamesService.getById(game2.id);\r\n      expect(gameLanguages.length).toEqual(0);\r\n      expect(changedGame.languages.length).toEqual(0);\r\n      expect(changedGame2.languages.length).toEqual(0);\r\n    });\r\n  });\r\n});\r\n"],"names":["describe","gameLanguage","gameLanguage2","game","game2","gamesService","gamesLanguagesService","beforeEach","module","Test","createTestingModule","imports","ConfigModule","forRoot","environmentConfig","TypeOrmModule","forRootAsync","inject","ConfigService","name","useFactory","configService","getSqlTypeOrmConfig","GamesPricingModule","GamesModule","CompaniesModule","GamesLanguagesModule","GamesFeaturesModule","GamesTagsModule","providers","GamesPricingService","GamesService","CompaniesService","GamesLanguagesService","GamesFeaturesService","GamesTagsService","Logger","compile","get","create","category","description","releaseDate","Date","publishers","developers","thumbnailEntries","mainImage","backgroundImage","menuImg","horizontalHeaderImage","verticalHeaderImage","smallHeaderImage","searchImage","tabImage","imageEntries","videoEntries","tags","pricing","free","price","features","languages","interface","fullAudio","subtitles","platformEntries","win","mac","link","about","mature","matureDescription","systemRequirements","mini","recommended","legal","featured","afterEach","removeAll","it","gameLanguages","getAll","expect","length","toEqual","objectContaining","foundGameLanguage","getById","id","rejects","toThrow","NotFoundException","getByName","getLanguagesPaginated","items","createdGameLanguage","ConflictException","updatedGameLanguage","update","removedGameLanguage","remove","changedGame","changedGame2"],"mappings":"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"}