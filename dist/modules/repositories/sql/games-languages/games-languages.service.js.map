{"version":3,"sources":["../../../../../src/modules/repositories/sql/games-languages/games-languages.service.ts"],"sourcesContent":["// NestJS\r\nimport { ConflictException, Injectable, InternalServerErrorException, Logger, NotFoundException } from '@nestjs/common';\r\n\r\n// TypeORM\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { FindOptionsWhere, ILike, In, Repository } from 'typeorm';\r\n\r\n// Entities\r\nimport { GameLanguage } from '@repositories/sql/games-languages/game-language.entity';\r\nimport { Game } from '@repositories/sql/games/game.entity';\r\n\r\n// Types\r\nimport { GameLanguage as GameLanguageType } from '@repositories/sql/games-languages/game-language.entity';\r\n\r\n@Injectable()\r\nexport class GamesLanguagesService {\r\n  constructor(\r\n    private readonly logger: Logger,\r\n    @InjectRepository(GameLanguage, 'sql')\r\n    private readonly gamesLanguageRepository: Repository<GameLanguage>,\r\n    @InjectRepository(Game, 'sql')\r\n    private readonly gamesRepository: Repository<Game>,\r\n  ) {}\r\n\r\n  /**\r\n   * Get all languages\r\n   * @param sortBy Sort by\r\n   * @param sortOrder Sort order\r\n   * @returns Promise that resolves to an array of languages\r\n   */\r\n  public async getAll(sortBy: 'id' | 'name', sortOrder: 'ASC' | 'DESC'): Promise<GameLanguageType[]> {\r\n    this.logger.log(`Retrieving all languages with sort order ${sortOrder} and sort by ${sortBy}`);\r\n\r\n    // Get all languages\r\n    const languages = await this.gamesLanguageRepository.find({\r\n      order: { [sortBy]: sortOrder },\r\n    });\r\n\r\n    // Return languages\r\n    return languages;\r\n  }\r\n\r\n  /**\r\n   * Get language by ID\r\n   * @param id Language ID\r\n   * @returns Promise that resolves to a language\r\n   * @throws `NotFoundException` If language not found\r\n   */\r\n  public async getById(id: number): Promise<GameLanguageType> {\r\n    this.logger.log(`Retrieving language with ID ${id}`);\r\n\r\n    // Get language by ID\r\n    const language = await this.gamesLanguageRepository.findOne({ where: { id } });\r\n\r\n    // Throw an exception if the language is not found\r\n    if (!language) throw new NotFoundException(`Language with ID ${id} not found`);\r\n\r\n    // Return the language\r\n    return language;\r\n  }\r\n\r\n  /**\r\n   * Get languages by IDs\r\n   * @param ids Language IDs\r\n   * @returns Promise that resolves to an array of languages\r\n   * @throws `NotFoundException` If language not found\r\n   */\r\n  public async getByIds(ids: number[]): Promise<GameLanguageType[]> {\r\n    this.logger.log(`Retrieving languages with IDs ${ids}`);\r\n\r\n    // Get languages by IDs\r\n    const languages = await this.gamesLanguageRepository.find({ where: { id: In(ids) } });\r\n\r\n    // Throw an exception if any of the languages are not found\r\n    if (languages.length < ids.length) {\r\n      const missingIds = ids.filter((id) => !languages.some((language) => language.id === id));\r\n      throw new NotFoundException(`Languages with IDs ${missingIds} not found`);\r\n    }\r\n\r\n    // Return the languages\r\n    return languages;\r\n  }\r\n\r\n  /**\r\n   * Get language by name\r\n   * @param name Language name\r\n   * @returns Promise that resolves to a language\r\n   * @throws `NotFoundException` If language not found\r\n   */\r\n  public async getByName(name: string): Promise<GameLanguageType> {\r\n    this.logger.log(`Retrieving language with name ${name}`);\r\n\r\n    // Get language by name\r\n    const language = await this.gamesLanguageRepository.findOne({ where: { name } });\r\n\r\n    // Throw an exception if the language is not found\r\n    if (!language) throw new NotFoundException(`Language with name ${name} not found`);\r\n\r\n    // Return the language\r\n    return language;\r\n  }\r\n\r\n  /**\r\n   * Get languages by names\r\n   * @param names Language names\r\n   * @returns Promise that resolves to an array of languages\r\n   * @throws `NotFoundException` If language not found\r\n   */\r\n  public async getByNameList(names: string[]): Promise<GameLanguageType[]> {\r\n    this.logger.log(`Retrieving languages with names ${names}`);\r\n\r\n    // Get languages by names\r\n    const languages = await this.gamesLanguageRepository.find({\r\n      where: { name: In(names) },\r\n    });\r\n\r\n    // Throw an exception if any of the languages are not found\r\n    if (languages.length < names.length) {\r\n      const missingNames = names.filter((name) => !languages.some((language) => language.name === name));\r\n      throw new NotFoundException(`Languages with names ${missingNames} not found`);\r\n    }\r\n\r\n    // Return the languages\r\n    return languages;\r\n  }\r\n\r\n  /**\r\n   * Gets paginated languages.\r\n   * @param page - The current page number.\r\n   * @param limit - The number of items per page.\r\n   * @param orderBy - The field to order by.\r\n   * @param order - The order direction.\r\n   * @param searchQuery - The search query.\r\n   * @returns A promise that resolves to the paginated languages.\r\n   */\r\n  public async getLanguagesPaginated(\r\n    page: number,\r\n    limit: number,\r\n    orderBy: 'id' | 'name',\r\n    order: 'ASC' | 'DESC',\r\n    searchQuery?: { name?: string },\r\n  ): Promise<{ items: GameLanguageType[]; total: number; totalPages: number }> {\r\n    this.logger.log(`Getting languages paginated: page ${page}, limit ${limit}, order by ${orderBy} ${order}`);\r\n\r\n    // Construct the where clause\r\n    const where: FindOptionsWhere<GameLanguageType> = {};\r\n    if (searchQuery?.name) {\r\n      where.name = ILike(`%${searchQuery.name}%`);\r\n    }\r\n\r\n    // Get the paginated results\r\n    const [items, total] = await this.gamesLanguageRepository.findAndCount({\r\n      where,\r\n      order: { [orderBy]: order },\r\n      skip: Math.max((page - 1) * limit, 0),\r\n      take: limit,\r\n    });\r\n\r\n    // Calculate the total number of pages\r\n    const totalPages = Math.ceil(total / limit);\r\n\r\n    // Return the paginated results\r\n    return { items, total, totalPages };\r\n  }\r\n\r\n  /**\r\n   * Create language\r\n   * @param name Language name\r\n   * @returns Promise that resolves when the creation is successful\r\n   * @throws `ConflictException` If language already exists\r\n   */\r\n  public async create(name: string): Promise<GameLanguageType> {\r\n    this.logger.log(`Creating language with name ${name}`);\r\n\r\n    // Check if language already exists\r\n    const existingLanguage = await this.gamesLanguageRepository.findOne({ where: { name: name } });\r\n    if (existingLanguage) throw new ConflictException('Language already exists');\r\n\r\n    // Create new game language entity\r\n    const createdLanguage = this.gamesLanguageRepository.create({\r\n      name,\r\n    });\r\n\r\n    // Save the language entity\r\n    const result = await this.gamesLanguageRepository.save(createdLanguage);\r\n\r\n    // Check if the creation was successful\r\n    if (!result) throw new InternalServerErrorException('Failed to create language');\r\n\r\n    // Return the created language\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Update language\r\n   * @param id Language ID\r\n   * @param name Language name\r\n   * @returns Promise that resolves when the update is successful\r\n   * @throws `NotFoundException` If language not found\r\n   */\r\n  public async update(id: number, name: string): Promise<GameLanguageType> {\r\n    this.logger.log(`Updating language with ID ${id}`);\r\n\r\n    // Check if language exists\r\n    const existingLangauge = await this.gamesLanguageRepository.findOne({ where: { id } });\r\n    if (!existingLangauge) throw new NotFoundException(`Language with ID ${id} not found`);\r\n\r\n    // Update fields\r\n    existingLangauge.name = name;\r\n\r\n    // Save changes\r\n    const result = this.gamesLanguageRepository.save(existingLangauge);\r\n\r\n    // Check if the update was successful\r\n    if (!result) throw new InternalServerErrorException(`Failed to update language with ID ${id}`);\r\n\r\n    // Return the updated language\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Delete language\r\n   * @param id Language ID\r\n   * @returns Promise that resolves to the deleted language\r\n   * @throws `NotFoundException` If language not found\r\n   * @throws `InternalServerErrorException` If failed to delete\r\n   */\r\n  public async remove(id: number): Promise<GameLanguageType> {\r\n    this.logger.log(`Deleting language with ID ${id}`);\r\n\r\n    // Check if language exists\r\n    const existingLanguage = await this.gamesLanguageRepository.findOne({ where: { id } });\r\n    if (!existingLanguage) throw new NotFoundException(`Language with ID ${id} not found`);\r\n\r\n    // Retrieve games with the specific language support\r\n    const games = await this.gamesRepository.find({\r\n      where: {\r\n        languageSupport: { name: existingLanguage.name },\r\n      },\r\n      relations: { languages: true },\r\n    });\r\n\r\n    // Update the languageSupport field for each game\r\n    for (const game of games) {\r\n      game.languages = game.languages.filter((language) => language.name !== existingLanguage.name);\r\n      game.languageSupport = game.languageSupport.filter((language) => language.name !== existingLanguage.name);\r\n    }\r\n    await this.gamesRepository.save(games);\r\n\r\n    // Remove the language from the gamesLanguageRepository\r\n    const result = await this.gamesLanguageRepository.remove(existingLanguage);\r\n\r\n    // Check if the deletion was successful\r\n    if (!result) throw new InternalServerErrorException(`Failed to delete language with ID ${id}`);\r\n\r\n    // Return the deleted language\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Delete all languages\r\n   * @returns Promise that resolves when the deletion is successful\r\n   * @throws `InternalServerErrorException` If failed to delete\r\n   */\r\n  public async removeAll(): Promise<void> {\r\n    this.logger.log('Deleting all languages');\r\n\r\n    // Step 1: Remove all languages from all games\r\n    const games = await this.gamesRepository.find({ relations: { languages: true } });\r\n    for (const game of games) {\r\n      game.languages = [];\r\n      game.languageSupport = [];\r\n    }\r\n    await this.gamesRepository.save(games);\r\n\r\n    // Step 2: Delete all entries in the gamesLanguage table\r\n    await this.gamesLanguageRepository.delete({});\r\n\r\n    // Log the successful completion\r\n    this.logger.log('All languages deleted successfully');\r\n  }\r\n}\r\n"],"names":["GamesLanguagesService","constructor","logger","gamesLanguageRepository","gamesRepository","getAll","sortBy","sortOrder","log","languages","find","order","getById","id","language","findOne","where","NotFoundException","getByIds","ids","In","length","missingIds","filter","some","getByName","name","getByNameList","names","missingNames","getLanguagesPaginated","page","limit","orderBy","searchQuery","ILike","items","total","findAndCount","skip","Math","max","take","totalPages","ceil","create","existingLanguage","ConflictException","createdLanguage","result","save","InternalServerErrorException","update","existingLangauge","remove","games","languageSupport","relations","game","removeAll","delete"],"mappings":"AAAA,SAAS;;;;;+BAeIA;;;eAAAA;;;wBAd0F;yBAGtE;0BACuB;oCAG3B;4BACR;;;;;;;;;;;;;;;AAMd,IAAA,AAAMA,wBAAN,MAAMA;IACXC,YACE,AAAiBC,MAAc,EAC/B,AACiBC,uBAAiD,EAClE,AACiBC,eAAiC,CAClD;aALiBF,SAAAA;aAEAC,0BAAAA;aAEAC,kBAAAA;IAChB;IAEH;;;;;GAKC,GACD,MAAaC,OAAOC,MAAqB,EAAEC,SAAyB,EAA+B;QACjG,IAAI,CAACL,MAAM,CAACM,GAAG,CAAC,CAAC,yCAAyC,EAAED,UAAU,aAAa,EAAED,QAAQ;QAE7F,oBAAoB;QACpB,MAAMG,YAAY,MAAM,IAAI,CAACN,uBAAuB,CAACO,IAAI,CAAC;YACxDC,OAAO;gBAAE,CAACL,OAAO,EAAEC;YAAU;QAC/B;QAEA,mBAAmB;QACnB,OAAOE;IACT;IAEA;;;;;GAKC,GACD,MAAaG,QAAQC,EAAU,EAA6B;QAC1D,IAAI,CAACX,MAAM,CAACM,GAAG,CAAC,CAAC,4BAA4B,EAAEK,IAAI;QAEnD,qBAAqB;QACrB,MAAMC,WAAW,MAAM,IAAI,CAACX,uBAAuB,CAACY,OAAO,CAAC;YAAEC,OAAO;gBAAEH;YAAG;QAAE;QAE5E,kDAAkD;QAClD,IAAI,CAACC,UAAU,MAAM,IAAIG,yBAAiB,CAAC,CAAC,iBAAiB,EAAEJ,GAAG,UAAU,CAAC;QAE7E,sBAAsB;QACtB,OAAOC;IACT;IAEA;;;;;GAKC,GACD,MAAaI,SAASC,GAAa,EAA+B;QAChE,IAAI,CAACjB,MAAM,CAACM,GAAG,CAAC,CAAC,8BAA8B,EAAEW,KAAK;QAEtD,uBAAuB;QACvB,MAAMV,YAAY,MAAM,IAAI,CAACN,uBAAuB,CAACO,IAAI,CAAC;YAAEM,OAAO;gBAAEH,IAAIO,IAAAA,YAAE,EAACD;YAAK;QAAE;QAEnF,2DAA2D;QAC3D,IAAIV,UAAUY,MAAM,GAAGF,IAAIE,MAAM,EAAE;YACjC,MAAMC,aAAaH,IAAII,MAAM,CAAC,CAACV,KAAO,CAACJ,UAAUe,IAAI,CAAC,CAACV,WAAaA,SAASD,EAAE,KAAKA;YACpF,MAAM,IAAII,yBAAiB,CAAC,CAAC,mBAAmB,EAAEK,WAAW,UAAU,CAAC;QAC1E;QAEA,uBAAuB;QACvB,OAAOb;IACT;IAEA;;;;;GAKC,GACD,MAAagB,UAAUC,IAAY,EAA6B;QAC9D,IAAI,CAACxB,MAAM,CAACM,GAAG,CAAC,CAAC,8BAA8B,EAAEkB,MAAM;QAEvD,uBAAuB;QACvB,MAAMZ,WAAW,MAAM,IAAI,CAACX,uBAAuB,CAACY,OAAO,CAAC;YAAEC,OAAO;gBAAEU;YAAK;QAAE;QAE9E,kDAAkD;QAClD,IAAI,CAACZ,UAAU,MAAM,IAAIG,yBAAiB,CAAC,CAAC,mBAAmB,EAAES,KAAK,UAAU,CAAC;QAEjF,sBAAsB;QACtB,OAAOZ;IACT;IAEA;;;;;GAKC,GACD,MAAaa,cAAcC,KAAe,EAA+B;QACvE,IAAI,CAAC1B,MAAM,CAACM,GAAG,CAAC,CAAC,gCAAgC,EAAEoB,OAAO;QAE1D,yBAAyB;QACzB,MAAMnB,YAAY,MAAM,IAAI,CAACN,uBAAuB,CAACO,IAAI,CAAC;YACxDM,OAAO;gBAAEU,MAAMN,IAAAA,YAAE,EAACQ;YAAO;QAC3B;QAEA,2DAA2D;QAC3D,IAAInB,UAAUY,MAAM,GAAGO,MAAMP,MAAM,EAAE;YACnC,MAAMQ,eAAeD,MAAML,MAAM,CAAC,CAACG,OAAS,CAACjB,UAAUe,IAAI,CAAC,CAACV,WAAaA,SAASY,IAAI,KAAKA;YAC5F,MAAM,IAAIT,yBAAiB,CAAC,CAAC,qBAAqB,EAAEY,aAAa,UAAU,CAAC;QAC9E;QAEA,uBAAuB;QACvB,OAAOpB;IACT;IAEA;;;;;;;;GAQC,GACD,MAAaqB,sBACXC,IAAY,EACZC,KAAa,EACbC,OAAsB,EACtBtB,KAAqB,EACrBuB,WAA+B,EAC4C;QAC3E,IAAI,CAAChC,MAAM,CAACM,GAAG,CAAC,CAAC,kCAAkC,EAAEuB,KAAK,QAAQ,EAAEC,MAAM,WAAW,EAAEC,QAAQ,CAAC,EAAEtB,OAAO;QAEzG,6BAA6B;QAC7B,MAAMK,QAA4C,CAAC;QACnD,IAAIkB,aAAaR,MAAM;YACrBV,MAAMU,IAAI,GAAGS,IAAAA,eAAK,EAAC,CAAC,CAAC,EAAED,YAAYR,IAAI,CAAC,CAAC,CAAC;QAC5C;QAEA,4BAA4B;QAC5B,MAAM,CAACU,OAAOC,MAAM,GAAG,MAAM,IAAI,CAAClC,uBAAuB,CAACmC,YAAY,CAAC;YACrEtB;YACAL,OAAO;gBAAE,CAACsB,QAAQ,EAAEtB;YAAM;YAC1B4B,MAAMC,KAAKC,GAAG,CAAC,AAACV,CAAAA,OAAO,CAAA,IAAKC,OAAO;YACnCU,MAAMV;QACR;QAEA,sCAAsC;QACtC,MAAMW,aAAaH,KAAKI,IAAI,CAACP,QAAQL;QAErC,+BAA+B;QAC/B,OAAO;YAAEI;YAAOC;YAAOM;QAAW;IACpC;IAEA;;;;;GAKC,GACD,MAAaE,OAAOnB,IAAY,EAA6B;QAC3D,IAAI,CAACxB,MAAM,CAACM,GAAG,CAAC,CAAC,4BAA4B,EAAEkB,MAAM;QAErD,mCAAmC;QACnC,MAAMoB,mBAAmB,MAAM,IAAI,CAAC3C,uBAAuB,CAACY,OAAO,CAAC;YAAEC,OAAO;gBAAEU,MAAMA;YAAK;QAAE;QAC5F,IAAIoB,kBAAkB,MAAM,IAAIC,yBAAiB,CAAC;QAElD,kCAAkC;QAClC,MAAMC,kBAAkB,IAAI,CAAC7C,uBAAuB,CAAC0C,MAAM,CAAC;YAC1DnB;QACF;QAEA,2BAA2B;QAC3B,MAAMuB,SAAS,MAAM,IAAI,CAAC9C,uBAAuB,CAAC+C,IAAI,CAACF;QAEvD,uCAAuC;QACvC,IAAI,CAACC,QAAQ,MAAM,IAAIE,oCAA4B,CAAC;QAEpD,8BAA8B;QAC9B,OAAOF;IACT;IAEA;;;;;;GAMC,GACD,MAAaG,OAAOvC,EAAU,EAAEa,IAAY,EAA6B;QACvE,IAAI,CAACxB,MAAM,CAACM,GAAG,CAAC,CAAC,0BAA0B,EAAEK,IAAI;QAEjD,2BAA2B;QAC3B,MAAMwC,mBAAmB,MAAM,IAAI,CAAClD,uBAAuB,CAACY,OAAO,CAAC;YAAEC,OAAO;gBAAEH;YAAG;QAAE;QACpF,IAAI,CAACwC,kBAAkB,MAAM,IAAIpC,yBAAiB,CAAC,CAAC,iBAAiB,EAAEJ,GAAG,UAAU,CAAC;QAErF,gBAAgB;QAChBwC,iBAAiB3B,IAAI,GAAGA;QAExB,eAAe;QACf,MAAMuB,SAAS,IAAI,CAAC9C,uBAAuB,CAAC+C,IAAI,CAACG;QAEjD,qCAAqC;QACrC,IAAI,CAACJ,QAAQ,MAAM,IAAIE,oCAA4B,CAAC,CAAC,kCAAkC,EAAEtC,IAAI;QAE7F,8BAA8B;QAC9B,OAAOoC;IACT;IAEA;;;;;;GAMC,GACD,MAAaK,OAAOzC,EAAU,EAA6B;QACzD,IAAI,CAACX,MAAM,CAACM,GAAG,CAAC,CAAC,0BAA0B,EAAEK,IAAI;QAEjD,2BAA2B;QAC3B,MAAMiC,mBAAmB,MAAM,IAAI,CAAC3C,uBAAuB,CAACY,OAAO,CAAC;YAAEC,OAAO;gBAAEH;YAAG;QAAE;QACpF,IAAI,CAACiC,kBAAkB,MAAM,IAAI7B,yBAAiB,CAAC,CAAC,iBAAiB,EAAEJ,GAAG,UAAU,CAAC;QAErF,oDAAoD;QACpD,MAAM0C,QAAQ,MAAM,IAAI,CAACnD,eAAe,CAACM,IAAI,CAAC;YAC5CM,OAAO;gBACLwC,iBAAiB;oBAAE9B,MAAMoB,iBAAiBpB,IAAI;gBAAC;YACjD;YACA+B,WAAW;gBAAEhD,WAAW;YAAK;QAC/B;QAEA,iDAAiD;QACjD,KAAK,MAAMiD,QAAQH,MAAO;YACxBG,KAAKjD,SAAS,GAAGiD,KAAKjD,SAAS,CAACc,MAAM,CAAC,CAACT,WAAaA,SAASY,IAAI,KAAKoB,iBAAiBpB,IAAI;YAC5FgC,KAAKF,eAAe,GAAGE,KAAKF,eAAe,CAACjC,MAAM,CAAC,CAACT,WAAaA,SAASY,IAAI,KAAKoB,iBAAiBpB,IAAI;QAC1G;QACA,MAAM,IAAI,CAACtB,eAAe,CAAC8C,IAAI,CAACK;QAEhC,uDAAuD;QACvD,MAAMN,SAAS,MAAM,IAAI,CAAC9C,uBAAuB,CAACmD,MAAM,CAACR;QAEzD,uCAAuC;QACvC,IAAI,CAACG,QAAQ,MAAM,IAAIE,oCAA4B,CAAC,CAAC,kCAAkC,EAAEtC,IAAI;QAE7F,8BAA8B;QAC9B,OAAOoC;IACT;IAEA;;;;GAIC,GACD,MAAaU,YAA2B;QACtC,IAAI,CAACzD,MAAM,CAACM,GAAG,CAAC;QAEhB,8CAA8C;QAC9C,MAAM+C,QAAQ,MAAM,IAAI,CAACnD,eAAe,CAACM,IAAI,CAAC;YAAE+C,WAAW;gBAAEhD,WAAW;YAAK;QAAE;QAC/E,KAAK,MAAMiD,QAAQH,MAAO;YACxBG,KAAKjD,SAAS,GAAG,EAAE;YACnBiD,KAAKF,eAAe,GAAG,EAAE;QAC3B;QACA,MAAM,IAAI,CAACpD,eAAe,CAAC8C,IAAI,CAACK;QAEhC,wDAAwD;QACxD,MAAM,IAAI,CAACpD,uBAAuB,CAACyD,MAAM,CAAC,CAAC;QAE3C,gCAAgC;QAChC,IAAI,CAAC1D,MAAM,CAACM,GAAG,CAAC;IAClB;AACF"}