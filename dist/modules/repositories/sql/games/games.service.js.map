{"version":3,"sources":["../../../../../src/modules/repositories/sql/games/games.service.ts"],"sourcesContent":["// NestJS\r\nimport { ConflictException, Injectable, InternalServerErrorException, Logger, NotFoundException } from '@nestjs/common';\r\n\r\n// TypeORM\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { FindOptionsRelations, ILike, In, LessThanOrEqual, MoreThanOrEqual, Repository } from 'typeorm';\r\n\r\n// Services\r\nimport { CompaniesService } from '@repositories/sql/companies/companies.service';\r\nimport { GamesFeaturesService } from '@repositories/sql/games-features/games-features.service';\r\nimport { GamesLanguagesService } from '@repositories/sql/games-languages/games-languages.service';\r\nimport { GamesPricingService } from '@repositories/sql/games-pricing/games-pricing.service';\r\nimport { GamesTagsService } from '@repositories/sql/games-tags/games-tags.service';\r\n\r\n// Entities\r\nimport { GamePricing } from '@repositories/sql/games-pricing/game-pricing.entity';\r\nimport { Game } from '@repositories/sql/games/game.entity';\r\n\r\n// Types\r\nimport type {\r\n  Game as GameType,\r\n  ImageEntry,\r\n  PlatformEntry,\r\n  SystemRequirementEntry,\r\n  ThumbnailsEntry,\r\n  VideoEntry,\r\n} from '@repositories/sql/games/game.entity';\r\nimport type { FindOptionsOrder, FindOptionsWhere } from 'typeorm';\r\nimport type { GameLanguage as GameLanguageType } from '../games-languages/game-language.entity';\r\n\r\n@Injectable()\r\nexport class GamesService {\r\n  private readonly relations: FindOptionsRelations<GameType> = {};\r\n\r\n  constructor(\r\n    private readonly logger: Logger,\r\n    @InjectRepository(Game, 'sql')\r\n    private readonly gameRepository: Repository<Game>,\r\n    private readonly companiesService: CompaniesService,\r\n    private readonly featuresService: GamesFeaturesService,\r\n    private readonly languagesService: GamesLanguagesService,\r\n    private readonly gamesPricingService: GamesPricingService,\r\n    private readonly gamesTagsService: GamesTagsService,\r\n  ) {\r\n    this.relations = {\r\n      tags: true,\r\n      pricing: true,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Retrieves all games.\r\n   * @param {string} orderBy - The property to order by.\r\n   * @param {string} order - The order to use.\r\n   * @return {Promise<GameType[]>} A Promise that resolves to an array of game entities.\r\n   */\r\n  public async getAll(orderBy: 'id' | 'name' | 'releaseDate', order: 'ASC' | 'DESC'): Promise<GameType[]> {\r\n    this.logger.log(`Retrieving all games from the database`);\r\n\r\n    // Retrieve all games\r\n    const games = await this.gameRepository.find({ order: { [orderBy]: order } });\r\n\r\n    // Return the games\r\n    return games;\r\n  }\r\n\r\n  /**\r\n   * Retrieves a game by its ID.\r\n   * @param {number} id - The ID of the game to retrieve.\r\n   * @return {Promise<GameType>} A Promise that resolves to the game entity.\r\n   * @throws `NotFoundException` Throws a NotFoundException if the game with the specified ID is not found.\r\n   */\r\n  public async getById(id: number): Promise<GameType> {\r\n    this.logger.log(`Retrieving game with ID ${id} from the database`);\r\n\r\n    // Retrieve the game by ID\r\n    const game = await this.gameRepository.findOne({\r\n      where: { id },\r\n      relations: {\r\n        developers: true,\r\n        publishers: true,\r\n        tags: true,\r\n        pricing: true,\r\n        features: true,\r\n        languages: true,\r\n      },\r\n    });\r\n\r\n    // Throw a NotFoundException if the game is not found\r\n    if (!game) throw new NotFoundException(`Game with ID ${id} not found`);\r\n\r\n    // Return the game\r\n    return game;\r\n  }\r\n\r\n  /**\r\n   * Retrieves games by their IDs.\r\n   * @param {number[]} ids - The IDs of the games to retrieve.\r\n   * @return {Promise<GameType[]>} A Promise that resolves to an array of game entities.\r\n   * @throws `NotFoundException` Throws a NotFoundException if the game with the specified ID is not found.\r\n   */\r\n  public async getByIds(ids: number[]): Promise<GameType[]> {\r\n    this.logger.log(`Retrieving games with IDs ${ids.length > 0 ? ids : 'none'} from the database`);\r\n\r\n    // Retrieve the games by IDs\r\n    const games = await this.gameRepository.find({ where: { id: In(ids) }, relations: this.relations });\r\n\r\n    // Throw a NotFoundException if any of the games are not found\r\n    if (games.length !== ids.length) {\r\n      const missingIds = ids.filter((id) => !games.some((game) => game.id === id));\r\n      throw new NotFoundException(`Games with IDs ${missingIds} not found`);\r\n    }\r\n\r\n    // Return the games\r\n    return games;\r\n  }\r\n\r\n  /**\r\n   * Retrieves games by their name.\r\n   * @param {string} name - The name of the games to retrieve.\r\n   * @return {Promise<GameType[]>} A Promise that resolves to an array of game entities.\r\n   */\r\n  public async getByName(name: string): Promise<GameType> {\r\n    this.logger.log(`Retrieving game with name ${name} from the database`);\r\n\r\n    // Retrieve the game by name\r\n    const games = await this.gameRepository.findOne({ where: { name }, relations: this.relations });\r\n\r\n    // Throw a NotFoundException if the game is not found\r\n    if (!games) throw new NotFoundException(`Game with name ${name} not found`);\r\n\r\n    // Return the game\r\n    return games;\r\n  }\r\n\r\n  /**\r\n   * Gets paginated games.\r\n   * @param page - The current page number.\r\n   * @param limit - The number of items per page.\r\n   * @param orderBy - The field to order by.\r\n   * @param order - The order direction.\r\n   * @param searchQuery - The search query.\r\n   * @returns A promise that resolves to the paginated games.\r\n   */\r\n  public async getGamesPaginated(\r\n    page: number,\r\n    limit: number,\r\n    orderBy:\r\n      | 'id'\r\n      | 'name'\r\n      | 'discountPrice'\r\n      | 'basePrice'\r\n      | 'discountPercentage'\r\n      | 'offerType'\r\n      | 'discountStartDate'\r\n      | 'discountEndDate',\r\n    order: 'ASC' | 'DESC',\r\n    discount: boolean,\r\n    searchQuery?: { name?: string },\r\n    admin?: boolean,\r\n  ): Promise<{ items: Game[]; total: number; totalPages: number }> {\r\n    this.logger.log(`Getting games paginated: page ${page}, limit ${limit}, order by ${orderBy} ${order}`);\r\n\r\n    // Create a where clause based on the search query\r\n    const where: FindOptionsWhere<Game> = {};\r\n    if (discount) {\r\n      if (admin) {\r\n        where.pricing = { discount: true, discountEndDate: MoreThanOrEqual(new Date()) };\r\n      } else {\r\n        where.pricing = {\r\n          discount: true,\r\n          discountEndDate: MoreThanOrEqual(new Date()),\r\n          discountStartDate: LessThanOrEqual(new Date()),\r\n        };\r\n      }\r\n    }\r\n    if (searchQuery?.name) where.name = ILike(`%${searchQuery.name}%`);\r\n\r\n    const orderOptions: FindOptionsOrder<Game> = {};\r\n    if (orderBy === 'id') orderOptions.id = order;\r\n    if (orderBy === 'name') orderOptions.name = order;\r\n    if (orderBy === 'discountPrice') orderOptions.pricing = { discountPrice: order };\r\n    if (orderBy === 'basePrice') orderOptions.pricing = { basePrice: order };\r\n    if (orderBy === 'discountPercentage') orderOptions.pricing = { discountPercentage: order };\r\n    if (orderBy === 'offerType') orderOptions.pricing = { offerType: order };\r\n    if (orderBy === 'discountStartDate') orderOptions.pricing = { discountStartDate: order };\r\n    if (orderBy === 'discountEndDate') orderOptions.pricing = { discountEndDate: order };\r\n\r\n    // Set skipCheckDiscount to true for admin\r\n    if (admin) GamePricing.skipDiscountCheck = true;\r\n\r\n    // Get the paginated games\r\n    const [items, total] = await this.gameRepository.findAndCount({\r\n      where,\r\n      order: orderOptions,\r\n      relations: { pricing: true },\r\n      skip: Math.max((page - 1) * limit, 0),\r\n      take: limit,\r\n    });\r\n\r\n    // Reset after fetching to avoid affecting other queries\r\n    if (admin) GamePricing.skipDiscountCheck = false;\r\n\r\n    // Calculate the total number of pages\r\n    const totalPages = Math.ceil(total / limit);\r\n\r\n    // Return the paginated games and total number of pages\r\n    return { items, total, totalPages };\r\n  }\r\n\r\n  /**\r\n   * Creates a new game.\r\n   * @param {Game} game - The game entity to be created.\r\n   * @return {Promise<GameType>} A Promise that resolves to the created game entity.\r\n   * @throws `ConflictException` Throws a ConflictException if the game already exists.\r\n   * @throws `InternalServerErrorException` Throws an InternalServerErrorException if the creation fails.\r\n   */\r\n  public async create(game: {\r\n    name: string;\r\n    category: string;\r\n    description: string;\r\n    releaseDate: Date;\r\n    featured: boolean;\r\n    publishers: number[];\r\n    developers: number[];\r\n    thumbnailEntries: ThumbnailsEntry;\r\n    imageEntries: ImageEntry[];\r\n    videoEntries: VideoEntry[];\r\n    tags: number[];\r\n    pricing: {\r\n      free: boolean;\r\n      price?: string;\r\n    };\r\n    features: number[];\r\n    languages: {\r\n      name: string;\r\n      interface: boolean;\r\n      fullAudio: boolean;\r\n      subtitles: boolean;\r\n    }[];\r\n    platformEntries: PlatformEntry;\r\n    link: string;\r\n    about: string;\r\n    mature: boolean;\r\n    matureDescription: string;\r\n    systemRequirements: SystemRequirementEntry;\r\n    legal: string;\r\n  }): Promise<GameType> {\r\n    this.logger.log(`Creating game with name ${game.name} in the database`);\r\n\r\n    // Check if game already exists\r\n    const existingGame = await this.gameRepository.findOne({ where: { name: game.name } });\r\n    if (existingGame) throw new ConflictException(`Game with name ${game.name} already exists`);\r\n\r\n    // Get publishers and developers\r\n    const publishers = await this.companiesService.getByIds(game.publishers, 'publisher');\r\n    const developers = await this.companiesService.getByIds(game.developers, 'developer');\r\n\r\n    // Get game features\r\n    const features = await this.featuresService.getByIds(game.features);\r\n\r\n    // Get game languages\r\n    const gameLanguages = await this.languagesService.getByNameList(game.languages.map((language) => language.name));\r\n\r\n    // Create new game tags\r\n    const tags = await this.gamesTagsService.getByIds(game.tags);\r\n\r\n    // Create new game entity\r\n    const newGame = new Game();\r\n    newGame.name = game.name;\r\n    newGame.storageName = game.name;\r\n    newGame.category = game.category;\r\n    newGame.description = game.description;\r\n    newGame.releaseDate = game.releaseDate;\r\n    newGame.featured = game.featured;\r\n    newGame.publishers = publishers;\r\n    newGame.developers = developers;\r\n    newGame.thumbnailEntries = game.thumbnailEntries;\r\n    newGame.imageEntries = game.imageEntries;\r\n    newGame.videoEntries = game.videoEntries;\r\n    newGame.tags = tags;\r\n    newGame.features = features;\r\n    newGame.languages = gameLanguages;\r\n    newGame.languageSupport = game.languages;\r\n    newGame.platformEntries = game.platformEntries;\r\n    newGame.link = game.link;\r\n    newGame.about = game.about;\r\n    newGame.mature = game.mature;\r\n    newGame.matureDescription = game.matureDescription;\r\n    newGame.systemRequirements = game.systemRequirements;\r\n    newGame.legal = game.legal;\r\n\r\n    // Create new game pricing and link it to the saved game\r\n    const pricing = new GamePricing();\r\n    pricing.free = game.pricing.free;\r\n    pricing.basePrice = game.pricing.price ?? '0.00';\r\n\r\n    // Link the pricing to the game\r\n    newGame.pricing = pricing;\r\n    pricing.game = newGame;\r\n\r\n    // Save the new game\r\n    const result = await this.gameRepository.save(newGame);\r\n    if (!result) throw new InternalServerErrorException('Failed to create game');\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Updates a game by its ID.\r\n   * @param {number} id - The ID of the game to be updated.\r\n   * @param {Game} game - The updated game entity.\r\n   * @return {Promise<GameType>} A Promise that resolves to the updated game entity.\r\n   * @throws `NotFoundException` Throws a NotFoundException if the game with the specified ID is not found.\r\n   * @throws `InternalServerErrorException` Throws an InternalServerErrorException if the update fails.\r\n   */\r\n  public async update(\r\n    id: number,\r\n    game: {\r\n      name?: string;\r\n      category?: string;\r\n      description?: string;\r\n      releaseDate?: Date;\r\n      publishers?: number[];\r\n      developers?: number[];\r\n      changedThumbnails?: ThumbnailsEntry;\r\n      deletedScreenshots?: number[];\r\n      deletedVideos?: number[];\r\n      renamedScreenshots?: { oldOrder: number; newOrder: number; link: string }[];\r\n      renamedVideos?: { oldOrder: number; newOrder: number; videoLink: string; posterLink: string }[];\r\n      addedScreenshots?: ImageEntry[];\r\n      addedVideos?: VideoEntry[];\r\n      featuredOrders?: number[];\r\n      tags?: number[];\r\n      pricing?: {\r\n        free?: boolean;\r\n        price?: string;\r\n      };\r\n      features?: number[];\r\n      languages: {\r\n        name: string;\r\n        interface: boolean;\r\n        fullAudio: boolean;\r\n        subtitles: boolean;\r\n      }[];\r\n      featured?: boolean;\r\n      platformEntries?: PlatformEntry;\r\n      link?: string;\r\n      about?: string;\r\n      mature?: boolean;\r\n      matureDescription?: string;\r\n      systemRequirements?: SystemRequirementEntry;\r\n      legal?: string;\r\n    },\r\n  ): Promise<GameType> {\r\n    this.logger.log(`Updating game with ID ${id} in the database`);\r\n\r\n    // Get relations\r\n    const relations: FindOptionsRelations<Game> = {\r\n      publishers: !!game.publishers,\r\n      developers: !!game.developers,\r\n      tags: !!game.tags,\r\n      pricing: !!game.pricing,\r\n      features: !!game.features,\r\n      languages: !!game.languages,\r\n    };\r\n\r\n    // Check if game exists\r\n    const existingGame = await this.gameRepository.findOne({\r\n      where: { id },\r\n      relations,\r\n    });\r\n\r\n    // Throw a not found exception if game does not exist\r\n    if (!existingGame) throw new NotFoundException(`Game with ID ${id} not found`);\r\n\r\n    // Get game languages if they are provided\r\n    let gameLanguages: GameLanguageType[] | undefined = [];\r\n    if (game.languages) {\r\n      gameLanguages = await this.languagesService.getByNameList(game.languages.map((language) => language.name));\r\n    }\r\n\r\n    // Update fields if they are provided\r\n    if (game.name) existingGame.name = game.name;\r\n    if (game.category) existingGame.category = game.category;\r\n    if (game.description) existingGame.description = game.description;\r\n    if (game.releaseDate) existingGame.releaseDate = game.releaseDate;\r\n    if (game.link) existingGame.link = game.link;\r\n    if (game.about) existingGame.about = game.about;\r\n    if (game.mature) existingGame.mature = game.mature;\r\n    if (game.matureDescription) existingGame.matureDescription = game.matureDescription;\r\n    if (game.legal) existingGame.legal = game.legal;\r\n\r\n    // Update related entities\r\n    if (game.publishers) {\r\n      const publishers = await this.companiesService.getByIds(game.publishers, 'publisher');\r\n      existingGame.publishers = publishers;\r\n    }\r\n    if (game.developers) {\r\n      const developers = await this.companiesService.getByIds(game.developers, 'developer');\r\n      existingGame.developers = developers;\r\n    }\r\n    if (game.tags) {\r\n      const tags = await this.gamesTagsService.getByIds(game.tags);\r\n      existingGame.tags = tags;\r\n    }\r\n    if (game.features) {\r\n      const features = await this.featuresService.getByIds(game.features);\r\n      existingGame.features = features;\r\n    }\r\n    if (game.languages) {\r\n      existingGame.languages = gameLanguages;\r\n      existingGame.languageSupport = game.languages;\r\n    }\r\n    if (game.featured !== undefined) existingGame.featured = game.featured;\r\n    if (game.changedThumbnails) {\r\n      const filteredThumbnails = Object.fromEntries(\r\n        Object.entries(game.changedThumbnails).filter(([, value]) => value !== undefined),\r\n      );\r\n      existingGame.thumbnailEntries = { ...existingGame.thumbnailEntries, ...filteredThumbnails };\r\n    }\r\n    if (game.deletedScreenshots && game.deletedScreenshots.length > 0) {\r\n      existingGame.imageEntries = existingGame.imageEntries.filter(\r\n        (image) => !game.deletedScreenshots.includes(image.order),\r\n      );\r\n    }\r\n    if (game.deletedVideos && game.deletedVideos.length > 0) {\r\n      existingGame.videoEntries = existingGame.videoEntries.filter(\r\n        (video) => !game.deletedVideos.includes(video.order),\r\n      );\r\n    }\r\n    if (game.renamedScreenshots && game.renamedScreenshots.length > 0) {\r\n      existingGame.imageEntries = existingGame.imageEntries.map((entry) => {\r\n        const newEntry = game.renamedScreenshots.find((renamedEntry) => renamedEntry.oldOrder === entry.order);\r\n        if (!newEntry) return entry;\r\n        return { ...entry, order: newEntry.newOrder, link: newEntry.link };\r\n      });\r\n    }\r\n    if (game.renamedVideos && game.renamedVideos.length > 0) {\r\n      existingGame.videoEntries = existingGame.videoEntries.map((entry) => {\r\n        const newEntry = game.renamedVideos.find((renamedEntry) => renamedEntry.oldOrder === entry.order);\r\n        if (!newEntry) return entry;\r\n        return { ...entry, order: newEntry.newOrder, link: newEntry.videoLink, posterLink: newEntry.posterLink };\r\n      });\r\n    }\r\n    if (game.addedScreenshots && game.addedScreenshots.length > 0)\r\n      existingGame.imageEntries = [...existingGame.imageEntries, ...game.addedScreenshots];\r\n    if (game.addedVideos && game.addedVideos.length > 0)\r\n      existingGame.videoEntries = [...existingGame.videoEntries, ...game.addedVideos];\r\n    if (game.featuredOrders && game.featuredOrders.length > 0) {\r\n      existingGame.imageEntries = existingGame.imageEntries.map((image) => ({\r\n        ...image,\r\n        featured: game.featuredOrders.includes(image.order),\r\n      }));\r\n    }\r\n    if (game.platformEntries) existingGame.platformEntries = game.platformEntries;\r\n    if (game.systemRequirements) existingGame.systemRequirements = game.systemRequirements;\r\n\r\n    // Update pricing if provided\r\n    if (game.pricing) {\r\n      if (game.pricing.free !== true && game.pricing.price) {\r\n        existingGame.pricing.free = false;\r\n        existingGame.pricing.basePrice = game.pricing.price;\r\n        existingGame.pricing.price = game.pricing.price;\r\n      }\r\n      if (game.pricing.free === true) {\r\n        existingGame.pricing.free = game.pricing.free;\r\n        existingGame.pricing.basePrice = '0.00';\r\n        existingGame.pricing.price = '0.00';\r\n      }\r\n    }\r\n\r\n    // Save the updated game to the database\r\n    const result = await this.gameRepository.save(existingGame);\r\n    if (!result) throw new InternalServerErrorException(`Failed to update game with ID ${id}`);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Updates games total sales by 1\r\n   * @param {number} ids - The IDs of the games to be updated.\r\n   * @return {Promise<Game[]>} A Promise that resolves to an array of updated games.\r\n   */\r\n  public async updateSales(ids: number[]): Promise<GameType[]> {\r\n    this.logger.log(`Updating games sales`);\r\n\r\n    // Update games sales\r\n    const games = await this.getByIds(ids);\r\n\r\n    // Update games sales\r\n    games.forEach((game) => {\r\n      game.totalSales += 1;\r\n    });\r\n\r\n    // Save the updated games to the database\r\n    const result = await this.gameRepository.save(games);\r\n    if (!result) throw new InternalServerErrorException(`Failed to update games sales`);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Removes a game by its ID.\r\n   * @param {number} id - The ID of the game to be removed.\r\n   * @return {Promise<Game>} A Promise that resolves to the removed game entity.\r\n   * @throws `NotFoundException` Throws a NotFoundException if the game with the specified ID is not found.\r\n   * @throws `InternalServerErrorException` Throws an InternalServerErrorException if the removal fails.\r\n   */\r\n  public async remove(id: number): Promise<GameType> {\r\n    this.logger.log(`Removing game with ID ${id} from the database`);\r\n\r\n    // Check if game exists\r\n    const game = await this.getById(id);\r\n    // Throw a not found exception if game does not exist\r\n    if (!game) throw new NotFoundException(`Game with ID ${id} not found`);\r\n\r\n    // Remove the game from the database\r\n    const removedGame = await this.gameRepository.remove(game);\r\n\r\n    // Throw an internal server error if the removal fails\r\n    if (!removedGame) throw new InternalServerErrorException('Failed to remove game from the database');\r\n\r\n    // Get game pricing id\r\n    const gamePricingId = game.pricing.id;\r\n\r\n    // Remove game pricing from the database\r\n    await this.gamesPricingService.remove(gamePricingId);\r\n\r\n    // Return the removed game\r\n    return removedGame;\r\n  }\r\n\r\n  /**\r\n   * Removes all games from the database.\r\n   * @return {Promise<void>} A Promise that resolves when the removal is complete.\r\n   * @throws `InternalServerErrorException` Throws an InternalServerErrorException if the removal fails.\r\n   */\r\n  public async removeAll(): Promise<void> {\r\n    this.logger.log('Removing all games from the database');\r\n\r\n    // Remove all games from the database\r\n    const result = await this.gameRepository.delete({});\r\n\r\n    // Throw an internal server error if the removal fails\r\n    if (!result) throw new InternalServerErrorException('Failed to remove games from the database');\r\n\r\n    // Remove all game pricing from the database\r\n    await this.gamesPricingService.removeAll();\r\n  }\r\n}\r\n"],"names":["GamesService","constructor","logger","gameRepository","companiesService","featuresService","languagesService","gamesPricingService","gamesTagsService","relations","tags","pricing","getAll","orderBy","order","log","games","find","getById","id","game","findOne","where","developers","publishers","features","languages","NotFoundException","getByIds","ids","length","In","missingIds","filter","some","getByName","name","getGamesPaginated","page","limit","discount","searchQuery","admin","discountEndDate","MoreThanOrEqual","Date","discountStartDate","LessThanOrEqual","ILike","orderOptions","discountPrice","basePrice","discountPercentage","offerType","GamePricing","skipDiscountCheck","items","total","findAndCount","skip","Math","max","take","totalPages","ceil","create","existingGame","ConflictException","gameLanguages","getByNameList","map","language","newGame","Game","storageName","category","description","releaseDate","featured","thumbnailEntries","imageEntries","videoEntries","languageSupport","platformEntries","link","about","mature","matureDescription","systemRequirements","legal","free","price","result","save","InternalServerErrorException","update","undefined","changedThumbnails","filteredThumbnails","Object","fromEntries","entries","value","deletedScreenshots","image","includes","deletedVideos","video","renamedScreenshots","entry","newEntry","renamedEntry","oldOrder","newOrder","renamedVideos","videoLink","posterLink","addedScreenshots","addedVideos","featuredOrders","updateSales","forEach","totalSales","remove","removedGame","gamePricingId","removeAll","delete"],"mappings":"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"}