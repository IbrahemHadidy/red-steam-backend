{"version":3,"sources":["../../../../../src/modules/repositories/sql/games/search.service.ts"],"sourcesContent":["// NestJS\r\nimport { Injectable, Logger, NotFoundException } from '@nestjs/common';\r\n\r\n// TypeORM\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { And, ILike, In, Not, Repository } from 'typeorm';\r\n\r\n// Entities\r\nimport { Game } from '@repositories/sql/games/game.entity';\r\n\r\n// Types\r\nimport { Game as GameType } from '@repositories/sql/games/game.entity';\r\n\r\n@Injectable()\r\nexport class SearchService {\r\n  constructor(\r\n    private readonly logger: Logger,\r\n    @InjectRepository(Game, 'sql')\r\n    private readonly gameRepository: Repository<Game>,\r\n  ) {}\r\n\r\n  /**\r\n   * Get games by partial name (for mini search)\r\n   * @param data An object containing the name\r\n   * @returns An array of games\r\n   * @throws `NotFoundException` if no games are found\r\n   */\r\n  public async getByPartialName(partialName: string): Promise<GameType[]> {\r\n    this.logger.log(`Finding games with partial name: ${partialName}`);\r\n\r\n    // Find games with the given partial name\r\n    const games = await this.gameRepository.find({\r\n      where: { name: ILike(`%${partialName}%`) },\r\n      take: 10,\r\n      relations: { pricing: true, tags: true },\r\n      // TODO: Add cache\r\n      // cache: {\r\n      //   id: `${partialName}-games`,\r\n      //   milliseconds: 30 * 1000, // 30 seconds\r\n      // },\r\n    });\r\n\r\n    // Return the games\r\n    return games;\r\n  }\r\n\r\n  /**\r\n   * Get games by parameters\r\n   * @param searchData An object containing the parameters (partialName, price, tags, offers, platforms, sortBy, publishers, developers, features, featured)\r\n   * @param pagination An object containing the pagination offset and limit\r\n   * @returns An array of games or empty array if no games are found\r\n   */\r\n  public async getByParameters(\r\n    searchData: {\r\n      sort?: 'relevance' | 'name' | 'lowestPrice' | 'highestPrice' | 'releaseDate' | 'reviews' | 'totalSales';\r\n      partialName?: string;\r\n      maxPrice?: string;\r\n      tags?: number[];\r\n      excludeTags?: number[];\r\n      paid?: boolean;\r\n      offers?: boolean;\r\n      platforms?: ('win' | 'mac')[];\r\n      publishers?: number[];\r\n      developers?: number[];\r\n      features?: number[];\r\n      languages?: number[];\r\n      featured?: boolean;\r\n      excludeMature?: boolean;\r\n      excludedGames?: number[];\r\n      upcomingMode?: 'onlyUpcoming' | 'exclude';\r\n    },\r\n    pagination: { page: number; limit: number } = { page: 0, limit: 20 },\r\n  ): Promise<GameType[]> {\r\n    const {\r\n      sort,\r\n      partialName,\r\n      maxPrice,\r\n      tags,\r\n      excludeTags,\r\n      paid,\r\n      offers,\r\n      platforms,\r\n      publishers,\r\n      developers,\r\n      features,\r\n      languages,\r\n      featured,\r\n      excludeMature,\r\n      excludedGames,\r\n      upcomingMode,\r\n    } = searchData;\r\n\r\n    const { page, limit } = pagination;\r\n\r\n    this.logger.log(`Finding games with parameters: ${JSON.stringify(searchData)}`);\r\n\r\n    // Create include subqueries template\r\n    const createIncludeSubQuery = (\r\n      entity: 'tag' | 'developer' | 'publisher' | 'feature' | 'language',\r\n      values: number[],\r\n    ) => {\r\n      return this.gameRepository\r\n        .createQueryBuilder('subGame')\r\n        .leftJoin(`subGame.${entity}s`, `${entity}`)\r\n        .select('subGame.id')\r\n        .where(`${entity}.id IN (:...${entity}s)`, { [`${entity}s`]: values })\r\n        .groupBy('subGame.id')\r\n        .having(`COUNT(${entity}.id) = :${entity}sCount`, { [`${entity}sCount`]: values.length });\r\n    };\r\n\r\n    // Create exclude subqueries template\r\n    const createExcludeSubQuery = (\r\n      entity: 'tag' | 'developer' | 'publisher' | 'feature' | 'language',\r\n      values: number[],\r\n    ) => {\r\n      return this.gameRepository\r\n        .createQueryBuilder('subGame')\r\n        .leftJoin(`subGame.${entity}s`, `${entity}`)\r\n        .select('subGame.id')\r\n        .where(`${entity}.id IN (:...exclude${entity}s)`, { [`exclude${entity}s`]: values })\r\n        .groupBy('subGame.id')\r\n        .having(`COUNT(${entity}.id) > 0`);\r\n    };\r\n\r\n    // Create a query builder with the necessary joins\r\n    const query = this.gameRepository\r\n      .createQueryBuilder('game')\r\n      .leftJoinAndSelect('game.tags', 'tag')\r\n      .leftJoinAndSelect('game.pricing', 'pricing');\r\n\r\n    // Apply name filter\r\n    if (partialName) {\r\n      query.andWhere('game.name ILIKE :partialName', { partialName: `%${partialName}%` });\r\n    }\r\n\r\n    // Apply paid filter\r\n    if (offers) {\r\n      query.andWhere('pricing.discount = true AND pricing.discountEndDate > :now', { now: new Date() });\r\n    }\r\n\r\n    // Apply price filter\r\n    if (maxPrice) {\r\n      query.andWhere(\r\n        '(pricing.basePrice <= :maxPrice OR (pricing.discountPrice <= :maxPrice AND pricing.discount = true AND pricing.discountEndDate > :now AND pricing.discountStartDate < :now))',\r\n        { maxPrice, now: new Date() },\r\n      );\r\n    }\r\n\r\n    // Apply tags filter\r\n    if (tags) {\r\n      // Create a subquery to find games that have all the tags\r\n      const tagsSubQuery = createIncludeSubQuery('tag', tags);\r\n\r\n      // Add the subquery and parameters to the main query\r\n      query.andWhere(`game.id IN (${tagsSubQuery.getQuery()})`);\r\n      query.setParameters(tagsSubQuery.getParameters());\r\n    }\r\n\r\n    // Apply excludeTags filter\r\n    if (excludeTags) {\r\n      // Create a subquery to exclude games that have any of the excluded tags\r\n      const excludeTagsSubQuery = createExcludeSubQuery('tag', excludeTags); // Exclude games with any of the excluded tags\r\n\r\n      // Add the excludeTags subquery to the main query\r\n      query.andWhere(`game.id NOT IN (${excludeTagsSubQuery.getQuery()})`);\r\n      query.setParameters(excludeTagsSubQuery.getParameters());\r\n    }\r\n\r\n    // Apply paid filter\r\n    if (paid) {\r\n      query.andWhere('pricing.free = false');\r\n    }\r\n\r\n    // Apply platforms filter\r\n    if (platforms) {\r\n      if (platforms.includes('win')) {\r\n        query.andWhere('game.platformEntries @> :platformsWin', { platformsWin: JSON.stringify({ win: true }) });\r\n      }\r\n      if (platforms.includes('mac')) {\r\n        query.andWhere('game.platformEntries @> :platformsMac', { platformsMac: JSON.stringify({ mac: true }) });\r\n      }\r\n    }\r\n\r\n    // Apply publishers filter\r\n    if (publishers) {\r\n      // Add the publisher relationship\r\n      query.leftJoinAndSelect('game.publishers', 'publisher');\r\n\r\n      // Create a subquerys to find games that have all the publishers\r\n      const publishersSubQuery = createIncludeSubQuery('publisher', publishers);\r\n\r\n      // Add the subquery and parameters to the main query\r\n      query.andWhere(`game.id IN (${publishersSubQuery.getQuery()})`);\r\n      query.setParameters(publishersSubQuery.getParameters());\r\n    }\r\n\r\n    // Apply developers filter\r\n    if (developers) {\r\n      // Add the developers relationship\r\n      query.leftJoinAndSelect('game.developers', 'developer');\r\n\r\n      // Create a subquery to find games that have all the developers\r\n      const developersSubQuery = createIncludeSubQuery('developer', developers);\r\n\r\n      // Add the subquery and parameters to the main query\r\n      query.andWhere(`game.id IN (${developersSubQuery.getQuery()})`);\r\n      query.setParameters(developersSubQuery.getParameters());\r\n    }\r\n\r\n    // Apply features filter\r\n    if (features) {\r\n      // Add the features relationship\r\n      query.leftJoinAndSelect('game.features', 'feature');\r\n\r\n      // Create a subquery to find games that have all the features\r\n      const featuresSubQuery = createIncludeSubQuery('feature', features);\r\n\r\n      // Add the subquery and parameters to the main query\r\n      query.andWhere(`game.id IN (${featuresSubQuery.getQuery()})`);\r\n      query.setParameters(featuresSubQuery.getParameters());\r\n    }\r\n\r\n    // Apply languages filter\r\n    if (languages) {\r\n      // Add the languages relationship\r\n      query.leftJoinAndSelect('game.languages', 'language');\r\n\r\n      // Create a subquery to find games that have all the languages\r\n      const languagesSubQuery = createIncludeSubQuery('language', languages);\r\n\r\n      // Add the subquery and parameters to the main query\r\n      query.andWhere(`game.id IN (${languagesSubQuery.getQuery()})`);\r\n      query.setParameters(languagesSubQuery.getParameters());\r\n    }\r\n\r\n    // Apply featured filter\r\n    if (featured) {\r\n      query.andWhere('game.featured = true');\r\n    }\r\n\r\n    // Apply exclude mature filter\r\n    if (excludeMature) {\r\n      query.andWhere('game.mature = false');\r\n    }\r\n\r\n    // Apply excluded games filter\r\n    if (excludedGames) {\r\n      query.andWhere('game.id NOT IN (:...excludedGames)', { excludedGames });\r\n    }\r\n\r\n    // Apply upcoming filter\r\n    if (upcomingMode === 'onlyUpcoming') {\r\n      query.andWhere('game.releaseDate > :now', { now: new Date() });\r\n    } else if (upcomingMode === 'exclude') {\r\n      query.andWhere('game.releaseDate <= :now', { now: new Date() });\r\n    }\r\n\r\n    // Apply sorting\r\n    if (sort) {\r\n      switch (sort) {\r\n        case 'name':\r\n          query.orderBy('game.name', 'ASC');\r\n          break;\r\n        case 'totalSales':\r\n          query.orderBy('game.totalSales', 'DESC');\r\n          break;\r\n        case 'lowestPrice':\r\n          query.orderBy('pricing.price', 'ASC');\r\n          break;\r\n        case 'highestPrice':\r\n          query.orderBy('pricing.price', 'DESC');\r\n          break;\r\n        case 'releaseDate':\r\n          query.orderBy('game.releaseDate', 'DESC');\r\n          break;\r\n        case 'reviews':\r\n          query.orderBy('game.averageRating', 'DESC');\r\n          break;\r\n        case 'relevance':\r\n        default:\r\n          query.orderBy('game.reviewsCount', 'DESC');\r\n          break;\r\n      }\r\n    }\r\n\r\n    // Apply pagination\r\n    query.skip(Math.max((page - 1) * limit, 0)).take(limit);\r\n\r\n    // Set cache for 30 seconds\r\n    query.cache(`games-${JSON.stringify(searchData)}`, 30 * 1000);\r\n\r\n    // Retrieve games with the given parameters\r\n    const [games] = await query.getManyAndCount();\r\n\r\n    // Return the games\r\n    return games;\r\n  }\r\n\r\n  /**\r\n   * Retrieves games sorted by the number of matching tags.\r\n   * @param tags - The IDs of the tags to retrieve.\r\n   * @param limit - The maximum number of games to retrieve.\r\n   * @return A Promise that resolves to an array of game entities.\r\n   */\r\n  public async getByUserTags(tags: number[], excludedGames?: number[], limit: number = 12): Promise<GameType[]> {\r\n    this.logger.log(`Retrieving games with tag ids ${tags} from the database`);\r\n\r\n    // Check if tags array is empty to avoid unnecessary queries\r\n    if (tags.length === 0) {\r\n      throw new NotFoundException(`No tags provided`);\r\n    }\r\n\r\n    // Fetch games that have at least one of the specified tags and count the occurrences of tags\r\n    const rawGames: Game[] = await this.gameRepository\r\n      .createQueryBuilder('game')\r\n      .leftJoin('game.tags', 'tag')\r\n      .where('tag.tag_id IN (:...tags)', { tags })\r\n      .groupBy('game.game_id')\r\n      .addSelect('COUNT(tag.tag_id) as tagCount')\r\n      .orderBy('tagCount', 'DESC')\r\n      .limit(limit)\r\n      .getMany();\r\n\r\n    // If no games are found, return an empty array\r\n    if (rawGames.length === 0) return [];\r\n\r\n    // Extract the game IDs from raw results\r\n    const gameIds = rawGames.map((game) => game.id);\r\n\r\n    // Fetch the full Game entities with tags\r\n    const foundGames = await this.gameRepository.find({\r\n      where: excludedGames ? { id: And(In(gameIds), Not(In(excludedGames))) } : { id: In(gameIds) },\r\n      relations: { tags: true, pricing: true },\r\n      // TODO: Add cache\r\n      // cache: {\r\n      //   id: `games-${JSON.stringify(gameIds)}`,\r\n      //   milliseconds: 30 * 1000, // 30 seconds\r\n      // },\r\n    });\r\n\r\n    // Return the sorted games\r\n    return foundGames;\r\n  }\r\n}\r\n"],"names":["SearchService","constructor","logger","gameRepository","getByPartialName","partialName","log","games","find","where","name","ILike","take","relations","pricing","tags","getByParameters","searchData","pagination","page","limit","sort","maxPrice","excludeTags","paid","offers","platforms","publishers","developers","features","languages","featured","excludeMature","excludedGames","upcomingMode","JSON","stringify","createIncludeSubQuery","entity","values","createQueryBuilder","leftJoin","select","groupBy","having","length","createExcludeSubQuery","query","leftJoinAndSelect","andWhere","now","Date","tagsSubQuery","getQuery","setParameters","getParameters","excludeTagsSubQuery","includes","platformsWin","win","platformsMac","mac","publishersSubQuery","developersSubQuery","featuresSubQuery","languagesSubQuery","orderBy","skip","Math","max","cache","getManyAndCount","getByUserTags","NotFoundException","rawGames","addSelect","getMany","gameIds","map","game","id","foundGames","And","In","Not"],"mappings":"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"}