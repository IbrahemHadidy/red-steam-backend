{"version":3,"sources":["../../../../../src/modules/repositories/sql/games/game.entity.ts"],"sourcesContent":["// TypeORM\r\nimport {\r\n  BaseEntity,\r\n  Column,\r\n  Entity,\r\n  JoinColumn,\r\n  JoinTable,\r\n  ManyToMany,\r\n  OneToMany,\r\n  OneToOne,\r\n  PrimaryGeneratedColumn,\r\n} from 'typeorm';\r\n\r\n// Entities\r\nimport { Developer, Publisher } from '@repositories/sql/companies/company.entity';\r\nimport { GameFeature } from '@repositories/sql/games-features/game-feature.entity';\r\nimport { GameLanguage } from '@repositories/sql/games-languages/game-language.entity';\r\nimport { GamePricing } from '@repositories/sql/games-pricing/game-pricing.entity';\r\nimport { GameTag } from '@repositories/sql/games-tags/game-tag.entity';\r\nimport { Review } from '@repositories/sql/reviews/review.entity';\r\n\r\n// Types\r\nimport type {\r\n  Developer as DeveloperType,\r\n  Publisher as PublisherType,\r\n} from '@repositories/sql/companies/company.entity';\r\nimport type { GameFeature as GameFeatureType } from '@repositories/sql/games-features/game-feature.entity';\r\nimport type { GameLanguage as GameLanguageType } from '@repositories/sql/games-languages/game-language.entity';\r\nimport type { GamePricing as GamePricingType } from '@repositories/sql/games-pricing/game-pricing.entity';\r\nimport type { GameTag as GameTagType } from '@repositories/sql/games-tags/game-tag.entity';\r\nimport type { Review as ReviewType } from '@repositories/sql/reviews/review.entity';\r\n\r\n@Entity({ name: 'games' })\r\nexport class Game extends BaseEntity {\r\n  @PrimaryGeneratedColumn('increment', { name: 'game_id' })\r\n  id: number;\r\n\r\n  @Column({ type: 'varchar', length: 50, unique: true })\r\n  name: string;\r\n\r\n  @Column({ type: 'varchar', length: 50, unique: true })\r\n  storageName: string;\r\n\r\n  @Column({ type: 'varchar', length: 50 })\r\n  category: string;\r\n\r\n  @Column({ type: 'text' })\r\n  description: string;\r\n\r\n  @Column({ default: new Date() })\r\n  releaseDate: Date;\r\n\r\n  @Column({ default: false })\r\n  featured: boolean;\r\n\r\n  @ManyToMany(() => Publisher, (company: PublisherType) => company.games)\r\n  @JoinTable({ name: 'games_publishers' })\r\n  publishers: PublisherType[];\r\n\r\n  @ManyToMany(() => Developer, (company: DeveloperType) => company.games)\r\n  @JoinTable({ name: 'games_developers' })\r\n  developers: DeveloperType[];\r\n\r\n  @Column({ type: 'jsonb' })\r\n  thumbnailEntries: ThumbnailsEntry;\r\n\r\n  @Column({ type: 'jsonb', nullable: true })\r\n  imageEntries: ImageEntry[];\r\n\r\n  @Column({ type: 'jsonb', nullable: true })\r\n  videoEntries: VideoEntry[];\r\n\r\n  @ManyToMany(() => GameTag, (tag: GameTagType) => tag.games)\r\n  @JoinTable({ name: 'games_tags' })\r\n  tags: GameTagType[];\r\n\r\n  @OneToOne(() => GamePricing, (pricing: GamePricingType) => pricing.game, {\r\n    cascade: true,\r\n  })\r\n  @JoinColumn({ name: 'pricing_id' })\r\n  pricing: GamePricingType;\r\n\r\n  @ManyToMany(() => GameFeature, (feature: GameFeatureType) => feature.games)\r\n  @JoinTable({ name: 'games_features' })\r\n  features: GameFeatureType[];\r\n\r\n  @ManyToMany(() => GameLanguage, (language: GameLanguageType) => language.games)\r\n  @JoinTable({ name: 'games_languages' })\r\n  languages: GameLanguageType[];\r\n\r\n  @Column({ type: 'jsonb', nullable: true })\r\n  languageSupport: LanguageSupportEntry[];\r\n\r\n  @Column({ type: 'jsonb' })\r\n  platformEntries: PlatformEntry;\r\n\r\n  @Column({ nullable: true })\r\n  link: string;\r\n\r\n  @Column({ type: 'text' })\r\n  about: string;\r\n\r\n  @Column({ default: false })\r\n  mature: boolean;\r\n\r\n  @Column({ type: 'text' })\r\n  matureDescription: string;\r\n\r\n  @Column({ type: 'jsonb' })\r\n  systemRequirements: SystemRequirementEntry;\r\n\r\n  @Column({ type: 'text', nullable: true })\r\n  legal: string;\r\n\r\n  @OneToMany(() => Review, (review: ReviewType) => review.game)\r\n  reviews: ReviewType[];\r\n\r\n  @Column({ type: 'int', default: 0 })\r\n  totalSales: number;\r\n\r\n  @Column({ type: 'float', default: 0 })\r\n  averageRating: number;\r\n\r\n  @Column({ type: 'int', default: 0 })\r\n  reviewsCount: number;\r\n\r\n  // Function to update reviews count and average rating\r\n  async updateReviewsData() {\r\n    const result: { count: number; positivecount: number } = await Game.createQueryBuilder('game')\r\n      .leftJoin('game.reviews', 'review')\r\n      .select(['COUNT(review.id) AS count', 'SUM(CASE WHEN review.positive = true THEN 1 ELSE 0 END) AS positivecount'])\r\n      .where('game.id = :id', { id: this.id })\r\n      .getRawOne();\r\n\r\n    const reviewsCount = Number(result.count) || 0;\r\n    const positiveReviewsCount = Number(result.positivecount) || 0;\r\n\r\n    this.reviewsCount = reviewsCount;\r\n\r\n    if (reviewsCount > 0) {\r\n      this.averageRating = (positiveReviewsCount / reviewsCount) * 100;\r\n    } else {\r\n      this.averageRating = 0;\r\n    }\r\n\r\n    // Call save after calculating reviews data\r\n    await this.save();\r\n  }\r\n}\r\n\r\nexport interface ThumbnailsEntry {\r\n  mainImage: string;\r\n  backgroundImage: string;\r\n  menuImg: string;\r\n  horizontalHeaderImage: string;\r\n  verticalHeaderImage: string;\r\n  smallHeaderImage: string;\r\n  searchImage: string;\r\n  tabImage: string;\r\n}\r\n\r\nexport interface ImageEntry {\r\n  link: string;\r\n  featured?: boolean;\r\n  order: number;\r\n}\r\n\r\nexport interface VideoEntry {\r\n  link: string;\r\n  posterLink: string;\r\n  order: number;\r\n}\r\n\r\nexport interface LanguageSupportEntry {\r\n  name: string;\r\n  interface: boolean;\r\n  fullAudio: boolean;\r\n  subtitles: boolean;\r\n}\r\n\r\nexport interface PlatformEntry {\r\n  win: boolean;\r\n  mac: boolean;\r\n}\r\n\r\nexport interface SystemRequirementEntry {\r\n  req64?: boolean;\r\n  mini: SystemRequirementsDetails;\r\n  recommended: SystemRequirementsDetails;\r\n}\r\n\r\nexport interface SystemRequirementsDetails {\r\n  os?: string;\r\n  cpu?: string;\r\n  ram?: string;\r\n  gpu?: string;\r\n  dx?: string;\r\n  network?: string;\r\n  storage?: string;\r\n  additionalNotes?: string;\r\n  soundCard?: string;\r\n  vrSupport?: string;\r\n}\r\n"],"names":["Game","BaseEntity","updateReviewsData","result","createQueryBuilder","leftJoin","select","where","id","getRawOne","reviewsCount","Number","count","positiveReviewsCount","positivecount","averageRating","save","name","type","length","unique","default","Date","Publisher","company","games","Developer","nullable","GameTag","tag","GamePricing","pricing","game","cascade","GameFeature","feature","GameLanguage","language","Review","review"],"mappings":"AAAA,UAAU;;;;;+BAiCGA;;;eAAAA;;;yBAtBN;+BAG8B;mCACT;oCACC;mCACD;+BACJ;8BACD;;;;;;;;;;AAchB,IAAA,AAAMA,OAAN,MAAMA,aAAaC,mBAAU;IA6FlC,sDAAsD;IACtD,MAAMC,oBAAoB;QACxB,MAAMC,SAAmD,MAAMH,KAAKI,kBAAkB,CAAC,QACpFC,QAAQ,CAAC,gBAAgB,UACzBC,MAAM,CAAC;YAAC;YAA6B;SAA2E,EAChHC,KAAK,CAAC,iBAAiB;YAAEC,IAAI,IAAI,CAACA,EAAE;QAAC,GACrCC,SAAS;QAEZ,MAAMC,eAAeC,OAAOR,OAAOS,KAAK,KAAK;QAC7C,MAAMC,uBAAuBF,OAAOR,OAAOW,aAAa,KAAK;QAE7D,IAAI,CAACJ,YAAY,GAAGA;QAEpB,IAAIA,eAAe,GAAG;YACpB,IAAI,CAACK,aAAa,GAAG,AAACF,uBAAuBH,eAAgB;QAC/D,OAAO;YACL,IAAI,CAACK,aAAa,GAAG;QACvB;QAEA,2CAA2C;QAC3C,MAAM,IAAI,CAACC,IAAI;IACjB;AACF;;;QAlHyCC,MAAM;;;;;;QAGnCC,MAAM;QAAWC,QAAQ;QAAIC,QAAQ;;;;;;QAGrCF,MAAM;QAAWC,QAAQ;QAAIC,QAAQ;;;;;;QAGrCF,MAAM;QAAWC,QAAQ;;;;;;QAGzBD,MAAM;;;;;;QAGNG,SAAS,IAAIC;;;;;;QAGbD,SAAS;;;;;iCAGDE,wBAAS,GAAGC,UAA2BA,QAAQC,KAAK;;QACzDR,MAAM;;;;;iCAGDS,wBAAS,GAAGF,UAA2BA,QAAQC,KAAK;;QACzDR,MAAM;;;;;;QAGTC,MAAM;;;;;;QAGNA,MAAM;QAASS,UAAU;;;;;;QAGzBT,MAAM;QAASS,UAAU;;;;;iCAGjBC,sBAAO,GAAGC,MAAqBA,IAAIJ,KAAK;;QAC7CR,MAAM;;;;;+BAGHa,8BAAW,GAAGC,UAA6BA,QAAQC,IAAI;QACrEC,SAAS;;;QAEGhB,MAAM;;;;;iCAGFiB,8BAAW,GAAGC,UAA6BA,QAAQV,KAAK;;QAC7DR,MAAM;;;;;iCAGDmB,gCAAY,GAAGC,WAA+BA,SAASZ,KAAK;;QACjER,MAAM;;;;;;QAGTC,MAAM;QAASS,UAAU;;;;;;QAGzBT,MAAM;;;;;;QAGNS,UAAU;;;;;;QAGVT,MAAM;;;;;;QAGNG,SAAS;;;;;;QAGTH,MAAM;;;;;;QAGNA,MAAM;;;;;;QAGNA,MAAM;QAAQS,UAAU;;;;;gCAGjBW,oBAAM,GAAGC,SAAuBA,OAAOP,IAAI;;;;;QAGlDd,MAAM;QAAOG,SAAS;;;;;;QAGtBH,MAAM;QAASG,SAAS;;;;;;QAGxBH,MAAM;QAAOG,SAAS;;;;;;QA3FxBJ,MAAM"}