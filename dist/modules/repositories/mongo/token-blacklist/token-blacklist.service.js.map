{"version":3,"sources":["../../../../../src/modules/repositories/mongo/token-blacklist/token-blacklist.service.ts"],"sourcesContent":["// NestJS\r\nimport { ConflictException, Injectable, Logger } from '@nestjs/common';\r\n\r\n// TypeORM\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\n\r\n// Entities\r\nimport { BlacklistedToken } from '@repositories/mongo/token-blacklist/blacklisted-token.entity';\r\n\r\n@Injectable()\r\nexport class TokenBlacklistService {\r\n  constructor(\r\n    @InjectRepository(BlacklistedToken, 'mongo')\r\n    private readonly blacklistTokenRepository: Repository<BlacklistedToken>,\r\n    private readonly logger: Logger,\r\n  ) {}\r\n\r\n  /**\r\n   * Adds a token to the blacklist.\r\n   * @param token - The token to blacklist.\r\n   * @throws ConflictException if the token already exists in the blacklist.\r\n   */\r\n  public async blacklistToken(token: string): Promise<void> {\r\n    this.logger.log(`Attempting to blacklist token: ${token}`);\r\n\r\n    // Check if the token already exists in the blacklist\r\n    const tokenExists = await this.isBlacklisted(token);\r\n\r\n    // If the token already exists, throw a conflict exception\r\n    if (tokenExists) {\r\n      this.logger.warn(`Token already blacklisted: ${token}`);\r\n      throw new ConflictException('Token already exists in blacklist');\r\n    }\r\n\r\n    // Add the token to the blacklist\r\n    await this.blacklistTokenRepository.save({ token });\r\n    this.logger.log(`Successfully blacklisted token: ${token}`);\r\n  }\r\n\r\n  /**\r\n   * Checks if a token is blacklisted.\r\n   * @param token - The token to check.\r\n   * @returns A boolean indicating whether the token is blacklisted.\r\n   */\r\n  public async isBlacklisted(token: string): Promise<boolean> {\r\n    this.logger.log(`Checking if token is blacklisted: ${token}`);\r\n\r\n    // Check if the token already exists in the blacklist\r\n    const blacklistedToken = await this.blacklistTokenRepository.findOne({ where: { token } });\r\n\r\n    // If the token exists, return true\r\n    const isBlacklisted = !!blacklistedToken;\r\n    this.logger.log(`Token blacklisted status for ${token}: ${isBlacklisted}`);\r\n\r\n    // Return the boolean indicating whether the token is blacklisted\r\n    return isBlacklisted;\r\n  }\r\n\r\n  /**\r\n   * Removes all tokens from the blacklist.\r\n   */\r\n  public async clearAll(): Promise<void> {\r\n    this.logger.log('Clearing all tokens from the blacklist');\r\n\r\n    // Remove all tokens from the blacklist\r\n    await this.blacklistTokenRepository.delete({});\r\n    this.logger.log('All tokens successfully removed from the blacklist');\r\n  }\r\n}\r\n"],"names":["TokenBlacklistService","constructor","blacklistTokenRepository","logger","blacklistToken","token","log","tokenExists","isBlacklisted","warn","ConflictException","save","blacklistedToken","findOne","where","clearAll","delete"],"mappings":"AAAA,SAAS;;;;;+BAWIA;;;eAAAA;;;wBAVyC;yBAGrB;0BACN;wCAGM;;;;;;;;;;;;;;;AAG1B,IAAA,AAAMA,wBAAN,MAAMA;IACXC,YACE,AACiBC,wBAAsD,EACvE,AAAiBC,MAAc,CAC/B;aAFiBD,2BAAAA;aACAC,SAAAA;IAChB;IAEH;;;;GAIC,GACD,MAAaC,eAAeC,KAAa,EAAiB;QACxD,IAAI,CAACF,MAAM,CAACG,GAAG,CAAC,CAAC,+BAA+B,EAAED,OAAO;QAEzD,qDAAqD;QACrD,MAAME,cAAc,MAAM,IAAI,CAACC,aAAa,CAACH;QAE7C,0DAA0D;QAC1D,IAAIE,aAAa;YACf,IAAI,CAACJ,MAAM,CAACM,IAAI,CAAC,CAAC,2BAA2B,EAAEJ,OAAO;YACtD,MAAM,IAAIK,yBAAiB,CAAC;QAC9B;QAEA,iCAAiC;QACjC,MAAM,IAAI,CAACR,wBAAwB,CAACS,IAAI,CAAC;YAAEN;QAAM;QACjD,IAAI,CAACF,MAAM,CAACG,GAAG,CAAC,CAAC,gCAAgC,EAAED,OAAO;IAC5D;IAEA;;;;GAIC,GACD,MAAaG,cAAcH,KAAa,EAAoB;QAC1D,IAAI,CAACF,MAAM,CAACG,GAAG,CAAC,CAAC,kCAAkC,EAAED,OAAO;QAE5D,qDAAqD;QACrD,MAAMO,mBAAmB,MAAM,IAAI,CAACV,wBAAwB,CAACW,OAAO,CAAC;YAAEC,OAAO;gBAAET;YAAM;QAAE;QAExF,mCAAmC;QACnC,MAAMG,gBAAgB,CAAC,CAACI;QACxB,IAAI,CAACT,MAAM,CAACG,GAAG,CAAC,CAAC,6BAA6B,EAAED,MAAM,EAAE,EAAEG,eAAe;QAEzE,iEAAiE;QACjE,OAAOA;IACT;IAEA;;GAEC,GACD,MAAaO,WAA0B;QACrC,IAAI,CAACZ,MAAM,CAACG,GAAG,CAAC;QAEhB,uCAAuC;QACvC,MAAM,IAAI,CAACJ,wBAAwB,CAACc,MAAM,CAAC,CAAC;QAC5C,IAAI,CAACb,MAAM,CAACG,GAAG,CAAC;IAClB;AACF"}