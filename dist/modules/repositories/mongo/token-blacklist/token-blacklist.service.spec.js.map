{"version":3,"sources":["../../../../../src/modules/repositories/mongo/token-blacklist/token-blacklist.service.spec.ts"],"sourcesContent":["import { ConflictException, Logger } from '@nestjs/common';\r\nimport { ConfigModule, ConfigService } from '@nestjs/config';\r\nimport { Test, TestingModule } from '@nestjs/testing';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { environmentConfig, getMongoTypeOrmConfig } from '@test/integration-setup';\r\nimport { randomUUID } from 'crypto';\r\n\r\nimport { TokenBlacklistModule } from '@repositories/mongo/token-blacklist/token-blacklist.module';\r\nimport { TokenBlacklistService } from '@repositories/mongo/token-blacklist/token-blacklist.service';\r\n\r\ndescribe('TokenBlacklistService', () => {\r\n  let token: string;\r\n  let tokenBlacklistService: TokenBlacklistService;\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      imports: [\r\n        ConfigModule.forRoot(environmentConfig),\r\n        TypeOrmModule.forRootAsync({\r\n          inject: [ConfigService],\r\n          name: 'mongo',\r\n          useFactory: async (configService: ConfigService) => getMongoTypeOrmConfig(configService),\r\n        }),\r\n        TokenBlacklistModule,\r\n      ],\r\n      providers: [TokenBlacklistService, Logger],\r\n    }).compile();\r\n\r\n    tokenBlacklistService = module.get<TokenBlacklistService>(TokenBlacklistService);\r\n\r\n    token = randomUUID();\r\n  });\r\n\r\n  afterEach(async () => {\r\n    await tokenBlacklistService.clearAll();\r\n  });\r\n\r\n  describe('blacklistToken', () => {\r\n    it('should blacklist a token', async () => {\r\n      await tokenBlacklistService.blacklistToken(token);\r\n\r\n      const isBlacklisted = await tokenBlacklistService.isBlacklisted(token);\r\n\r\n      // Assertions\r\n      expect(isBlacklisted).toBe(true);\r\n    });\r\n\r\n    it('should throw an error if the token already exists', async () => {\r\n      // Add the token to the blacklist\r\n      await tokenBlacklistService.blacklistToken(token);\r\n\r\n      // Assertions\r\n      await expect(tokenBlacklistService.blacklistToken(token)).rejects.toThrow(ConflictException);\r\n    });\r\n  });\r\n\r\n  describe('isBlacklisted', () => {\r\n    it('should return false if the token is not blacklisted', async () => {\r\n      const isBlacklisted = await tokenBlacklistService.isBlacklisted(token);\r\n\r\n      // Assertions\r\n      expect(isBlacklisted).toBe(false);\r\n    });\r\n\r\n    it('should return true if the token is blacklisted', async () => {\r\n      // Add the token to the blacklist\r\n      await tokenBlacklistService.blacklistToken(token);\r\n\r\n      const isBlacklisted = await tokenBlacklistService.isBlacklisted(token);\r\n\r\n      // Assertions\r\n      expect(isBlacklisted).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('clearAll', () => {\r\n    it('should clear all tokens from the blacklist', async () => {\r\n      // Add the token to the blacklist\r\n      await tokenBlacklistService.blacklistToken(token);\r\n\r\n      // Clear all tokens\r\n      await tokenBlacklistService.clearAll();\r\n\r\n      // Assertions\r\n      const isBlacklisted = await tokenBlacklistService.isBlacklisted(token);\r\n      expect(isBlacklisted).toBe(false);\r\n    });\r\n  });\r\n});\r\n"],"names":["describe","token","tokenBlacklistService","beforeEach","module","Test","createTestingModule","imports","ConfigModule","forRoot","environmentConfig","TypeOrmModule","forRootAsync","inject","ConfigService","name","useFactory","configService","getMongoTypeOrmConfig","TokenBlacklistModule","providers","TokenBlacklistService","Logger","compile","get","randomUUID","afterEach","clearAll","it","blacklistToken","isBlacklisted","expect","toBe","rejects","toThrow","ConflictException"],"mappings":";;;;wBAA0C;wBACE;yBACR;yBACN;kCAC2B;wBAC9B;sCAEU;uCACC;AAEtCA,SAAS,yBAAyB;IAChC,IAAIC;IACJ,IAAIC;IAEJC,WAAW;QACT,MAAMC,SAAwB,MAAMC,aAAI,CAACC,mBAAmB,CAAC;YAC3DC,SAAS;gBACPC,oBAAY,CAACC,OAAO,CAACC,mCAAiB;gBACtCC,sBAAa,CAACC,YAAY,CAAC;oBACzBC,QAAQ;wBAACC,qBAAa;qBAAC;oBACvBC,MAAM;oBACNC,YAAY,OAAOC,gBAAiCC,IAAAA,uCAAqB,EAACD;gBAC5E;gBACAE,0CAAoB;aACrB;YACDC,WAAW;gBAACC,4CAAqB;gBAAEC,cAAM;aAAC;QAC5C,GAAGC,OAAO;QAEVrB,wBAAwBE,OAAOoB,GAAG,CAAwBH,4CAAqB;QAE/EpB,QAAQwB,IAAAA,kBAAU;IACpB;IAEAC,UAAU;QACR,MAAMxB,sBAAsByB,QAAQ;IACtC;IAEA3B,SAAS,kBAAkB;QACzB4B,GAAG,4BAA4B;YAC7B,MAAM1B,sBAAsB2B,cAAc,CAAC5B;YAE3C,MAAM6B,gBAAgB,MAAM5B,sBAAsB4B,aAAa,CAAC7B;YAEhE,aAAa;YACb8B,OAAOD,eAAeE,IAAI,CAAC;QAC7B;QAEAJ,GAAG,qDAAqD;YACtD,iCAAiC;YACjC,MAAM1B,sBAAsB2B,cAAc,CAAC5B;YAE3C,aAAa;YACb,MAAM8B,OAAO7B,sBAAsB2B,cAAc,CAAC5B,QAAQgC,OAAO,CAACC,OAAO,CAACC,yBAAiB;QAC7F;IACF;IAEAnC,SAAS,iBAAiB;QACxB4B,GAAG,uDAAuD;YACxD,MAAME,gBAAgB,MAAM5B,sBAAsB4B,aAAa,CAAC7B;YAEhE,aAAa;YACb8B,OAAOD,eAAeE,IAAI,CAAC;QAC7B;QAEAJ,GAAG,kDAAkD;YACnD,iCAAiC;YACjC,MAAM1B,sBAAsB2B,cAAc,CAAC5B;YAE3C,MAAM6B,gBAAgB,MAAM5B,sBAAsB4B,aAAa,CAAC7B;YAEhE,aAAa;YACb8B,OAAOD,eAAeE,IAAI,CAAC;QAC7B;IACF;IAEAhC,SAAS,YAAY;QACnB4B,GAAG,8CAA8C;YAC/C,iCAAiC;YACjC,MAAM1B,sBAAsB2B,cAAc,CAAC5B;YAE3C,mBAAmB;YACnB,MAAMC,sBAAsByB,QAAQ;YAEpC,aAAa;YACb,MAAMG,gBAAgB,MAAM5B,sBAAsB4B,aAAa,CAAC7B;YAChE8B,OAAOD,eAAeE,IAAI,CAAC;QAC7B;IACF;AACF"}