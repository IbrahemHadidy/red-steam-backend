{"version":3,"sources":["../../../../src/modules/services/dropbox/dropbox.service.ts"],"sourcesContent":["// NestJS\r\nimport { HttpException, Injectable, InternalServerErrorException, Logger } from '@nestjs/common';\r\nimport { ConfigService } from '@nestjs/config';\r\n\r\n// Dropbox\r\nimport { Dropbox } from 'dropbox';\r\n\r\n// Services\r\nimport { DropboxTokensService } from '@repositories/mongo/dropbox-tokens/dropbox-tokens.service';\r\n\r\n// Types\r\nimport type { OnModuleInit } from '@nestjs/common';\r\nimport type { DropboxToken } from '@repositories/mongo/dropbox-tokens/dropbox-token.entity';\r\n\r\n@Injectable()\r\nexport class DropboxService implements OnModuleInit {\r\n  private token: DropboxToken;\r\n  private lastUpdated: number = 0; // Last time the access token was updated\r\n  private retryUpdateCount: number = 0; // Number of retries for updating the access token\r\n  private readonly MAX_UPDATE_RETRIES: number = 3; // Maximum number of retries for updating the access token\r\n  private readonly TOKEN_REFRESH_INTERVAL: number = 60 * 60 * 1000; // Token refresh interval in milliseconds\r\n  private readonly clientId: string;\r\n  private readonly clientSecret: string;\r\n  private readonly refreshToken: string;\r\n  public dropboxClient: Dropbox;\r\n\r\n  constructor(\r\n    private readonly config: ConfigService,\r\n    private readonly logger: Logger,\r\n    private readonly tokenService: DropboxTokensService,\r\n  ) {\r\n    this.clientId = this.config.get<string>('DROPBOX_CLIENT_ID');\r\n    this.clientSecret = this.config.get<string>('DROPBOX_CLIENT_SECRET');\r\n    this.refreshToken = this.config.get<string>('DROPBOX_REFRESH_TOKEN');\r\n  }\r\n\r\n  /**\r\n   * Called when the module is initialized.\r\n   */\r\n  public async onModuleInit(): Promise<void> {\r\n    await this.initializeDropboxClient();\r\n  }\r\n\r\n  /**\r\n   * Checks if the mime type is valid based on allowed mime types.\r\n   * @param mimeType The mime type of the file\r\n   * @param allowedMimeTypes The allowed mime types\r\n   * @returns True if the mime type is valid, else false\r\n   */\r\n  public isValidMimeType(mimeType: string, allowedMimeTypes: string[]): boolean {\r\n    return allowedMimeTypes.some((pattern) => {\r\n      // Handle exact matches\r\n      if (pattern === mimeType) return true;\r\n\r\n      // Handle wildcard patterns\r\n      const regex = new RegExp('^' + pattern.replace('*', '.*') + '$');\r\n      return regex.test(mimeType);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Ensures that the access token is valid and refreshes it if needed.\r\n   */\r\n  public async ensureValidAccessToken(): Promise<void> {\r\n    const currentTime = Date.now();\r\n    if (currentTime - this.lastUpdated < this.TOKEN_REFRESH_INTERVAL) return;\r\n\r\n    try {\r\n      await this.updateTokens();\r\n      this.lastUpdated = currentTime;\r\n    } catch (error) {\r\n      this.logger.error('Failed to refresh token', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initializes the Dropbox client and checks if the access token is valid.\r\n   */\r\n  private async initializeDropboxClient(): Promise<void> {\r\n    this.logger.log('Initializing Dropbox client...');\r\n\r\n    // Get the tokens from the database\r\n    this.token = await this.tokenService.getToken();\r\n\r\n    if (this.token) {\r\n      // Ensure the access token is valid\r\n      await this.ensureValidAccessToken();\r\n\r\n      // Create the Dropbox client with the access token\r\n      this.dropboxClient = new Dropbox({\r\n        accessToken: this.token.accessToken,\r\n      });\r\n\r\n      this.logger.log('Dropbox client initialized');\r\n    } else {\r\n      this.logger.warn('No access token found. Attempting to refresh token...');\r\n\r\n      // If no access token is found, attempt to refresh it\r\n      while (this.retryUpdateCount < this.MAX_UPDATE_RETRIES) {\r\n        await this.updateTokens();\r\n\r\n        if (this.token) {\r\n          await this.initializeDropboxClient(); // Re-initialize the client if the token refresh was successful\r\n          this.retryUpdateCount = 0; // Reset retry count\r\n          break;\r\n        }\r\n\r\n        this.retryUpdateCount++;\r\n      }\r\n\r\n      throw new InternalServerErrorException('Failed to initialize Dropbox client after multiple attempts.');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the Dropbox tokens by refreshing the access token using the refresh token.\r\n   */\r\n  private async updateTokens(): Promise<void> {\r\n    this.logger.log('Updating access token...');\r\n\r\n    try {\r\n      // Make a request to the Dropbox API to refresh the access token\r\n      const url = 'https://api.dropbox.com/oauth2/token';\r\n      const params = new URLSearchParams({\r\n        refresh_token: this.refreshToken,\r\n        grant_type: 'refresh_token',\r\n        client_id: this.clientId,\r\n        client_secret: this.clientSecret,\r\n      });\r\n\r\n      const headers = {\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n      };\r\n\r\n      const response = await fetch(url, {\r\n        method: 'POST',\r\n        headers,\r\n        body: params.toString(),\r\n      });\r\n\r\n      // Extract the access token and refresh token from the response\r\n      const { access_token, expires_in } = await response.json();\r\n\r\n      // Create a new Dropbox client with the new access token\r\n      this.dropboxClient = new Dropbox({ accessToken: access_token });\r\n\r\n      // Create expiration date\r\n      const expirationDate = new Date(Date.now() + expires_in * 1000).getTime();\r\n\r\n      // Save the new tokens in the database\r\n      await this.tokenService.saveToken({\r\n        accessToken: access_token,\r\n        expirationTime: expirationDate,\r\n      });\r\n\r\n      this.logger.log('Tokens updated.');\r\n    } catch (error) {\r\n      // Log an error if the token refresh fails\r\n      if (error instanceof HttpException) {\r\n        throw new InternalServerErrorException('Failed to refresh Dropbox token', error.message);\r\n      } else {\r\n        throw new InternalServerErrorException('Failed to refresh Dropbox token', error);\r\n      }\r\n    }\r\n  }\r\n}\r\n"],"names":["DropboxService","constructor","config","logger","tokenService","lastUpdated","retryUpdateCount","MAX_UPDATE_RETRIES","TOKEN_REFRESH_INTERVAL","clientId","get","clientSecret","refreshToken","onModuleInit","initializeDropboxClient","isValidMimeType","mimeType","allowedMimeTypes","some","pattern","regex","RegExp","replace","test","ensureValidAccessToken","currentTime","Date","now","updateTokens","error","log","token","getToken","dropboxClient","Dropbox","accessToken","warn","InternalServerErrorException","url","params","URLSearchParams","refresh_token","grant_type","client_id","client_secret","headers","response","fetch","method","body","toString","access_token","expires_in","json","expirationDate","getTime","saveToken","expirationTime","HttpException","message"],"mappings":"AAAA,SAAS;;;;;+BAeIA;;;eAAAA;;;wBAdmE;wBAClD;yBAGN;sCAGa;;;;;;;;;;AAO9B,IAAA,AAAMA,iBAAN,MAAMA;IAWXC,YACE,AAAiBC,MAAqB,EACtC,AAAiBC,MAAc,EAC/B,AAAiBC,YAAkC,CACnD;aAHiBF,SAAAA;aACAC,SAAAA;aACAC,eAAAA;aAZXC,cAAsB;aACtBC,mBAA2B;aAClBC,qBAA6B;aAC7BC,yBAAiC,KAAK,KAAK;QAW1D,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACP,MAAM,CAACQ,GAAG,CAAS;QACxC,IAAI,CAACC,YAAY,GAAG,IAAI,CAACT,MAAM,CAACQ,GAAG,CAAS;QAC5C,IAAI,CAACE,YAAY,GAAG,IAAI,CAACV,MAAM,CAACQ,GAAG,CAAS;IAC9C;IAEA;;GAEC,GACD,MAAaG,eAA8B;QACzC,MAAM,IAAI,CAACC,uBAAuB;IACpC;IAEA;;;;;GAKC,GACD,AAAOC,gBAAgBC,QAAgB,EAAEC,gBAA0B,EAAW;QAC5E,OAAOA,iBAAiBC,IAAI,CAAC,CAACC;YAC5B,uBAAuB;YACvB,IAAIA,YAAYH,UAAU,OAAO;YAEjC,2BAA2B;YAC3B,MAAMI,QAAQ,IAAIC,OAAO,MAAMF,QAAQG,OAAO,CAAC,KAAK,QAAQ;YAC5D,OAAOF,MAAMG,IAAI,CAACP;QACpB;IACF;IAEA;;GAEC,GACD,MAAaQ,yBAAwC;QACnD,MAAMC,cAAcC,KAAKC,GAAG;QAC5B,IAAIF,cAAc,IAAI,CAACpB,WAAW,GAAG,IAAI,CAACG,sBAAsB,EAAE;QAElE,IAAI;YACF,MAAM,IAAI,CAACoB,YAAY;YACvB,IAAI,CAACvB,WAAW,GAAGoB;QACrB,EAAE,OAAOI,OAAO;YACd,IAAI,CAAC1B,MAAM,CAAC0B,KAAK,CAAC,2BAA2BA;YAC7C,MAAMA;QACR;IACF;IAEA;;GAEC,GACD,MAAcf,0BAAyC;QACrD,IAAI,CAACX,MAAM,CAAC2B,GAAG,CAAC;QAEhB,mCAAmC;QACnC,IAAI,CAACC,KAAK,GAAG,MAAM,IAAI,CAAC3B,YAAY,CAAC4B,QAAQ;QAE7C,IAAI,IAAI,CAACD,KAAK,EAAE;YACd,mCAAmC;YACnC,MAAM,IAAI,CAACP,sBAAsB;YAEjC,kDAAkD;YAClD,IAAI,CAACS,aAAa,GAAG,IAAIC,gBAAO,CAAC;gBAC/BC,aAAa,IAAI,CAACJ,KAAK,CAACI,WAAW;YACrC;YAEA,IAAI,CAAChC,MAAM,CAAC2B,GAAG,CAAC;QAClB,OAAO;YACL,IAAI,CAAC3B,MAAM,CAACiC,IAAI,CAAC;YAEjB,qDAAqD;YACrD,MAAO,IAAI,CAAC9B,gBAAgB,GAAG,IAAI,CAACC,kBAAkB,CAAE;gBACtD,MAAM,IAAI,CAACqB,YAAY;gBAEvB,IAAI,IAAI,CAACG,KAAK,EAAE;oBACd,MAAM,IAAI,CAACjB,uBAAuB,IAAI,+DAA+D;oBACrG,IAAI,CAACR,gBAAgB,GAAG,GAAG,oBAAoB;oBAC/C;gBACF;gBAEA,IAAI,CAACA,gBAAgB;YACvB;YAEA,MAAM,IAAI+B,oCAA4B,CAAC;QACzC;IACF;IAEA;;GAEC,GACD,MAAcT,eAA8B;QAC1C,IAAI,CAACzB,MAAM,CAAC2B,GAAG,CAAC;QAEhB,IAAI;YACF,gEAAgE;YAChE,MAAMQ,MAAM;YACZ,MAAMC,SAAS,IAAIC,gBAAgB;gBACjCC,eAAe,IAAI,CAAC7B,YAAY;gBAChC8B,YAAY;gBACZC,WAAW,IAAI,CAAClC,QAAQ;gBACxBmC,eAAe,IAAI,CAACjC,YAAY;YAClC;YAEA,MAAMkC,UAAU;gBACd,gBAAgB;YAClB;YAEA,MAAMC,WAAW,MAAMC,MAAMT,KAAK;gBAChCU,QAAQ;gBACRH;gBACAI,MAAMV,OAAOW,QAAQ;YACvB;YAEA,+DAA+D;YAC/D,MAAM,EAAEC,YAAY,EAAEC,UAAU,EAAE,GAAG,MAAMN,SAASO,IAAI;YAExD,wDAAwD;YACxD,IAAI,CAACpB,aAAa,GAAG,IAAIC,gBAAO,CAAC;gBAAEC,aAAagB;YAAa;YAE7D,yBAAyB;YACzB,MAAMG,iBAAiB,IAAI5B,KAAKA,KAAKC,GAAG,KAAKyB,aAAa,MAAMG,OAAO;YAEvE,sCAAsC;YACtC,MAAM,IAAI,CAACnD,YAAY,CAACoD,SAAS,CAAC;gBAChCrB,aAAagB;gBACbM,gBAAgBH;YAClB;YAEA,IAAI,CAACnD,MAAM,CAAC2B,GAAG,CAAC;QAClB,EAAE,OAAOD,OAAO;YACd,0CAA0C;YAC1C,IAAIA,iBAAiB6B,qBAAa,EAAE;gBAClC,MAAM,IAAIrB,oCAA4B,CAAC,mCAAmCR,MAAM8B,OAAO;YACzF,OAAO;gBACL,MAAM,IAAItB,oCAA4B,CAAC,mCAAmCR;YAC5E;QACF;IACF;AACF"}