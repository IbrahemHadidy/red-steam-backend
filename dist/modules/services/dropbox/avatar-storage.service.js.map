{"version":3,"sources":["../../../../src/modules/services/dropbox/avatar-storage.service.ts"],"sourcesContent":["// NestJS\r\nimport { Injectable, Logger } from '@nestjs/common';\r\nimport { ConfigService } from '@nestjs/config';\r\n\r\n// Exceptions\r\nimport { InvalidFileException } from '@exceptions/invalid-file.exception';\r\n\r\n// Services\r\nimport { DropboxService } from '@services/dropbox/dropbox.service';\r\n\r\n// Types\r\nimport type { File } from '@nest-lab/fastify-multer';\r\nimport type { Dropbox } from 'dropbox';\r\ninterface UploadResponse extends Dropbox {\r\n  sharedLink: string;\r\n}\r\n\r\n@Injectable()\r\nexport class AvatarStorageService {\r\n  private readonly avatarFolderPath: string;\r\n\r\n  constructor(\r\n    private readonly dbx: DropboxService,\r\n    private readonly config: ConfigService,\r\n    private readonly logger: Logger,\r\n  ) {\r\n    // Read avatar folder path from environment variable\r\n    this.avatarFolderPath = this.config.get<string>('DROPBOX_AVATAR_FOLDER_PATH');\r\n  }\r\n\r\n  /**\r\n   * Uploads an avatar to Dropbox\r\n   * @param avatar - The avatar file to upload\r\n   * @returns The upload response data\r\n   * @throws `InvalidFileException` - If the file type is not allowed\r\n   * @throws `InternalServerErrorException` - If there was an error uploading the avatar\r\n   */\r\n  public async uploadAvatar(avatar: File): Promise<Partial<UploadResponse>> {\r\n    // Ensure valid access token\r\n    await this.dbx.ensureValidAccessToken();\r\n\r\n    // Validate file type (adapt based on your requirements)\r\n    const allowedMimeTypes = ['image/jpeg', 'image/png', 'image/webp'];\r\n    if (!this.dbx.isValidMimeType(avatar.mimetype, allowedMimeTypes)) {\r\n      throw new InvalidFileException('Invalid file type. Only JPEG and PNG images allowed.');\r\n    }\r\n\r\n    // Validate file isn't empty\r\n    if (avatar.size === 0) {\r\n      throw new InvalidFileException('File is empty');\r\n    }\r\n\r\n    // Validate file size (adapt based on your requirements)\r\n    if (avatar.size > 5 * 1024 * 1024) {\r\n      throw new InvalidFileException('File is too large. Maximum size allowed is 5MB.');\r\n    }\r\n\r\n    // Prepare the file to be uploaded\r\n    const fileName = `avatar-${Date.now()}-${avatar.originalname}`;\r\n    const uploadPath = `${this.avatarFolderPath}/${fileName}`;\r\n\r\n    // Upload the file to Dropbox\r\n    const uploadResponse = await this.dbx.dropboxClient.filesUpload({\r\n      path: uploadPath,\r\n      contents: avatar.buffer,\r\n      mode: { '.tag': 'add' },\r\n    });\r\n\r\n    // Create a shared link for the uploaded file\r\n    const sharedLinkResponse = await this.dbx.dropboxClient.sharingCreateSharedLinkWithSettings({\r\n      path: uploadResponse.result.path_display,\r\n    });\r\n\r\n    // Log the success message\r\n    this.logger.log(`Avatar ${uploadResponse.result.id} uploaded successfully`);\r\n\r\n    // Return the upload response data\r\n    return {\r\n      ...uploadResponse.result,\r\n      sharedLink: sharedLinkResponse.result.url.replace('dl=0', 'raw=1'),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Deletes an avatar from Dropbox\r\n   * @param filePath - The path of the avatar file to delete\r\n   * @returns A promise that resolves when the avatar is deleted\r\n   */\r\n  public async deleteAvatar(filePath: string): Promise<void> {\r\n    // Ensure valid access token\r\n    await this.dbx.ensureValidAccessToken();\r\n\r\n    // Log the deletion message\r\n    this.logger.log(`Deleting avatar file: ${filePath}`);\r\n\r\n    // Delete the avatar file from Dropbox\r\n    await this.dbx.dropboxClient.filesDeleteV2({ path: filePath });\r\n\r\n    // Log the success message\r\n    this.logger.log(`Avatar ${filePath} deleted successfully`);\r\n  }\r\n}\r\n"],"names":["AvatarStorageService","constructor","dbx","config","logger","avatarFolderPath","get","uploadAvatar","avatar","ensureValidAccessToken","allowedMimeTypes","isValidMimeType","mimetype","InvalidFileException","size","fileName","Date","now","originalname","uploadPath","uploadResponse","dropboxClient","filesUpload","path","contents","buffer","mode","sharedLinkResponse","sharingCreateSharedLinkWithSettings","result","path_display","log","id","sharedLink","url","replace","deleteAvatar","filePath","filesDeleteV2"],"mappings":"AAAA,SAAS;;;;;+BAkBIA;;;eAAAA;;;wBAjBsB;wBACL;sCAGO;gCAGN;;;;;;;;;;AAUxB,IAAA,AAAMA,uBAAN,MAAMA;IAGXC,YACE,AAAiBC,GAAmB,EACpC,AAAiBC,MAAqB,EACtC,AAAiBC,MAAc,CAC/B;aAHiBF,MAAAA;aACAC,SAAAA;aACAC,SAAAA;QAEjB,oDAAoD;QACpD,IAAI,CAACC,gBAAgB,GAAG,IAAI,CAACF,MAAM,CAACG,GAAG,CAAS;IAClD;IAEA;;;;;;GAMC,GACD,MAAaC,aAAaC,MAAY,EAAoC;QACxE,4BAA4B;QAC5B,MAAM,IAAI,CAACN,GAAG,CAACO,sBAAsB;QAErC,wDAAwD;QACxD,MAAMC,mBAAmB;YAAC;YAAc;YAAa;SAAa;QAClE,IAAI,CAAC,IAAI,CAACR,GAAG,CAACS,eAAe,CAACH,OAAOI,QAAQ,EAAEF,mBAAmB;YAChE,MAAM,IAAIG,0CAAoB,CAAC;QACjC;QAEA,4BAA4B;QAC5B,IAAIL,OAAOM,IAAI,KAAK,GAAG;YACrB,MAAM,IAAID,0CAAoB,CAAC;QACjC;QAEA,wDAAwD;QACxD,IAAIL,OAAOM,IAAI,GAAG,IAAI,OAAO,MAAM;YACjC,MAAM,IAAID,0CAAoB,CAAC;QACjC;QAEA,kCAAkC;QAClC,MAAME,WAAW,CAAC,OAAO,EAAEC,KAAKC,GAAG,GAAG,CAAC,EAAET,OAAOU,YAAY,EAAE;QAC9D,MAAMC,aAAa,GAAG,IAAI,CAACd,gBAAgB,CAAC,CAAC,EAAEU,UAAU;QAEzD,6BAA6B;QAC7B,MAAMK,iBAAiB,MAAM,IAAI,CAAClB,GAAG,CAACmB,aAAa,CAACC,WAAW,CAAC;YAC9DC,MAAMJ;YACNK,UAAUhB,OAAOiB,MAAM;YACvBC,MAAM;gBAAE,QAAQ;YAAM;QACxB;QAEA,6CAA6C;QAC7C,MAAMC,qBAAqB,MAAM,IAAI,CAACzB,GAAG,CAACmB,aAAa,CAACO,mCAAmC,CAAC;YAC1FL,MAAMH,eAAeS,MAAM,CAACC,YAAY;QAC1C;QAEA,0BAA0B;QAC1B,IAAI,CAAC1B,MAAM,CAAC2B,GAAG,CAAC,CAAC,OAAO,EAAEX,eAAeS,MAAM,CAACG,EAAE,CAAC,sBAAsB,CAAC;QAE1E,kCAAkC;QAClC,OAAO;YACL,GAAGZ,eAAeS,MAAM;YACxBI,YAAYN,mBAAmBE,MAAM,CAACK,GAAG,CAACC,OAAO,CAAC,QAAQ;QAC5D;IACF;IAEA;;;;GAIC,GACD,MAAaC,aAAaC,QAAgB,EAAiB;QACzD,4BAA4B;QAC5B,MAAM,IAAI,CAACnC,GAAG,CAACO,sBAAsB;QAErC,2BAA2B;QAC3B,IAAI,CAACL,MAAM,CAAC2B,GAAG,CAAC,CAAC,sBAAsB,EAAEM,UAAU;QAEnD,sCAAsC;QACtC,MAAM,IAAI,CAACnC,GAAG,CAACmB,aAAa,CAACiB,aAAa,CAAC;YAAEf,MAAMc;QAAS;QAE5D,0BAA0B;QAC1B,IAAI,CAACjC,MAAM,CAAC2B,GAAG,CAAC,CAAC,OAAO,EAAEM,SAAS,qBAAqB,CAAC;IAC3D;AACF"}