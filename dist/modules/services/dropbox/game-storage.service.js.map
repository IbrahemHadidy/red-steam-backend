{"version":3,"sources":["../../../../src/modules/services/dropbox/game-storage.service.ts"],"sourcesContent":["// NestJS\r\nimport { BadRequestException, Injectable, Logger } from '@nestjs/common';\r\nimport { ConfigService } from '@nestjs/config';\r\n\r\n// Exceptions\r\nimport { InvalidFileException } from '@exceptions/invalid-file.exception';\r\n\r\n// Services\r\nimport { DropboxService } from '@services/dropbox/dropbox.service';\r\n\r\n// Types\r\nimport type { File } from '@nest-lab/fastify-multer';\r\nimport type { files } from 'dropbox';\r\ninterface UploadResponse extends files.FileMetadata {\r\n  sharedLink: string;\r\n}\r\ninterface RenameResponse extends files.RelocationResult {\r\n  sharedLink: string;\r\n}\r\n\r\n@Injectable()\r\nexport class GameStorageService {\r\n  private readonly gameFolderPath: string;\r\n\r\n  constructor(\r\n    private readonly dbx: DropboxService,\r\n    private readonly config: ConfigService,\r\n    private readonly logger: Logger,\r\n  ) {\r\n    // Read game folder path from environment variable\r\n    this.gameFolderPath = this.config.get<string>('DROPBOX_GAME_FOLDER_PATH');\r\n  }\r\n\r\n  /**\r\n   * Uploads a media file to Dropbox\r\n   * @param file - The media file to upload\r\n   * @param gameName - The name of the game\r\n   * @param fileName - The name of the file\r\n   * @param overwrite - Whether to overwrite the existing file\r\n   * @returns The upload response data\r\n   * @throws `BadRequestException` - If the input parameters are invalid\r\n   * @throws `InvalidFileException` - If the file type is not allowed\r\n   * @throws `InternalServerErrorException` - If there was an error uploading the media file\r\n   */\r\n  public async uploadFile(\r\n    file: File,\r\n    gameName: string,\r\n    fileName: string,\r\n    allowedMimeTypes: string[],\r\n    overwrite = false,\r\n  ): Promise<Partial<UploadResponse>> {\r\n    // Ensure valid access token\r\n    await this.dbx.ensureValidAccessToken();\r\n\r\n    // Validate input parameters\r\n    if (!gameName || !fileName) {\r\n      throw new BadRequestException('Invalid parameters: gameName and fileName are required');\r\n    }\r\n\r\n    // Validate file type (adapt based on your requirements)\r\n    if (!this.dbx.isValidMimeType(file.mimetype, allowedMimeTypes)) {\r\n      throw new InvalidFileException('Invalid file type.');\r\n    }\r\n\r\n    // Validate file isn't empty\r\n    if (file.size === 0) {\r\n      throw new InvalidFileException('File is empty');\r\n    }\r\n\r\n    // Validate video file size (adapt based on your requirements)\r\n    const MAXIMUM_SIZE = 150; // MBs\r\n    if (file.size > MAXIMUM_SIZE * 1024 * 1024) {\r\n      throw new InvalidFileException(`File is too large. Maximum size allowed is ${MAXIMUM_SIZE}MB`);\r\n    }\r\n\r\n    // Log the upload message\r\n    this.logger.log(`File ${file.originalname} uploaded to ${this.gameFolderPath}/${gameName}`);\r\n\r\n    // Prepare the file to be uploaded\r\n    const uploadPath = `${this.gameFolderPath}/${gameName}/${fileName}`;\r\n\r\n    // Upload the file to Dropbox\r\n    const uploadResponse = await this.dbx.dropboxClient.filesUpload({\r\n      path: uploadPath,\r\n      contents: file.buffer,\r\n      mode: { '.tag': overwrite ? 'overwrite' : 'add' },\r\n    });\r\n\r\n    // Create a shared link for the uploaded file\r\n    const sharedLinkResponse = await this.getSharedLink(uploadResponse.result.path_display);\r\n\r\n    // Log the success message\r\n    this.logger.log(`File ${uploadResponse.result.id} uploaded successfully`);\r\n\r\n    // Return the upload response data\r\n    return {\r\n      ...uploadResponse.result,\r\n      sharedLink: sharedLinkResponse,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Renames a game directory in Dropbox\r\n   * @param oldName - The name of the game to rename\r\n   * @param newName - The new name of the game\r\n   * @throws `BadRequestException` - If the input parameters are invalid\r\n   */\r\n  public async renameDirectory(gameName: string, oldName: string, newName: string): Promise<void> {\r\n    // Ensure valid access token\r\n    await this.dbx.ensureValidAccessToken();\r\n\r\n    // Validate input parameters\r\n    if (!gameName || !oldName || !newName) {\r\n      throw new BadRequestException('Invalid parameters: gameName, oldName, and newName are required.');\r\n    }\r\n\r\n    // Construct the path of the directory to rename\r\n    const oldPath = `${this.gameFolderPath}/${gameName}`;\r\n    const newPath = `${this.gameFolderPath}/${newName}`;\r\n\r\n    // Log the renaming message\r\n    this.logger.log(`Renaming game: ${oldPath} to ${newPath}`);\r\n\r\n    // Rename the directory in Dropbox\r\n    await this.dbx.dropboxClient.filesMoveV2({ from_path: oldPath, to_path: newPath });\r\n\r\n    // Log the success message\r\n    this.logger.log(`Game directory ${oldPath} renamed successfully to ${newPath}`);\r\n  }\r\n\r\n  /**\r\n   * Renames a file in Dropbox\r\n   * @param gameName - The name of the game\r\n   * @param oldName - The name of the file to rename\r\n   * @param newName - The new name of the file\r\n   */\r\n  public async renameFile(gameName: string, oldName: string, newName: string): Promise<Partial<RenameResponse>> {\r\n    // Ensure valid access token\r\n    await this.dbx.ensureValidAccessToken();\r\n\r\n    // Validate input parameters\r\n    if (!gameName || !oldName || !newName) {\r\n      throw new BadRequestException('Invalid parameters: gameName, oldName, and newName are required.');\r\n    }\r\n\r\n    // Construct the path of the file to rename\r\n    const oldPath = `${this.gameFolderPath}/${gameName}/${oldName}`;\r\n    const newPath = `${this.gameFolderPath}/${gameName}/${newName}`;\r\n\r\n    // Log the renaming message\r\n    this.logger.log(`Renaming file: ${oldPath} to ${newPath}`);\r\n\r\n    // Rename the file in Dropbox\r\n    const remameResponse = await this.dbx.dropboxClient.filesMoveV2({ from_path: oldPath, to_path: newPath });\r\n\r\n    // Log the success message\r\n    this.logger.log(`File ${oldPath} renamed to ${newPath} successfully`);\r\n\r\n    // Create a shared link for the uploaded file\r\n    const sharedLinkResponse = await this.getSharedLink(remameResponse.result.metadata.path_display);\r\n\r\n    return {\r\n      ...remameResponse.result.metadata,\r\n      sharedLink: sharedLinkResponse,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Deletes a directory from Dropbox\r\n   * @param gameName - The name of the game to delete\r\n   * @returns A promise that resolves when the directory is deleted\r\n   * @throws `BadRequestException` - If the input parameters are invalid\r\n   */\r\n  public async deleteGame(gameName: string): Promise<void> {\r\n    // Ensure valid access token\r\n    await this.dbx.ensureValidAccessToken();\r\n\r\n    // Validate input parameters\r\n    if (!gameName) {\r\n      throw new BadRequestException('Invalid parameters: gameName is required');\r\n    }\r\n\r\n    // Construct the path of the directory to delete\r\n    const directoryPath = `${this.gameFolderPath}/${gameName}`;\r\n\r\n    // Log the deletion message\r\n    this.logger.log(`Deleting directory: ${directoryPath}`);\r\n\r\n    // Delete the directory from Dropbox\r\n    await this.dbx.dropboxClient.filesDeleteV2({ path: directoryPath });\r\n\r\n    // Log the success message\r\n    this.logger.log(`Directory ${directoryPath} deleted successfully`);\r\n  }\r\n\r\n  /**\r\n   * Deletes a file from Game Storage\r\n   * @param gameName - The name of the game\r\n   * @param filePath - The path of the file to delete\r\n   * @returns A promise that resolves when the file is deleted\r\n   * @throws `BadRequestException` - If the input parameters are invalid\r\n   */\r\n  public async deleteFile(gameName: string, filePath: string): Promise<void> {\r\n    // Ensure valid access token\r\n    await this.dbx.ensureValidAccessToken();\r\n\r\n    // Validate input parameters\r\n    if (!gameName || !filePath) {\r\n      throw new BadRequestException('Invalid parameters: gameName and filePath are required');\r\n    }\r\n\r\n    // Construct the path of the file to delete\r\n    const filePathToDelete = `${this.gameFolderPath}/${gameName}/${filePath}`;\r\n\r\n    // Log the deletion message\r\n    this.logger.log(`Deleting file: ${filePathToDelete}`);\r\n\r\n    // Delete the file from Dropbox\r\n    await this.dbx.dropboxClient.filesDeleteV2({ path: filePathToDelete });\r\n\r\n    // Log the success message\r\n    this.logger.log(`File ${filePath} deleted successfully`);\r\n  }\r\n\r\n  /**\r\n   * Creates a shared link for a file in Dropbox\r\n   * @param path - The path of the file\r\n   * @returns A promise that resolves with the shared link\r\n   */\r\n  private async getSharedLink(path: string): Promise<string> {\r\n    let sharedLinkResponse: string;\r\n\r\n    // Try to list existing shared links\r\n    const existingLinks = await this.dbx.dropboxClient.sharingListSharedLinks({ path });\r\n\r\n    if (existingLinks.result.links.length > 0) {\r\n      // If a shared link exists, use the first one\r\n      sharedLinkResponse = existingLinks.result.links[0].url;\r\n    } else {\r\n      // If no shared link exists, create a new one\r\n      sharedLinkResponse = (await this.dbx.dropboxClient.sharingCreateSharedLinkWithSettings({ path })).result.url;\r\n    }\r\n\r\n    // Return the shared link with the raw=1 query parameter\r\n    return sharedLinkResponse.replace('dl=0', 'raw=1');\r\n  }\r\n}\r\n"],"names":["GameStorageService","constructor","dbx","config","logger","gameFolderPath","get","uploadFile","file","gameName","fileName","allowedMimeTypes","overwrite","ensureValidAccessToken","BadRequestException","isValidMimeType","mimetype","InvalidFileException","size","MAXIMUM_SIZE","log","originalname","uploadPath","uploadResponse","dropboxClient","filesUpload","path","contents","buffer","mode","sharedLinkResponse","getSharedLink","result","path_display","id","sharedLink","renameDirectory","oldName","newName","oldPath","newPath","filesMoveV2","from_path","to_path","renameFile","remameResponse","metadata","deleteGame","directoryPath","filesDeleteV2","deleteFile","filePath","filePathToDelete","existingLinks","sharingListSharedLinks","links","length","url","sharingCreateSharedLinkWithSettings","replace"],"mappings":"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"}