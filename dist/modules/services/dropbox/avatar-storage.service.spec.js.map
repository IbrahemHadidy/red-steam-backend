{"version":3,"sources":["../../../../src/modules/services/dropbox/avatar-storage.service.spec.ts"],"sourcesContent":["import fs from 'fs';\r\nimport path from 'path';\r\nimport { Test, TestingModule } from '@nestjs/testing';\r\nimport { Logger } from '@nestjs/common';\r\nimport { ConfigModule, ConfigService } from '@nestjs/config';\r\n\r\nimport { DropboxModule } from '@services/dropbox/dropbox.module';\r\nimport { AvatarStorageService } from '@services/dropbox/avatar-storage.service';\r\n\r\nimport { InvalidFileException } from '@exceptions/invalid-file.exception';\r\n\r\n// Types\r\nimport type { File } from '@nest-lab/fastify-multer';\r\n\r\ndescribe('AvatarStorageService', () => {\r\n  let avatarStorageService: AvatarStorageService;\r\n  let logger: Logger;\r\n\r\n  beforeAll(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      imports: [\r\n        ConfigModule.forRoot({\r\n          isGlobal: true,\r\n          envFilePath: [\r\n            `src/common/configs/environments/.env.${process.env.NODE_ENV}.local`,\r\n            `src/common/configs/environments/.env.${process.env.NODE_ENV}`,\r\n            'src/common/configs/environments/.env',\r\n          ],\r\n        }),\r\n        DropboxModule,\r\n      ],\r\n      providers: [AvatarStorageService, Logger, ConfigService],\r\n    }).compile();\r\n\r\n    avatarStorageService = module.get<AvatarStorageService>(AvatarStorageService);\r\n    logger = module.get<Logger>(Logger);\r\n  });\r\n\r\n  afterEach(async () => {\r\n    jest.clearAllMocks();\r\n    cleanupTestFiles();\r\n  });\r\n\r\n  afterAll(() => {\r\n    cleanupTestFiles();\r\n  });\r\n\r\n  function cleanupTestFiles() {\r\n    const testFilesDir = path.resolve(__dirname);\r\n    const filesToDelete = ['test.png', 'test.gif'];\r\n\r\n    filesToDelete.forEach((fileName) => {\r\n      const filePath = path.join(testFilesDir, fileName);\r\n      if (fs.existsSync(filePath)) {\r\n        fs.unlinkSync(filePath);\r\n      }\r\n    });\r\n  }\r\n\r\n  describe('uploadAvatar', () => {\r\n    it('should upload avatar successfully', async () => {\r\n      const filePath = path.resolve(__dirname, 'test.png');\r\n      const fileContent = Buffer.from([1, 2, 3]);\r\n\r\n      // Create a test file if it doesn't exist\r\n      if (!fs.existsSync(filePath)) {\r\n        fs.writeFileSync(filePath, fileContent);\r\n      }\r\n\r\n      const file: File = {\r\n        fieldname: 'avatar',\r\n        originalname: 'avatar.png',\r\n        encoding: '7bit',\r\n        mimetype: 'image/png',\r\n        size: fileContent.length,\r\n        buffer: fileContent,\r\n        path: filePath,\r\n      };\r\n\r\n      const result = await avatarStorageService.uploadAvatar(file);\r\n\r\n      // Assertions\r\n      expect(result.sharedLink).toBeDefined();\r\n    });\r\n\r\n    it('should throw an error if the file type is not allowed', async () => {\r\n      const filePath = path.resolve(__dirname, 'test.gif');\r\n      const fileContent = Buffer.from('test');\r\n\r\n      // Create a test file\r\n      if (!fs.existsSync(filePath)) {\r\n        fs.writeFileSync(filePath, fileContent);\r\n      }\r\n\r\n      const file: File = {\r\n        fieldname: 'avatar',\r\n        originalname: 'avatar.gif',\r\n        encoding: '7bit',\r\n        mimetype: 'image/gif',\r\n        size: fileContent.length,\r\n        buffer: fileContent,\r\n        path: filePath,\r\n      };\r\n\r\n      // Assertions\r\n      await expect(avatarStorageService.uploadAvatar(file)).rejects.toThrow(InvalidFileException);\r\n    });\r\n  });\r\n\r\n  describe('deleteAvatar', () => {\r\n    it('should delete avatar successfully', async () => {\r\n      // Mock the logger\r\n      const loggerSpy = jest.spyOn(logger, 'log');\r\n\r\n      const filePath = path.resolve(__dirname, 'test.png');\r\n      const fileContent = Buffer.from([1, 2, 3]);\r\n\r\n      // Create a test file\r\n      if (!fs.existsSync(filePath)) {\r\n        fs.writeFileSync(filePath, fileContent);\r\n      }\r\n\r\n      const file: File = {\r\n        fieldname: 'avatar',\r\n        originalname: 'avatar.png',\r\n        encoding: '7bit',\r\n        mimetype: 'image/png',\r\n        size: fileContent.length,\r\n        buffer: fileContent,\r\n        path: filePath,\r\n      };\r\n\r\n      const result = await avatarStorageService.uploadAvatar(file);\r\n      const avatarId = result.sharedLink.split('/avatar-')[1].split('?')[0];\r\n\r\n      await avatarStorageService.deleteAvatar(avatarId);\r\n\r\n      // Assertions\r\n      expect(loggerSpy).toHaveBeenCalledWith(`Avatar ${avatarId} deleted successfully`);\r\n    });\r\n  });\r\n});"],"names":["describe","avatarStorageService","logger","beforeAll","module","Test","createTestingModule","imports","ConfigModule","forRoot","isGlobal","envFilePath","process","env","NODE_ENV","DropboxModule","providers","AvatarStorageService","Logger","ConfigService","compile","get","afterEach","jest","clearAllMocks","cleanupTestFiles","afterAll","testFilesDir","path","resolve","__dirname","filesToDelete","forEach","fileName","filePath","join","fs","existsSync","unlinkSync","it","fileContent","Buffer","from","writeFileSync","file","fieldname","originalname","encoding","mimetype","size","length","buffer","result","uploadAvatar","expect","sharedLink","toBeDefined","rejects","toThrow","InvalidFileException","loggerSpy","spyOn","avatarId","split","deleteAvatar","toHaveBeenCalledWith"],"mappings":"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"}