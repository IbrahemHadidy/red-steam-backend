{"version":3,"sources":["../../../../src/modules/services/paypal/paypal.service.spec.ts"],"sourcesContent":["import { Logger } from '@nestjs/common';\r\nimport { ConfigModule, ConfigService } from '@nestjs/config';\r\nimport { Test, TestingModule } from '@nestjs/testing';\r\nimport { PaypalModule } from '@services/paypal/paypal.module';\r\nimport { PaypalService } from '@services/paypal/paypal.service';\r\n\r\ndescribe('PaypalService', () => {\r\n  let paymentService: PaypalService;\r\n\r\n  beforeAll(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      imports: [\r\n        ConfigModule.forRoot({\r\n          isGlobal: true,\r\n          envFilePath: [\r\n            `src/common/configs/environments/.env.${process.env.NODE_ENV}.local`,\r\n            `src/common/configs/environments/.env.${process.env.NODE_ENV}`,\r\n            'src/common/configs/environments/.env',\r\n          ],\r\n        }),\r\n        PaypalModule,\r\n      ],\r\n      providers: [PaypalService, ConfigService, Logger],\r\n    }).compile();\r\n\r\n    paymentService = module.get<PaypalService>(PaypalService);\r\n  });\r\n\r\n  describe('createOrder', () => {\r\n    it('should create order', async () => {\r\n      const order = await paymentService.createOrder('10');\r\n\r\n      // Assertions\r\n      expect(order).toBeDefined();\r\n    });\r\n  });\r\n\r\n  describe('captureOrder', () => {\r\n    it('should capture order after manual approval', async () => {\r\n      // Create order\r\n      const createdOrder = await paymentService.createOrder('10');\r\n\r\n      // Get approval URL\r\n      const approvalUrl = createdOrder.links.find((link: { rel: string }) => link.rel === 'approve').href;\r\n\r\n      // Log the approval URL and wait for manual approval\r\n      console.log(\r\n        '\\x1b[33m%s\\x1b[0m',\r\n        `\r\n                \\x1b[33m╔═══════════════════════════════════════════════════════════════════════╗\r\n                ║                                                                       ║\r\n                ║  \\x1b[1m\\x1b[4mPlease manually approve the order by visiting the following URL:\\x1b[0m\\x1b[33m     ║\r\n                ║                                                                       ║\r\n                ║  \\x1b[34m\\x1b[1m${approvalUrl}\\x1b[0m\\x1b[33m   ║\r\n                ║                                                                       ║\r\n                ║  \\x1b[1m\\x1b[4mUse the following credentials for approval:\\x1b[0m\\x1b[33m                          ║\r\n                ║  \\x1b[1mBuyer Email:\\x1b[0m \\x1b[32msb-gc21b29998568@business.example.com\\x1b[33m                   ║\r\n                ║  \\x1b[1mBuyer Password:\\x1b[0m \\x1b[32m';>7GL;d\\x1b[33m                                             ║\r\n                ║                                                                       ║\r\n                ║  \\x1b[1m\\x1b[31mYou have 1 minute to approve the order, else the test will fail.\\x1b[0m\\x1b[33m     ║\r\n                ║                                                                       ║\r\n                ╚═══════════════════════════════════════════════════════════════════════╝\\x1b[0m\r\n        `,\r\n      );\r\n\r\n\r\n      // Wait for manual approval (adjust the timeout as necessary)\r\n      await new Promise((resolve) => setTimeout(resolve, 60000)); // Wait for 1 minute\r\n\r\n      // Capture order after manual approval\r\n      const capturedOrder = await paymentService.captureOrder(createdOrder.id);\r\n\r\n      // Assertions\r\n      expect(capturedOrder).toBeDefined();\r\n      expect(capturedOrder.status).toBeDefined();\r\n      expect(capturedOrder.orderId).toBeDefined();\r\n      expect(capturedOrder.payerName).toBeDefined();\r\n    }, 90000);\r\n  });\r\n});\r\n"],"names":["describe","paymentService","beforeAll","module","Test","createTestingModule","imports","ConfigModule","forRoot","isGlobal","envFilePath","process","env","NODE_ENV","PaypalModule","providers","PaypalService","ConfigService","Logger","compile","get","it","order","createOrder","expect","toBeDefined","createdOrder","approvalUrl","links","find","link","rel","href","console","log","Promise","resolve","setTimeout","capturedOrder","captureOrder","id","status","orderId","payerName"],"mappings":";;;;wBAAuB;wBACqB;yBACR;8BACP;+BACC;AAE9BA,SAAS,iBAAiB;IACxB,IAAIC;IAEJC,UAAU;QACR,MAAMC,SAAwB,MAAMC,aAAI,CAACC,mBAAmB,CAAC;YAC3DC,SAAS;gBACPC,oBAAY,CAACC,OAAO,CAAC;oBACnBC,UAAU;oBACVC,aAAa;wBACX,CAAC,qCAAqC,EAAEC,QAAQC,GAAG,CAACC,QAAQ,CAAC,MAAM,CAAC;wBACpE,CAAC,qCAAqC,EAAEF,QAAQC,GAAG,CAACC,QAAQ,EAAE;wBAC9D;qBACD;gBACH;gBACAC,0BAAY;aACb;YACDC,WAAW;gBAACC,4BAAa;gBAAEC,qBAAa;gBAAEC,cAAM;aAAC;QACnD,GAAGC,OAAO;QAEVlB,iBAAiBE,OAAOiB,GAAG,CAAgBJ,4BAAa;IAC1D;IAEAhB,SAAS,eAAe;QACtBqB,GAAG,uBAAuB;YACxB,MAAMC,QAAQ,MAAMrB,eAAesB,WAAW,CAAC;YAE/C,aAAa;YACbC,OAAOF,OAAOG,WAAW;QAC3B;IACF;IAEAzB,SAAS,gBAAgB;QACvBqB,GAAG,8CAA8C;YAC/C,eAAe;YACf,MAAMK,eAAe,MAAMzB,eAAesB,WAAW,CAAC;YAEtD,mBAAmB;YACnB,MAAMI,cAAcD,aAAaE,KAAK,CAACC,IAAI,CAAC,CAACC,OAA0BA,KAAKC,GAAG,KAAK,WAAWC,IAAI;YAEnG,oDAAoD;YACpDC,QAAQC,GAAG,CACT,qBACA,CAAC;;;;;kCAKyB,EAAEP,YAAY;;;;;;;;;QASxC,CAAC;YAIH,6DAA6D;YAC7D,MAAM,IAAIQ,QAAQ,CAACC,UAAYC,WAAWD,SAAS,SAAS,oBAAoB;YAEhF,sCAAsC;YACtC,MAAME,gBAAgB,MAAMrC,eAAesC,YAAY,CAACb,aAAac,EAAE;YAEvE,aAAa;YACbhB,OAAOc,eAAeb,WAAW;YACjCD,OAAOc,cAAcG,MAAM,EAAEhB,WAAW;YACxCD,OAAOc,cAAcI,OAAO,EAAEjB,WAAW;YACzCD,OAAOc,cAAcK,SAAS,EAAElB,WAAW;QAC7C,GAAG;IACL;AACF"}