{"version":3,"sources":["../../../../src/modules/services/paypal/paypal.service.ts"],"sourcesContent":["// NestJS\r\nimport { Injectable, Logger } from '@nestjs/common';\r\nimport { ConfigService } from '@nestjs/config';\r\n\r\n// Paypal\r\nimport { CheckoutPaymentIntent, Client, Environment, LogLevel, OrdersController } from '@paypal/paypal-server-sdk';\r\n\r\n// Types\r\nimport type { Order } from '@paypal/paypal-server-sdk';\r\n\r\n@Injectable()\r\nexport class PaypalService {\r\n  private readonly client: Client;\r\n  private readonly ordersController: OrdersController;\r\n\r\n  constructor(\r\n    private readonly configService: ConfigService,\r\n    private readonly logger: Logger,\r\n  ) {\r\n    const clientId = this.configService.get<string>('PAYPAL_CLIENT_ID');\r\n    const clientSecret = this.configService.get<string>('PAYPAL_CLIENT_SECRET');\r\n    const environmentType = this.configService.get<string>('NODE_ENV');\r\n\r\n    let environment: Environment;\r\n\r\n    // if (environmentType === 'production') {\r\n    //   environment = Environment.Production;\r\n    // } else {\r\n    //   environment = Environment.Sandbox;\r\n    // }\r\n    environment = Environment.Sandbox;\r\n\r\n    this.client = new Client({\r\n      clientCredentialsAuthCredentials: {\r\n        oAuthClientId: clientId,\r\n        oAuthClientSecret: clientSecret,\r\n      },\r\n      timeout: 0,\r\n      environment,\r\n      logging: {\r\n        logLevel: LogLevel.Info,\r\n        logRequest: {\r\n          logBody: true,\r\n        },\r\n        logResponse: {\r\n          logHeaders: true,\r\n        },\r\n      },\r\n    });\r\n\r\n    this.ordersController = new OrdersController(this.client);\r\n  }\r\n\r\n  /**\r\n   * Create order\r\n   * @param totalPrice\r\n   * @returns Order response\r\n   */\r\n  async createOrder(totalPrice: string): Promise<Order> {\r\n    // Log the initiation of the order creation process\r\n    this.logger.log(`Creating PayPal order for user with ID ${totalPrice}`);\r\n\r\n    // Create request body\r\n    const collect = {\r\n      body: {\r\n        intent: CheckoutPaymentIntent.Capture,\r\n        purchaseUnits: [\r\n          {\r\n            amount: {\r\n              currencyCode: 'USD',\r\n              value: totalPrice,\r\n            },\r\n          },\r\n        ],\r\n      },\r\n      prefer: 'return=representation',\r\n    };\r\n\r\n    // Send request\r\n    const { result } = await this.ordersController.ordersCreate(collect);\r\n\r\n    // Log the successful order creation\r\n    this.logger.log(`PayPal order created successfully for user with ID ${totalPrice}`);\r\n\r\n    // Return order\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Capture order\r\n   * @param orderId Order ID\r\n   * @returns An object containing the captured order status, order ID, and payer's name\r\n   */\r\n  async captureOrder(orderId: string): Promise<{ status: string; orderId: string; payerName: string }> {\r\n    // Log the initiation of the order capture process\r\n    this.logger.log(`Capturing PayPal order with ID: ${orderId}`);\r\n\r\n    // Create request body\r\n    const collect = {\r\n      id: orderId,\r\n      prefer: 'return=representation',\r\n    };\r\n\r\n    // Send request\r\n    const capture = await this.ordersController.ordersCapture(collect);\r\n\r\n    // Extract data from response\r\n    const responseData = capture.result;\r\n\r\n    // Extract payer's name\r\n    const payerName = responseData.payer.name.givenName;\r\n\r\n    // Log the captured order status, order ID, and payer's name\r\n    this.logger.log('PayPal capture response status:', responseData.status);\r\n    this.logger.log('PayPal capture response order ID:', responseData.id);\r\n    this.logger.log('PayPal capture response payer name:', responseData.payer.name.givenName);\r\n\r\n    // Return captured order status, payer's name, and order ID\r\n    return {\r\n      status: responseData.status,\r\n      orderId: responseData.id,\r\n      payerName,\r\n    };\r\n  }\r\n}\r\n"],"names":["PaypalService","constructor","configService","logger","clientId","get","clientSecret","environmentType","environment","Environment","Sandbox","client","Client","clientCredentialsAuthCredentials","oAuthClientId","oAuthClientSecret","timeout","logging","logLevel","LogLevel","Info","logRequest","logBody","logResponse","logHeaders","ordersController","OrdersController","createOrder","totalPrice","log","collect","body","intent","CheckoutPaymentIntent","Capture","purchaseUnits","amount","currencyCode","value","prefer","result","ordersCreate","captureOrder","orderId","id","capture","ordersCapture","responseData","payerName","payer","name","givenName","status"],"mappings":"AAAA,SAAS;;;;;+BAWIA;;;eAAAA;;;wBAVsB;wBACL;iCAGyD;;;;;;;;;;AAMhF,IAAA,AAAMA,gBAAN,MAAMA;IAIXC,YACE,AAAiBC,aAA4B,EAC7C,AAAiBC,MAAc,CAC/B;aAFiBD,gBAAAA;aACAC,SAAAA;QAEjB,MAAMC,WAAW,IAAI,CAACF,aAAa,CAACG,GAAG,CAAS;QAChD,MAAMC,eAAe,IAAI,CAACJ,aAAa,CAACG,GAAG,CAAS;QACpD,MAAME,kBAAkB,IAAI,CAACL,aAAa,CAACG,GAAG,CAAS;QAEvD,IAAIG;QAEJ,0CAA0C;QAC1C,0CAA0C;QAC1C,WAAW;QACX,uCAAuC;QACvC,IAAI;QACJA,cAAcC,4BAAW,CAACC,OAAO;QAEjC,IAAI,CAACC,MAAM,GAAG,IAAIC,uBAAM,CAAC;YACvBC,kCAAkC;gBAChCC,eAAeV;gBACfW,mBAAmBT;YACrB;YACAU,SAAS;YACTR;YACAS,SAAS;gBACPC,UAAUC,yBAAQ,CAACC,IAAI;gBACvBC,YAAY;oBACVC,SAAS;gBACX;gBACAC,aAAa;oBACXC,YAAY;gBACd;YACF;QACF;QAEA,IAAI,CAACC,gBAAgB,GAAG,IAAIC,iCAAgB,CAAC,IAAI,CAACf,MAAM;IAC1D;IAEA;;;;GAIC,GACD,MAAMgB,YAAYC,UAAkB,EAAkB;QACpD,mDAAmD;QACnD,IAAI,CAACzB,MAAM,CAAC0B,GAAG,CAAC,CAAC,uCAAuC,EAAED,YAAY;QAEtE,sBAAsB;QACtB,MAAME,UAAU;YACdC,MAAM;gBACJC,QAAQC,sCAAqB,CAACC,OAAO;gBACrCC,eAAe;oBACb;wBACEC,QAAQ;4BACNC,cAAc;4BACdC,OAAOV;wBACT;oBACF;iBACD;YACH;YACAW,QAAQ;QACV;QAEA,eAAe;QACf,MAAM,EAAEC,MAAM,EAAE,GAAG,MAAM,IAAI,CAACf,gBAAgB,CAACgB,YAAY,CAACX;QAE5D,oCAAoC;QACpC,IAAI,CAAC3B,MAAM,CAAC0B,GAAG,CAAC,CAAC,mDAAmD,EAAED,YAAY;QAElF,eAAe;QACf,OAAOY;IACT;IAEA;;;;GAIC,GACD,MAAME,aAAaC,OAAe,EAAmE;QACnG,kDAAkD;QAClD,IAAI,CAACxC,MAAM,CAAC0B,GAAG,CAAC,CAAC,gCAAgC,EAAEc,SAAS;QAE5D,sBAAsB;QACtB,MAAMb,UAAU;YACdc,IAAID;YACJJ,QAAQ;QACV;QAEA,eAAe;QACf,MAAMM,UAAU,MAAM,IAAI,CAACpB,gBAAgB,CAACqB,aAAa,CAAChB;QAE1D,6BAA6B;QAC7B,MAAMiB,eAAeF,QAAQL,MAAM;QAEnC,uBAAuB;QACvB,MAAMQ,YAAYD,aAAaE,KAAK,CAACC,IAAI,CAACC,SAAS;QAEnD,4DAA4D;QAC5D,IAAI,CAAChD,MAAM,CAAC0B,GAAG,CAAC,mCAAmCkB,aAAaK,MAAM;QACtE,IAAI,CAACjD,MAAM,CAAC0B,GAAG,CAAC,qCAAqCkB,aAAaH,EAAE;QACpE,IAAI,CAACzC,MAAM,CAAC0B,GAAG,CAAC,uCAAuCkB,aAAaE,KAAK,CAACC,IAAI,CAACC,SAAS;QAExF,2DAA2D;QAC3D,OAAO;YACLC,QAAQL,aAAaK,MAAM;YAC3BT,SAASI,aAAaH,EAAE;YACxBI;QACF;IACF;AACF"}