{"version":3,"sources":["../../../../src/modules/services/database/database.service.ts"],"sourcesContent":["// NestJS\r\nimport { Injectable, Logger } from '@nestjs/common';\r\nimport { ConfigService } from '@nestjs/config';\r\n\r\n// TypeORM\r\nimport { DataSource, DataSourceOptions } from 'typeorm';\r\n\r\n// Entities\r\nimport { DropboxToken } from '@repositories/mongo/dropbox-tokens/dropbox-token.entity';\r\nimport { BlacklistedToken } from '@repositories/mongo/token-blacklist/blacklisted-token.entity';\r\nimport { Developer, Publisher } from '@repositories/sql/companies/company.entity';\r\nimport { GameFeature } from '@repositories/sql/games-features/game-feature.entity';\r\nimport { GameLanguage } from '@repositories/sql/games-languages/game-language.entity';\r\nimport { GamePricing } from '@repositories/sql/games-pricing/game-pricing.entity';\r\nimport { GameTag } from '@repositories/sql/games-tags/game-tag.entity';\r\nimport { Game } from '@repositories/sql/games/game.entity';\r\nimport { Review } from '@repositories/sql/reviews/review.entity';\r\nimport { User } from '@repositories/sql/users/user.entity';\r\n\r\n@Injectable()\r\nexport class DatabaseService {\r\n  constructor(\r\n    private readonly configService: ConfigService,\r\n    private readonly logger: Logger,\r\n  ) {}\r\n\r\n  public getPostgresTypeOrmConfig(): DataSourceOptions {\r\n    const postgresOptions: DataSourceOptions = {\r\n      name: 'sql',\r\n      type: 'postgres',\r\n      url: this.configService.get<string>('POSTGRESQL_URI'),\r\n      entities: [Publisher, Developer, GameFeature, GameLanguage, GamePricing, GameTag, Review, Game, User],\r\n      migrations: ['dist/migrations/sql/**/*.js'],\r\n      synchronize: true,\r\n      // TODO: Add cache\r\n      // cache: {\r\n      //   type: 'redis',\r\n      //   options: {\r\n      //     socket: {\r\n      //       host: this.configService.get<string>('REDIS_HOST'),\r\n      //       port: this.configService.get<number>('REDIS_PORT'),\r\n      //       password: this.configService.get<string>('REDIS_PASSWORD'),\r\n      //     },\r\n      //   },\r\n      // },\r\n    };\r\n\r\n    this.logger.log('PostgreSQL TypeORM config initialized');\r\n    return postgresOptions;\r\n  }\r\n\r\n  public getMongoTypeOrmConfig(): DataSourceOptions {\r\n    const mongoOptions: DataSourceOptions = {\r\n      name: 'mongo',\r\n      type: 'mongodb',\r\n      url: this.configService.get<string>('MONGODB_URI'),\r\n      entities: [BlacklistedToken, DropboxToken],\r\n      migrations: ['dist/migrations/mongo/**/*.js'],\r\n      synchronize: true,\r\n      // TODO: Add cache\r\n      // cache: {\r\n      //   type: 'redis',\r\n      //   options: {\r\n      //     socket: {\r\n      //       host: this.configService.get<string>('REDIS_HOST'),\r\n      //       port: this.configService.get<number>('REDIS_PORT'),\r\n      //       password: this.configService.get<string>('REDIS_PASSWORD'),\r\n      //     },\r\n      //   },\r\n      // },\r\n    };\r\n\r\n    this.logger.log('MongoDB TypeORM config initialized');\r\n    return mongoOptions;\r\n  }\r\n\r\n  public async getPostgresDataSource(): Promise<DataSource> {\r\n    const postgresDataSource = new DataSource(this.getPostgresTypeOrmConfig());\r\n    await postgresDataSource.initialize();\r\n\r\n    this.logger.log('PostgreSQL datasource initialized');\r\n    return postgresDataSource;\r\n  }\r\n\r\n  public async getMongoDataSource(): Promise<DataSource> {\r\n    const mongoDataSource = new DataSource(this.getMongoTypeOrmConfig());\r\n    await mongoDataSource.initialize();\r\n\r\n    this.logger.log('MongoDB datasource initialized');\r\n    return mongoDataSource;\r\n  }\r\n}\r\n"],"names":["DatabaseService","constructor","configService","logger","getPostgresTypeOrmConfig","postgresOptions","name","type","url","get","entities","Publisher","Developer","GameFeature","GameLanguage","GamePricing","GameTag","Review","Game","User","migrations","synchronize","log","getMongoTypeOrmConfig","mongoOptions","BlacklistedToken","DropboxToken","getPostgresDataSource","postgresDataSource","DataSource","initialize","getMongoDataSource","mongoDataSource"],"mappings":"AAAA,SAAS;;;;;+BAoBIA;;;eAAAA;;;wBAnBsB;wBACL;yBAGgB;oCAGjB;wCACI;+BACI;mCACT;oCACC;mCACD;+BACJ;4BACH;8BACE;4BACF;;;;;;;;;;AAGd,IAAA,AAAMA,kBAAN,MAAMA;IACXC,YACE,AAAiBC,aAA4B,EAC7C,AAAiBC,MAAc,CAC/B;aAFiBD,gBAAAA;aACAC,SAAAA;IAChB;IAEIC,2BAA8C;QACnD,MAAMC,kBAAqC;YACzCC,MAAM;YACNC,MAAM;YACNC,KAAK,IAAI,CAACN,aAAa,CAACO,GAAG,CAAS;YACpCC,UAAU;gBAACC,wBAAS;gBAAEC,wBAAS;gBAAEC,8BAAW;gBAAEC,gCAAY;gBAAEC,8BAAW;gBAAEC,sBAAO;gBAAEC,oBAAM;gBAAEC,gBAAI;gBAAEC,gBAAI;aAAC;YACrGC,YAAY;gBAAC;aAA8B;YAC3CC,aAAa;QAYf;QAEA,IAAI,CAAClB,MAAM,CAACmB,GAAG,CAAC;QAChB,OAAOjB;IACT;IAEOkB,wBAA2C;QAChD,MAAMC,eAAkC;YACtClB,MAAM;YACNC,MAAM;YACNC,KAAK,IAAI,CAACN,aAAa,CAACO,GAAG,CAAS;YACpCC,UAAU;gBAACe,wCAAgB;gBAAEC,gCAAY;aAAC;YAC1CN,YAAY;gBAAC;aAAgC;YAC7CC,aAAa;QAYf;QAEA,IAAI,CAAClB,MAAM,CAACmB,GAAG,CAAC;QAChB,OAAOE;IACT;IAEA,MAAaG,wBAA6C;QACxD,MAAMC,qBAAqB,IAAIC,mBAAU,CAAC,IAAI,CAACzB,wBAAwB;QACvE,MAAMwB,mBAAmBE,UAAU;QAEnC,IAAI,CAAC3B,MAAM,CAACmB,GAAG,CAAC;QAChB,OAAOM;IACT;IAEA,MAAaG,qBAA0C;QACrD,MAAMC,kBAAkB,IAAIH,mBAAU,CAAC,IAAI,CAACN,qBAAqB;QACjE,MAAMS,gBAAgBF,UAAU;QAEhC,IAAI,CAAC3B,MAAM,CAACmB,GAAG,CAAC;QAChB,OAAOU;IACT;AACF"}