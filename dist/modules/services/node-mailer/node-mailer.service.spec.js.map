{"version":3,"sources":["../../../../src/modules/services/node-mailer/node-mailer.service.spec.ts"],"sourcesContent":["import { Logger } from '@nestjs/common';\r\nimport { ConfigModule, ConfigService } from '@nestjs/config';\r\nimport { Test, TestingModule } from '@nestjs/testing';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\n\r\n// Modules\r\nimport { MailerModule } from '@nestjs-modules/mailer';\r\nimport { CompaniesModule } from '@repositories/sql/companies/companies.module';\r\nimport { GamesFeaturesModule } from '@repositories/sql/games-features/games-features.module';\r\nimport { GamesLanguagesModule } from '@repositories/sql/games-languages/games-languages.module';\r\nimport { GamesPricingModule } from '@repositories/sql/games-pricing/games-pricing.module';\r\nimport { GamesTagsModule } from '@repositories/sql/games-tags/games-tags.module';\r\nimport { GamesModule } from '@repositories/sql/games/games.module';\r\nimport { NodeMailerModule } from '@services/node-mailer/node-mailer.module';\r\n\r\n// Services\r\nimport { CompaniesService } from '@repositories/sql/companies/companies.service';\r\nimport { GamesFeaturesService } from '@repositories/sql/games-features/games-features.service';\r\nimport { GamesPricingService } from '@repositories/sql/games-pricing/games-pricing.service';\r\nimport { GamesTagsService } from '@repositories/sql/games-tags/games-tags.service';\r\nimport { GamesService } from '@repositories/sql/games/games.service';\r\nimport { NodeMailerService } from '@services/node-mailer/node-mailer.service';\r\n\r\n// Entities\r\nimport { Developer, Publisher } from '@repositories/sql/companies/company.entity';\r\nimport { GameFeature } from '@repositories/sql/games-features/game-feature.entity';\r\nimport { GamePricing } from '@repositories/sql/games-pricing/game-pricing.entity';\r\nimport { GameTag } from '@repositories/sql/games-tags/game-tag.entity';\r\nimport { Game } from '@repositories/sql/games/game.entity';\r\nimport { Review } from '@repositories/sql/reviews/review.entity';\r\nimport { User } from '@repositories/sql/users/user.entity';\r\n\r\ndescribe('NodeMailerService', () => {\r\n  let mailer: NodeMailerService;\r\n  let logger: Logger;\r\n  let loggerSpy: jest.SpyInstance;\r\n\r\n  let game: Game;\r\n  let game2: Game;\r\n  let gamesService: GamesService;\r\n\r\n  beforeAll(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      imports: [\r\n        ConfigModule.forRoot({\r\n          isGlobal: true,\r\n          envFilePath: [\r\n            `src/common/configs/environments/.env.${process.env.NODE_ENV}.local`,\r\n            `src/common/configs/environments/.env.${process.env.NODE_ENV}`,\r\n            'src/common/configs/environments/.env',\r\n          ],\r\n        }),\r\n        MailerModule.forRootAsync({\r\n          imports: [ConfigModule],\r\n          useFactory: async (configService: ConfigService) => ({\r\n            transport: {\r\n              service: 'gmail',\r\n              host: 'smtp.gmail.com',\r\n              secure: false, // Set to true if using SSL/TLS\r\n              auth: {\r\n                user: configService.get<string>('SMTP_USER'),\r\n                pass: configService.get<string>('SMTP_PASSWORD'),\r\n              },\r\n            },\r\n          }),\r\n          inject: [ConfigService],\r\n        }),\r\n        TypeOrmModule.forRootAsync({\r\n          inject: [ConfigService],\r\n          name: 'sql',\r\n          useFactory: async (configService: ConfigService) => ({\r\n            type: 'postgres',\r\n            url: configService.get<string>('POSTGRESQL_URI'),\r\n            entities: [Publisher, Developer, GameFeature, GamePricing, GameTag, Review, User, Game],\r\n            synchronize: true,\r\n            autoLoadEntities: true,\r\n          }),\r\n        }),\r\n        GamesPricingModule,\r\n        GamesModule,\r\n        CompaniesModule,\r\n        GamesFeaturesModule,\r\n        GamesTagsModule,\r\n        GamesLanguagesModule,\r\n        NodeMailerModule,\r\n      ],\r\n      providers: [\r\n        NodeMailerService,\r\n        Logger,\r\n        ConfigService,\r\n        GamesPricingService,\r\n        GamesService,\r\n        CompaniesService,\r\n        GamesFeaturesService,\r\n        GamesTagsService,\r\n        Logger,\r\n      ],\r\n    }).compile();\r\n\r\n    gamesService = module.get<GamesService>(GamesService);\r\n    mailer = module.get<NodeMailerService>(NodeMailerService);\r\n    logger = module.get<Logger>(Logger);\r\n\r\n    game = await gamesService.create({\r\n      name: 'Test Game',\r\n      category: 'Test Category',\r\n      description: 'Test Description',\r\n      releaseDate: new Date('2022-01-01'),\r\n      publishers: [],\r\n      developers: [],\r\n      thumbnailEntries: {\r\n        mainImage: null,\r\n        backgroundImage: null,\r\n        menuImg: null,\r\n        horizontalHeaderImage: null,\r\n        verticalHeaderImage: null,\r\n        smallHeaderImage: null,\r\n        searchImage: null,\r\n        tabImage: null,\r\n      },\r\n      imageEntries: [],\r\n      videoEntries: [],\r\n      tags: [],\r\n      pricing: {\r\n        free: false,\r\n      },\r\n      features: [],\r\n      platformEntries: {\r\n        win: true,\r\n        mac: false,\r\n      },\r\n      link: 'Test Link',\r\n      about: 'Test About',\r\n      mature: false,\r\n      matureDescription: 'Test Mature Description',\r\n      systemRequirements: {\r\n        mini: {},\r\n        recommended: {},\r\n      },\r\n      legal: 'Test Legal',\r\n      featured: false,\r\n      languages: [],\r\n    });\r\n\r\n    game2 = await gamesService.create({\r\n      name: 'Test Game2',\r\n      category: 'Test Category',\r\n      description: 'Test Description',\r\n      releaseDate: new Date('2022-01-02'),\r\n      publishers: [],\r\n      developers: [],\r\n      thumbnailEntries: {\r\n        mainImage: null,\r\n        backgroundImage: null,\r\n        menuImg: null,\r\n        horizontalHeaderImage: null,\r\n        verticalHeaderImage: null,\r\n        smallHeaderImage: null,\r\n        searchImage: null,\r\n        tabImage: null,\r\n      },\r\n      imageEntries: [],\r\n      videoEntries: [],\r\n      tags: [],\r\n      pricing: {\r\n        free: false,\r\n      },\r\n      features: [],\r\n      platformEntries: {\r\n        win: true,\r\n        mac: false,\r\n      },\r\n      link: 'Test Link',\r\n      about: 'Test About',\r\n      mature: false,\r\n      matureDescription: 'Test Mature Description',\r\n      systemRequirements: {\r\n        mini: {},\r\n        recommended: {},\r\n      },\r\n      legal: 'Test Legal',\r\n      languages: [],\r\n      featured: false,\r\n    });\r\n  });\r\n\r\n  beforeEach(() => {\r\n    loggerSpy = jest.spyOn(logger, 'log');\r\n  });\r\n\r\n  afterEach(() => {\r\n    loggerSpy.mockRestore();\r\n  });\r\n\r\n  describe('sendVerificationEmail', () => {\r\n    it('should send the verification email', async () => {\r\n      const email = 'w9GhsdgawtgkI@example.com';\r\n      const username = 'testuser';\r\n      const verificationToken = 'verificationToken';\r\n\r\n      await mailer.sendVerificationEmail(email, username, verificationToken);\r\n      expect(loggerSpy).toHaveBeenCalledWith(`Verification email sent to ${email}`);\r\n    });\r\n  });\r\n\r\n  describe('sendPasswordResetEmail', () => {\r\n    it('should send the password reset email', async () => {\r\n      const email = 'w9GhsdgawtgkI@example.com';\r\n      const username = 'testuser';\r\n      const resetToken = 'resetToken';\r\n\r\n      await mailer.sendPasswordResetEmail(email, username, resetToken);\r\n      expect(loggerSpy).toHaveBeenCalledWith(`Password reset email sent to ${email}`);\r\n    });\r\n  });\r\n\r\n  describe('sendPaymentConfirmationEmail', () => {\r\n    it('should send the payment confirmation email', async () => {\r\n      const email = 'w9GhsdgawtgkI@example.com';\r\n      const data = {\r\n        orderId: 'paymentId',\r\n        accountName: 'accountName',\r\n        games: [game, game2],\r\n      };\r\n\r\n      await mailer.sendPaymentConfirmationEmail(email, data);\r\n      expect(loggerSpy).toHaveBeenCalledWith(`Payment confirmation email sent to ${email}`);\r\n    });\r\n  });\r\n});\r\n"],"names":["describe","mailer","logger","loggerSpy","game","game2","gamesService","beforeAll","module","Test","createTestingModule","imports","ConfigModule","forRoot","isGlobal","envFilePath","process","env","NODE_ENV","MailerModule","forRootAsync","useFactory","configService","transport","service","host","secure","auth","user","get","pass","inject","ConfigService","TypeOrmModule","name","type","url","entities","Publisher","Developer","GameFeature","GamePricing","GameTag","Review","User","Game","synchronize","autoLoadEntities","GamesPricingModule","GamesModule","CompaniesModule","GamesFeaturesModule","GamesTagsModule","GamesLanguagesModule","NodeMailerModule","providers","NodeMailerService","Logger","GamesPricingService","GamesService","CompaniesService","GamesFeaturesService","GamesTagsService","compile","create","category","description","releaseDate","Date","publishers","developers","thumbnailEntries","mainImage","backgroundImage","menuImg","horizontalHeaderImage","verticalHeaderImage","smallHeaderImage","searchImage","tabImage","imageEntries","videoEntries","tags","pricing","free","features","platformEntries","win","mac","link","about","mature","matureDescription","systemRequirements","mini","recommended","legal","featured","languages","beforeEach","jest","spyOn","afterEach","mockRestore","it","email","username","verificationToken","sendVerificationEmail","expect","toHaveBeenCalledWith","resetToken","sendPasswordResetEmail","data","orderId","accountName","games","sendPaymentConfirmationEmail"],"mappings":"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"}