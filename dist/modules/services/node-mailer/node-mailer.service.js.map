{"version":3,"sources":["../../../../src/modules/services/node-mailer/node-mailer.service.ts"],"sourcesContent":["// NestJS\r\nimport { Injectable, Logger } from '@nestjs/common';\r\nimport { ConfigService } from '@nestjs/config';\r\n\r\n// DecimalJS\r\nimport Decimal from 'decimal.js';\r\n\r\n// Services\r\nimport { MailerService } from '@nestjs-modules/mailer';\r\n\r\n// Templates\r\nimport { emailVerification } from '@services/node-mailer/templates/email-verification';\r\nimport { passwordReset } from '@services/node-mailer/templates/password-reset';\r\nimport { gameCard, paymentConfirmation } from '@services/node-mailer/templates/payment-confirmation';\r\n\r\n// Types\r\nimport type { Game } from '@repositories/sql/games/game.entity';\r\n\r\n@Injectable()\r\nexport class NodeMailerService {\r\n  private readonly email: string;\r\n  private readonly baseUrl: string;\r\n  private readonly frontUrl: string;\r\n\r\n  constructor(\r\n    private readonly config: ConfigService,\r\n    private readonly mailer: MailerService,\r\n    private readonly logger: Logger,\r\n  ) {\r\n    this.email = `Red Steam ${this.config.get('SMTP_USER')}`;\r\n    this.baseUrl = this.config.get('BASE_URL');\r\n    this.frontUrl = this.config.get('FRONT_URL');\r\n  }\r\n\r\n  /**\r\n   * Sends a verification email\r\n   * @param to The email address of the recipient\r\n   * @param verificationToken The verification token\r\n   */\r\n  public async sendVerificationEmail(to: string, username: string, verificationToken: string): Promise<void> {\r\n    // Log the initiation of the email verification process\r\n    this.logger.log(`Sending verification email to ${to}`);\r\n\r\n    // Send verification email\r\n    await this.sendEmail(to, 'Verify Your Email Address', emailVerification(verificationToken, username));\r\n\r\n    // Log that a verification email has been sent to the specified address\r\n    this.logger.log(`Verification email sent to ${to}`);\r\n  }\r\n\r\n  /**\r\n   * Sends a password reset email\r\n   * @param to The email address of the recipient\r\n   * @param username The username of the user\r\n   * @param resetToken The reset token\r\n   */\r\n  public async sendPasswordResetEmail(to: string, username: string, resetToken: string): Promise<void> {\r\n    // Log the initiation of the password reset process\r\n    this.logger.log(`Sending password reset email to ${to}`);\r\n\r\n    // Send password reset email\r\n    await this.sendEmail(to, 'Red Steam Password Reset', passwordReset(resetToken, username));\r\n\r\n    // Log that a password reset email has been sent to the specified address\r\n    this.logger.log(`Password reset email sent to ${to}`);\r\n  }\r\n\r\n  /**\r\n   * Sends a payment confirmation email\r\n   * @param to The email address of the recipient\r\n   * @param orderId The order id\r\n   * @param data The data of the payment (order id, account name, games)\r\n   */\r\n  public async sendPaymentConfirmationEmail(\r\n    to: string,\r\n    data: { orderId: string; accountName: string; games: Game[] },\r\n  ): Promise<void> {\r\n    // Log the initiation of the payment confirmation email\r\n    this.logger.log(`Sending payment confirmation email to ${to}`);\r\n\r\n    // Generate the game cards for the email\r\n    const gameCards = data.games.map((game) => {\r\n      const gameImage = game.thumbnailEntries?.tabImage;\r\n      return gameCard(\r\n        game.name,\r\n        game.pricing.discount ? game.pricing.discountPrice : game.pricing.basePrice,\r\n        gameImage,\r\n      );\r\n    });\r\n\r\n    // Get the current date and format it\r\n    const currentDate = new Date().toISOString();\r\n\r\n    // Calculate the total price\r\n    const totalPrice = data.games\r\n      .reduce((total: Decimal, game: Game) => {\r\n        const price = new Decimal(game.pricing.discount ? game.pricing.discountPrice : game.pricing.basePrice);\r\n        return total.plus(price);\r\n      }, new Decimal(0))\r\n      .toFixed(2);\r\n\r\n    // Replace the placeholders in the template\r\n    const emailContent = paymentConfirmation(\r\n      data.accountName,\r\n      data.orderId,\r\n      currentDate,\r\n      totalPrice,\r\n      gameCards.join(''),\r\n    );\r\n\r\n    // Send payment confirmation email\r\n    await this.sendEmail(to, 'Payment Confirmation', emailContent);\r\n\r\n    // Log success\r\n    this.logger.log(`Payment confirmation email sent to ${to}`);\r\n  }\r\n\r\n  /**\r\n   * Sends an email\r\n   * @param to The email address of the recipient\r\n   * @param subject The subject of the email\r\n   * @param html The HTML content of the email\r\n   * @throws `InternalServerErrorException` If there is an error sending the email\r\n   */\r\n  private async sendEmail(to: string, subject: string, html: string): Promise<void> {\r\n    await this.mailer.sendMail({\r\n      from: this.email,\r\n      to,\r\n      subject,\r\n      html: html.replace(/{BASE_URL}/g, this.baseUrl).replace(/{FRONT_URL}/g, this.frontUrl),\r\n    });\r\n  }\r\n}\r\n"],"names":["NodeMailerService","constructor","config","mailer","logger","email","get","baseUrl","frontUrl","sendVerificationEmail","to","username","verificationToken","log","sendEmail","emailVerification","sendPasswordResetEmail","resetToken","passwordReset","sendPaymentConfirmationEmail","data","gameCards","games","map","game","gameImage","thumbnailEntries","tabImage","gameCard","name","pricing","discount","discountPrice","basePrice","currentDate","Date","toISOString","totalPrice","reduce","total","price","Decimal","plus","toFixed","emailContent","paymentConfirmation","accountName","orderId","join","subject","html","sendMail","from","replace"],"mappings":"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"}