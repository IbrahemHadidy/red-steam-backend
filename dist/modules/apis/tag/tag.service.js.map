{"version":3,"sources":["../../../../src/modules/apis/tag/tag.service.ts"],"sourcesContent":["// NestJS\r\nimport { Injectable, Logger } from '@nestjs/common';\r\n\r\n// Services\r\nimport { GamesTagsService } from '@repositories/sql/games-tags/games-tags.service';\r\n\r\n// Types\r\nimport type { GameTag } from '@repositories/sql/games-tags/game-tag.entity';\r\n\r\n@Injectable()\r\nexport class TagService {\r\n  constructor(\r\n    private readonly logger: Logger,\r\n    private readonly tag: GamesTagsService,\r\n  ) {}\r\n\r\n  /**\r\n   * Create a new tag\r\n   * @param data - The name and website of the tag\r\n   * @returns A message indicating the success of the creation\r\n   */\r\n  public async createTag(data: { name: string }): Promise<{ message: string }> {\r\n    const { name } = data;\r\n    this.logger.log(`Creating tag with name ${name}`);\r\n\r\n    // Create the tag\r\n    await this.tag.create(name);\r\n\r\n    // Send the response\r\n    return { message: 'Tag created successfully' };\r\n  }\r\n\r\n  /**\r\n   * Get Tag by ID\r\n   * @param id\r\n   * @returns The tag\r\n   */\r\n  public async getTag(id: number): Promise<GameTag> {\r\n    this.logger.log(`Retrieving tag with ID ${id}`);\r\n\r\n    // Send the response\r\n    return this.tag.getById(id);\r\n  }\r\n\r\n  /**\r\n   * Get tags by IDs\r\n   * @param ids\r\n   * @returns An array of tags\r\n   */\r\n  public async getTags(ids: number[]): Promise<GameTag[]> {\r\n    this.logger.log(`Retrieving tags with IDs ${ids}`);\r\n\r\n    // Send the response\r\n    return this.tag.getByIds(ids);\r\n  }\r\n\r\n  /**\r\n   * Get all tags\r\n   * @returns An array of all tags\r\n   */\r\n  public async getAllTags(): Promise<GameTag[]> {\r\n    this.logger.log(`Retrieving all tags`);\r\n\r\n    // Send the response\r\n    return this.tag.getAll('id', 'ASC');\r\n  }\r\n\r\n  /**\r\n   * Get paginated tags\r\n   * @param page - The current page number\r\n   * @param limit - The number of items per page\r\n   * @param orderBy - The column to order by\r\n   * @param order - The order direction\r\n   * @param searchQuery - The search query\r\n   * @returns The paginated tags and the total number of tags\r\n   */\r\n  public async getTagsPaginated(\r\n    page: number,\r\n    limit: number,\r\n    orderBy: 'id' | 'name',\r\n    order: 'ASC' | 'DESC',\r\n    searchQuery: { name?: string },\r\n  ): Promise<{ items: GameTag[]; total: number; totalPages: number }> {\r\n    this.logger.log(\r\n      `Retrieving tags, page: ${page}, limit: ${limit}, order by: ${orderBy}, order: ${order}, search query: ${JSON.stringify(searchQuery)}`,\r\n    );\r\n\r\n    // Send the response\r\n    return await this.tag.getTagsPaginated(page, limit, orderBy, order, searchQuery);\r\n  }\r\n\r\n  /**\r\n   * Update tag\r\n   * @param id - The ID of the tag\r\n   * @param data - The new data for the tag\r\n   * @returns The updated tag\r\n   */\r\n  public async updateTag(id: number, data: { name?: string; icon?: string }): Promise<{ message: string }> {\r\n    const { name } = data;\r\n    this.logger.log(`Updating tag with ID ${id}`);\r\n\r\n    // Update the tag\r\n    await this.tag.update(id, name);\r\n\r\n    // Send the response\r\n    return { message: 'tag updated successfully' };\r\n  }\r\n\r\n  /**\r\n   * Delete tag\r\n   * @param id - The ID of the tag\r\n   * @returns A message indicating the success of the delete\r\n   */\r\n  public async deleteTag(id: number): Promise<{ message: string }> {\r\n    this.logger.log(`Deleting tag with ID ${id}`);\r\n\r\n    // Delete the tag\r\n    await this.tag.removeById(id);\r\n\r\n    // Send the response\r\n    return { message: 'Tag deleted successfully' };\r\n  }\r\n}\r\n"],"names":["TagService","constructor","logger","tag","createTag","data","name","log","create","message","getTag","id","getById","getTags","ids","getByIds","getAllTags","getAll","getTagsPaginated","page","limit","orderBy","order","searchQuery","JSON","stringify","updateTag","update","deleteTag","removeById"],"mappings":"AAAA,SAAS;;;;;+BAUIA;;;eAAAA;;;wBATsB;kCAGF;;;;;;;;;;AAM1B,IAAA,AAAMA,aAAN,MAAMA;IACXC,YACE,AAAiBC,MAAc,EAC/B,AAAiBC,GAAqB,CACtC;aAFiBD,SAAAA;aACAC,MAAAA;IAChB;IAEH;;;;GAIC,GACD,MAAaC,UAAUC,IAAsB,EAAgC;QAC3E,MAAM,EAAEC,IAAI,EAAE,GAAGD;QACjB,IAAI,CAACH,MAAM,CAACK,GAAG,CAAC,CAAC,uBAAuB,EAAED,MAAM;QAEhD,iBAAiB;QACjB,MAAM,IAAI,CAACH,GAAG,CAACK,MAAM,CAACF;QAEtB,oBAAoB;QACpB,OAAO;YAAEG,SAAS;QAA2B;IAC/C;IAEA;;;;GAIC,GACD,MAAaC,OAAOC,EAAU,EAAoB;QAChD,IAAI,CAACT,MAAM,CAACK,GAAG,CAAC,CAAC,uBAAuB,EAAEI,IAAI;QAE9C,oBAAoB;QACpB,OAAO,IAAI,CAACR,GAAG,CAACS,OAAO,CAACD;IAC1B;IAEA;;;;GAIC,GACD,MAAaE,QAAQC,GAAa,EAAsB;QACtD,IAAI,CAACZ,MAAM,CAACK,GAAG,CAAC,CAAC,yBAAyB,EAAEO,KAAK;QAEjD,oBAAoB;QACpB,OAAO,IAAI,CAACX,GAAG,CAACY,QAAQ,CAACD;IAC3B;IAEA;;;GAGC,GACD,MAAaE,aAAiC;QAC5C,IAAI,CAACd,MAAM,CAACK,GAAG,CAAC,CAAC,mBAAmB,CAAC;QAErC,oBAAoB;QACpB,OAAO,IAAI,CAACJ,GAAG,CAACc,MAAM,CAAC,MAAM;IAC/B;IAEA;;;;;;;;GAQC,GACD,MAAaC,iBACXC,IAAY,EACZC,KAAa,EACbC,OAAsB,EACtBC,KAAqB,EACrBC,WAA8B,EACoC;QAClE,IAAI,CAACrB,MAAM,CAACK,GAAG,CACb,CAAC,uBAAuB,EAAEY,KAAK,SAAS,EAAEC,MAAM,YAAY,EAAEC,QAAQ,SAAS,EAAEC,MAAM,gBAAgB,EAAEE,KAAKC,SAAS,CAACF,cAAc;QAGxI,oBAAoB;QACpB,OAAO,MAAM,IAAI,CAACpB,GAAG,CAACe,gBAAgB,CAACC,MAAMC,OAAOC,SAASC,OAAOC;IACtE;IAEA;;;;;GAKC,GACD,MAAaG,UAAUf,EAAU,EAAEN,IAAsC,EAAgC;QACvG,MAAM,EAAEC,IAAI,EAAE,GAAGD;QACjB,IAAI,CAACH,MAAM,CAACK,GAAG,CAAC,CAAC,qBAAqB,EAAEI,IAAI;QAE5C,iBAAiB;QACjB,MAAM,IAAI,CAACR,GAAG,CAACwB,MAAM,CAAChB,IAAIL;QAE1B,oBAAoB;QACpB,OAAO;YAAEG,SAAS;QAA2B;IAC/C;IAEA;;;;GAIC,GACD,MAAamB,UAAUjB,EAAU,EAAgC;QAC/D,IAAI,CAACT,MAAM,CAACK,GAAG,CAAC,CAAC,qBAAqB,EAAEI,IAAI;QAE5C,iBAAiB;QACjB,MAAM,IAAI,CAACR,GAAG,CAAC0B,UAAU,CAAClB;QAE1B,oBAAoB;QACpB,OAAO;YAAEF,SAAS;QAA2B;IAC/C;AACF"}