{"version":3,"sources":["../../../../../src/modules/apis/user/payment/payment.service.ts"],"sourcesContent":["// NestJS\r\nimport { BadRequestException, Injectable, Logger } from '@nestjs/common';\r\n\r\n// DecimalJS\r\nimport Decimal from 'decimal.js';\r\n\r\n// Services\r\nimport { GamesService } from '@repositories/sql/games/games.service';\r\nimport { NodeMailerService } from '@services/node-mailer/node-mailer.service';\r\nimport { PaypalService } from '@services/paypal/paypal.service';\r\n\r\nimport { UserService } from '@apis/user/user.service'; // Api service (The Extended Service)\r\nimport { UsersService } from '@repositories/sql/users/users.service'; // Repository service (The Injected Service)\r\n\r\n// Types\r\nimport type { Game } from '@repositories/sql/games/game.entity';\r\n\r\n@Injectable()\r\nexport class PaymentService {\r\n  constructor(\r\n    private readonly userTools: UserService,\r\n    private readonly user: UsersService,\r\n    private readonly mailer: NodeMailerService,\r\n    private readonly logger: Logger,\r\n    private readonly game: GamesService,\r\n    private readonly payment: PaypalService,\r\n  ) {}\r\n\r\n  /**\r\n   * Create a new order.\r\n   * @param data An object containing the userId, totalPrice, and cartItems\r\n   * @returns An object containing the orderId and orderData (userId, totalPrice, and cartItems)\r\n   * @throws `BadRequestException` If any of the cart items are already in the user's library\r\n   * @throws `UnauthorizedException` If user is not verified\r\n   */\r\n  public async createOrder(data: { userId: string; totalPrice: string; cartItems: number[] }): Promise<{\r\n    orderId: string;\r\n    approvalUrl: string;\r\n    orderData: { userId: string; totalPrice: string; cartItems: number[] };\r\n  }> {\r\n    const { userId, totalPrice, cartItems } = data;\r\n\r\n    this.logger.log(`Creating order for user with ID: ${userId}`);\r\n\r\n    // Check if some items do not exist\r\n    await this.game.getByIds(cartItems);\r\n\r\n    // Recalculate total price\r\n    await this.calculatePrice(cartItems, totalPrice);\r\n\r\n    // Check and get user\r\n    const user = await this.userTools.findUser(userId, 'id');\r\n\r\n    // Checks user verification status\r\n    await this.userTools.checkVerified(user);\r\n\r\n    // Check if any of the cart items are already in the user's library\r\n    if (user.library.some((game) => cartItems.includes(game.id))) {\r\n      this.logger.error(`Games with IDs ${cartItems} are already in the user's library`);\r\n      throw new BadRequestException(`Games with IDs ${cartItems} are already in the user's library`);\r\n    }\r\n\r\n    // Create order\r\n    const order = await this.payment.createOrder(totalPrice);\r\n\r\n    // Return order data\r\n    this.logger.log(`Order created with ID: ${order.id}`);\r\n    return {\r\n      orderId: order.id,\r\n      approvalUrl: order.links[1].href,\r\n      orderData: { userId, totalPrice, cartItems },\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Capture an order\r\n   * @param data An object containing the orderId and userId\r\n   * @returns An object containing the captured order status, order ID, and payer's name\r\n   */\r\n  public async captureOrder(data: {\r\n    orderId: string;\r\n    userId: string;\r\n    cartItems: number[];\r\n  }): Promise<{ status: string; orderId: string; payerName: string }> {\r\n    const { orderId, userId, cartItems } = data;\r\n\r\n    this.logger.log(`Capturing order with ID: ${orderId}`);\r\n\r\n    // Check and get user\r\n    const user = await this.userTools.findUser(userId, 'id');\r\n\r\n    // Get games\r\n    const games = await this.game.getByIds(cartItems);\r\n\r\n    // Checks user verification status\r\n    await this.userTools.checkVerified(user);\r\n\r\n    // Capture order\r\n    const capturedOrder = await this.payment.captureOrder(orderId);\r\n\r\n    // Return captured order\r\n    this.logger.log(`Order captured with status: ${capturedOrder.status}`);\r\n\r\n    // Update user library\r\n    await this.user.addItemsToLibrary(userId, cartItems);\r\n\r\n    // Update game sales\r\n    await this.game.updateSales(cartItems);\r\n\r\n    // Send email\r\n    await this.mailer.sendPaymentConfirmationEmail(user.email, {\r\n      orderId,\r\n      accountName: user.username,\r\n      games,\r\n    });\r\n\r\n    return capturedOrder;\r\n  }\r\n\r\n  /**\r\n   * Calculate the total price of the cart items\r\n   * @param cartItems An array of cart items ids\r\n   * @param totalPrice The total price of the cart\r\n   * @throws `BadRequestException` If total price does not match calculated price\r\n   */\r\n  private async calculatePrice(cartItems: number[], totalPrice: string): Promise<void> {\r\n    this.logger.log(`Calculating total price of cart items`);\r\n\r\n    // Recalculate total price\r\n    const games = await this.game.getByIds(cartItems);\r\n    const calculatedPrice = games\r\n      .reduce((total: Decimal, game: Game) => {\r\n        const price = new Decimal(game.pricing.discount ? game.pricing.discountPrice : game.pricing.basePrice);\r\n        return total.plus(price);\r\n      }, new Decimal('0.00'))\r\n      .toString();\r\n\r\n    // Check if total price matches calculated price\r\n    if (totalPrice !== calculatedPrice) {\r\n      this.logger.error(`Total price does not match calculated price`);\r\n      throw new BadRequestException('Total price does not match calculated price');\r\n    }\r\n  }\r\n}\r\n"],"names":["PaymentService","constructor","userTools","user","mailer","logger","game","payment","createOrder","data","userId","totalPrice","cartItems","log","getByIds","calculatePrice","findUser","checkVerified","library","some","includes","id","error","BadRequestException","order","orderId","approvalUrl","links","href","orderData","captureOrder","games","capturedOrder","status","addItemsToLibrary","updateSales","sendPaymentConfirmationEmail","email","accountName","username","calculatedPrice","reduce","total","price","Decimal","pricing","discount","discountPrice","basePrice","plus","toString"],"mappings":"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"}