{"version":3,"sources":["../../../../../src/modules/apis/user/payment/payment.service.spec.ts"],"sourcesContent":["import { BadRequestException, Logger } from '@nestjs/common';\r\nimport { ConfigModule, ConfigService } from '@nestjs/config';\r\nimport { JwtService } from '@nestjs/jwt';\r\nimport { Test, TestingModule } from '@nestjs/testing';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { environmentConfig, getMongoTypeOrmConfig, getSqlTypeOrmConfig } from '@test/integration-setup';\r\n\r\n// Modules\r\nimport { TokenBlacklistModule } from '@repositories/mongo/token-blacklist/token-blacklist.module';\r\nimport { GamesTagsModule } from '@repositories/sql/games-tags/games-tags.module';\r\nimport { ReviewsModule } from '@repositories/sql/reviews/reviews.module';\r\nimport { UsersModule } from '@repositories/sql/users/users.module';\r\nimport { NodeMailerModule } from '@services/node-mailer/node-mailer.module';\r\n\r\n// Services\r\nimport { AuthService } from '@apis/user/auth/auth.service';\r\nimport { PaymentService } from '@apis/user/payment/payment.service';\r\nimport { TokenBlacklistService } from '@repositories/mongo/token-blacklist/token-blacklist.service';\r\nimport { CompaniesService } from '@repositories/sql/companies/companies.service';\r\nimport { GamesFeaturesService } from '@repositories/sql/games-features/games-features.service';\r\nimport { GamesLanguagesService } from '@repositories/sql/games-languages/games-languages.service';\r\nimport { GamesPricingService } from '@repositories/sql/games-pricing/games-pricing.service';\r\nimport { GamesTagsService } from '@repositories/sql/games-tags/games-tags.service';\r\nimport { GamesService } from '@repositories/sql/games/games.service';\r\nimport { UsersService } from '@repositories/sql/users/users.service';\r\nimport { DropboxService } from '@services/dropbox/dropbox.service';\r\nimport { NodeMailerService } from '@services/node-mailer/node-mailer.service';\r\nimport { PaypalService } from '@services/paypal/paypal.service';\r\n\r\n// Entities\r\nimport { Game } from '@repositories/sql/games/game.entity';\r\nimport { User } from '@repositories/sql/users/user.entity';\r\n\r\ndescribe('PaymentService', () => {\r\n  let data: { userData: User; refreshToken: string; accessToken: string; message?: string };\r\n  let game1: Game;\r\n  let game2: Game;\r\n  let authService: AuthService;\r\n  let paymentService: PaymentService;\r\n  let usersService: UsersService;\r\n  let gamesService: GamesService;\r\n  let tokenBlacklistService: TokenBlacklistService;\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      imports: [\r\n        ConfigModule.forRoot(environmentConfig),\r\n        TypeOrmModule.forRootAsync({\r\n          inject: [ConfigService],\r\n          name: 'sql',\r\n          useFactory: async (configService: ConfigService) => getSqlTypeOrmConfig(configService),\r\n        }),\r\n        TypeOrmModule.forRootAsync({\r\n          inject: [ConfigService],\r\n          useFactory: async (configService: ConfigService) => getMongoTypeOrmConfig(configService),\r\n        }),\r\n        UsersModule,\r\n        GamesTagsModule,\r\n        NodeMailerModule,\r\n        TokenBlacklistModule,\r\n        ReviewsModule,\r\n      ],\r\n      providers: [\r\n        AuthService,\r\n        PaypalService,\r\n        CompaniesService,\r\n        GamesFeaturesService,\r\n        GamesLanguagesService,\r\n        GamesPricingService,\r\n        GamesTagsService,\r\n        PaymentService,\r\n        JwtService,\r\n        UsersService,\r\n        GamesService,\r\n        NodeMailerService,\r\n        ConfigService,\r\n        TokenBlacklistService,\r\n        DropboxService,\r\n        Logger,\r\n      ],\r\n    }).compile();\r\n\r\n    usersService = module.get<UsersService>(UsersService);\r\n    gamesService = module.get<GamesService>(GamesService);\r\n    tokenBlacklistService = module.get<TokenBlacklistService>(TokenBlacklistService);\r\n    paymentService = module.get<PaymentService>(PaymentService);\r\n    authService = module.get<AuthService>(AuthService);\r\n\r\n    // register a user and login to get data sample for testing\r\n    await authService.signup({\r\n      username: 'test',\r\n      email: 'test@test.com',\r\n      password: 'password',\r\n      country: 'test',\r\n    });\r\n    data = await authService.login({\r\n      identifier: 'test',\r\n      password: 'password',\r\n      rememberMe: true,\r\n    });\r\n    await usersService.verify(data.userData.id);\r\n    data = await authService.login({\r\n      identifier: 'test',\r\n      password: 'password',\r\n      rememberMe: true,\r\n    });\r\n\r\n    game1 = await gamesService.create({\r\n      name: 'Test Game',\r\n      category: 'Test Category',\r\n      description: 'Test Description',\r\n      releaseDate: new Date('2022-01-01'),\r\n      publishers: [],\r\n      developers: [],\r\n      thumbnailEntries: {\r\n        mainImage: null,\r\n        backgroundImage: null,\r\n        menuImg: null,\r\n        horizontalHeaderImage: null,\r\n        verticalHeaderImage: null,\r\n        smallHeaderImage: null,\r\n        searchImage: null,\r\n        tabImage: null,\r\n      },\r\n      imageEntries: [],\r\n      videoEntries: [],\r\n      tags: [],\r\n      pricing: {\r\n        free: false,\r\n        price: 5,\r\n      },\r\n      features: [],\r\n      languages: [],\r\n      platformEntries: {\r\n        win: true,\r\n        mac: false,\r\n      },\r\n      link: 'Test Link',\r\n      about: 'Test About',\r\n      mature: false,\r\n      matureDescription: 'Test Mature Description',\r\n      systemRequirements: {\r\n        mini: {},\r\n        recommended: {},\r\n      },\r\n      legal: 'Test Legal',\r\n      featured: false,\r\n    });\r\n\r\n    game2 = await gamesService.create({\r\n      name: 'Test Game2',\r\n      category: 'Test Category',\r\n      description: 'Test Description',\r\n      releaseDate: new Date('2022-01-02'),\r\n      publishers: [],\r\n      developers: [],\r\n      thumbnailEntries: {\r\n        mainImage: null,\r\n        backgroundImage: null,\r\n        menuImg: null,\r\n        horizontalHeaderImage: null,\r\n        verticalHeaderImage: null,\r\n        smallHeaderImage: null,\r\n        searchImage: null,\r\n        tabImage: null,\r\n      },\r\n      imageEntries: [],\r\n      videoEntries: [],\r\n      tags: [],\r\n      pricing: {\r\n        free: false,\r\n        price: 5,\r\n      },\r\n      features: [],\r\n      languages: [],\r\n      platformEntries: {\r\n        win: true,\r\n        mac: false,\r\n      },\r\n      link: 'Test Link',\r\n      about: 'Test About',\r\n      mature: false,\r\n      matureDescription: 'Test Mature Description',\r\n      systemRequirements: {\r\n        mini: {},\r\n        recommended: {},\r\n      },\r\n      legal: 'Test Legal',\r\n      featured: false,\r\n    });\r\n  });\r\n\r\n  afterEach(async () => {\r\n    await usersService.removeAll();\r\n    await gamesService.removeAll();\r\n    await tokenBlacklistService.clearAll();\r\n  });\r\n\r\n  describe('createOrder', () => {\r\n    it('should create an order successfully', async () => {\r\n      // Call createOrder function\r\n      const result = await paymentService.createOrder({\r\n        userId: data.userData.id,\r\n        totalPrice: 10.0,\r\n        cartItems: [game1.id, game2.id],\r\n      });\r\n\r\n      // Assertions\r\n      expect(result).toEqual({\r\n        orderId: expect.any(String),\r\n        approvalUrl: expect.any(String),\r\n        orderData: {\r\n          userId: data.userData.id,\r\n          totalPrice: 10.0,\r\n          cartItems: [game1.id, game2.id],\r\n        },\r\n      });\r\n    });\r\n\r\n    it('should throw an BadRequestException if some games are in library', async () => {\r\n      // Add games to library\r\n      await usersService.addItemsToLibrary(data.userData.id, [game1.id]);\r\n      // Call createOrder function\r\n      await expect(\r\n        paymentService.createOrder({\r\n          userId: data.userData.id,\r\n          totalPrice: 10.0,\r\n          cartItems: [game1.id, game2.id],\r\n        }),\r\n      ).rejects.toThrow(BadRequestException);\r\n    });\r\n  });\r\n\r\n  describe('captureOrder', () => {\r\n    it('should capture an order successfully', async () => {\r\n      // Create an order\r\n      const order = await paymentService.createOrder({\r\n        userId: data.userData.id,\r\n        totalPrice: 10.0,\r\n        cartItems: [game1.id, game2.id],\r\n      });\r\n\r\n      // Get approval URL\r\n      const approvalUrl = order.approvalUrl;\r\n\r\n      // Log the approval URL and wait for manual approval\r\n      console.log(\r\n        '\\x1b[33m%s\\x1b[0m',\r\n        `\r\n                \\x1b[33m╔═══════════════════════════════════════════════════════════════════════╗\r\n                ║                                                                       ║\r\n                ║  \\x1b[1m\\x1b[4mPlease manually approve the order by visiting the following URL:\\x1b[0m\\x1b[33m     ║\r\n                ║                                                                       ║\r\n                ║  \\x1b[34m\\x1b[1m${approvalUrl}\\x1b[0m\\x1b[33m   ║\r\n                ║                                                                       ║\r\n                ║  \\x1b[1m\\x1b[4mUse the following credentials for approval:\\x1b[0m\\x1b[33m                          ║\r\n                ║  \\x1b[1mBuyer Email:\\x1b[0m \\x1b[32msb-gc21b29998568@business.example.com\\x1b[33m                   ║\r\n                ║  \\x1b[1mBuyer Password:\\x1b[0m \\x1b[32m';>7GL;d\\x1b[33m                                             ║\r\n                ║                                                                       ║\r\n                ║  \\x1b[1m\\x1b[31mYou have 1 minute to approve the order, else the test will fail.\\x1b[0m\\x1b[33m     ║\r\n                ║                                                                       ║\r\n                ╚═══════════════════════════════════════════════════════════════════════╝\\x1b[0m\r\n        `,\r\n      );\r\n\r\n      // Wait for manual approval (adjust the timeout as necessary)\r\n      await new Promise((resolve) => setTimeout(resolve, 60000)); // Wait for 1 minute\r\n\r\n      // Call captureOrder function\r\n      const result = await paymentService.captureOrder({\r\n        orderId: order.orderId,\r\n        userId: data.userData.id,\r\n        cartItems: [game1.id, game2.id],\r\n      });\r\n\r\n      // Assertions\r\n      expect(result).toEqual({\r\n        status: expect.any(String),\r\n        orderId: expect.any(String),\r\n        payerName: expect.any(String),\r\n      });\r\n    }, 90000);\r\n  });\r\n});\r\n"],"names":["describe","data","game1","game2","authService","paymentService","usersService","gamesService","tokenBlacklistService","beforeEach","module","Test","createTestingModule","imports","ConfigModule","forRoot","environmentConfig","TypeOrmModule","forRootAsync","inject","ConfigService","name","useFactory","configService","getSqlTypeOrmConfig","getMongoTypeOrmConfig","UsersModule","GamesTagsModule","NodeMailerModule","TokenBlacklistModule","ReviewsModule","providers","AuthService","PaypalService","CompaniesService","GamesFeaturesService","GamesLanguagesService","GamesPricingService","GamesTagsService","PaymentService","JwtService","UsersService","GamesService","NodeMailerService","TokenBlacklistService","DropboxService","Logger","compile","get","signup","username","email","password","country","login","identifier","rememberMe","verify","userData","id","create","category","description","releaseDate","Date","publishers","developers","thumbnailEntries","mainImage","backgroundImage","menuImg","horizontalHeaderImage","verticalHeaderImage","smallHeaderImage","searchImage","tabImage","imageEntries","videoEntries","tags","pricing","free","price","features","languages","platformEntries","win","mac","link","about","mature","matureDescription","systemRequirements","mini","recommended","legal","featured","afterEach","removeAll","clearAll","it","result","createOrder","userId","totalPrice","cartItems","expect","toEqual","orderId","any","String","approvalUrl","orderData","addItemsToLibrary","rejects","toThrow","BadRequestException","order","console","log","Promise","resolve","setTimeout","captureOrder","status","payerName"],"mappings":"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"}