{"version":3,"sources":["../../../../../src/modules/apis/user/admin/admin.service.ts"],"sourcesContent":["// NestJS\r\nimport { Injectable, Logger } from '@nestjs/common';\r\n\r\n// Services\r\nimport { UsersService } from '@repositories/sql/users/users.service';\r\n\r\n// Types\r\nimport type { User } from '@repositories/sql/users/user.entity';\r\n\r\n@Injectable()\r\nexport class AdminService {\r\n  constructor(\r\n    private readonly user: UsersService,\r\n    private readonly logger: Logger,\r\n  ) {}\r\n\r\n  /**\r\n   * Get paginated users\r\n   * @param page - The current page number\r\n   * @param limit - The number of items per page\r\n   * @param orderBy - The column to order by\r\n   * @param order - The order direction\r\n   * @param searchQuery - The search query\r\n   * @returns The paginated users and the total number of users\r\n   */\r\n  public async getUsersPaginated(\r\n    page: number,\r\n    limit: number,\r\n    orderBy: 'username' | 'email' | 'country' | 'isVerified' | 'isAdmin' | 'createdAt',\r\n    order: 'ASC' | 'DESC',\r\n    searchQuery: { username?: string },\r\n  ): Promise<{ items: User[]; total: number; totalPages: number }> {\r\n    this.logger.log(\r\n      `Retrieving users, page: ${page}, limit: ${limit}, order by: ${orderBy}, order: ${order}, search query: ${JSON.stringify(searchQuery)}`,\r\n    );\r\n\r\n    // Send the response\r\n    return await this.user.getUsersPaginated(page, limit, orderBy, order, searchQuery);\r\n  }\r\n\r\n  /**\r\n   * Update user\r\n   * @param id - The ID of the user\r\n   * @param data - The new data for the user\r\n   * @returns The updated user\r\n   */\r\n  public async updateUser(id: string, data: { isAdmin?: boolean; isVerified?: boolean }): Promise<{ message: string }> {\r\n    const { isAdmin, isVerified } = data;\r\n    this.logger.log(`Updating user with ID ${id}`);\r\n    await this.user.update(id, { isAdmin, isVerified });\r\n    return { message: 'user updated successfully' };\r\n  }\r\n\r\n  /**\r\n   * Delete user\r\n   * @param id - The ID of the user\r\n   * @returns A message indicating the success of the delete\r\n   */\r\n  public async deleteUser(id: string): Promise<{ message: string }> {\r\n    this.logger.log(`Deleting user with ID ${id}`);\r\n\r\n    // Delete the user\r\n    await this.user.remove(id);\r\n\r\n    // Send success message\r\n    return { message: 'User deleted successfully' };\r\n  }\r\n}\r\n"],"names":["AdminService","constructor","user","logger","getUsersPaginated","page","limit","orderBy","order","searchQuery","log","JSON","stringify","updateUser","id","data","isAdmin","isVerified","update","message","deleteUser","remove"],"mappings":"AAAA,SAAS;;;;;+BAUIA;;;eAAAA;;;wBATsB;8BAGN;;;;;;;;;;AAMtB,IAAA,AAAMA,eAAN,MAAMA;IACXC,YACE,AAAiBC,IAAkB,EACnC,AAAiBC,MAAc,CAC/B;aAFiBD,OAAAA;aACAC,SAAAA;IAChB;IAEH;;;;;;;;GAQC,GACD,MAAaC,kBACXC,IAAY,EACZC,KAAa,EACbC,OAAkF,EAClFC,KAAqB,EACrBC,WAAkC,EAC6B;QAC/D,IAAI,CAACN,MAAM,CAACO,GAAG,CACb,CAAC,wBAAwB,EAAEL,KAAK,SAAS,EAAEC,MAAM,YAAY,EAAEC,QAAQ,SAAS,EAAEC,MAAM,gBAAgB,EAAEG,KAAKC,SAAS,CAACH,cAAc;QAGzI,oBAAoB;QACpB,OAAO,MAAM,IAAI,CAACP,IAAI,CAACE,iBAAiB,CAACC,MAAMC,OAAOC,SAASC,OAAOC;IACxE;IAEA;;;;;GAKC,GACD,MAAaI,WAAWC,EAAU,EAAEC,IAAiD,EAAgC;QACnH,MAAM,EAAEC,OAAO,EAAEC,UAAU,EAAE,GAAGF;QAChC,IAAI,CAACZ,MAAM,CAACO,GAAG,CAAC,CAAC,sBAAsB,EAAEI,IAAI;QAC7C,MAAM,IAAI,CAACZ,IAAI,CAACgB,MAAM,CAACJ,IAAI;YAAEE;YAASC;QAAW;QACjD,OAAO;YAAEE,SAAS;QAA4B;IAChD;IAEA;;;;GAIC,GACD,MAAaC,WAAWN,EAAU,EAAgC;QAChE,IAAI,CAACX,MAAM,CAACO,GAAG,CAAC,CAAC,sBAAsB,EAAEI,IAAI;QAE7C,kBAAkB;QAClB,MAAM,IAAI,CAACZ,IAAI,CAACmB,MAAM,CAACP;QAEvB,uBAAuB;QACvB,OAAO;YAAEK,SAAS;QAA4B;IAChD;AACF"}