{"version":3,"sources":["../../../../../src/modules/apis/user/management/management.service.spec.ts"],"sourcesContent":["import fs from 'fs';\r\nimport path from 'path';\r\nimport { Test, TestingModule } from '@nestjs/testing';\r\nimport { BadRequestException, ConflictException, Logger, UnauthorizedException } from '@nestjs/common';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { JwtService } from '@nestjs/jwt';\r\nimport { UsersService } from '@repositories/sql/users/users.service';\r\nimport { ConfigModule, ConfigService } from '@nestjs/config';\r\nimport { ManagementService } from '@apis/user/management/management.service';\r\nimport { TokenBlacklistService } from '@repositories/mongo/token-blacklist/token-blacklist.service';\r\nimport { NodeMailerService } from '@services/node-mailer/node-mailer.service';\r\nimport { DropboxService } from '@services/dropbox/dropbox.service';\r\nimport { AuthService } from '@apis/user/auth/auth.service';\r\nimport { User } from '@repositories/sql/users/user.entity';\r\nimport { TokenBlacklistModule } from '@repositories/mongo/token-blacklist/token-blacklist.module';\r\nimport { GamesTagsModule } from '@repositories/sql/games-tags/games-tags.module';\r\nimport { ReviewsModule } from '@repositories/sql/reviews/reviews.module';\r\nimport { UsersModule } from '@repositories/sql/users/users.module';\r\nimport { NodeMailerModule } from '@services/node-mailer/node-mailer.module';\r\nimport { environmentConfig, getSqlTypeOrmConfig, getMongoTypeOrmConfig } from '@test/integration-setup';\r\nimport type { File } from '@nest-lab/fastify-multer';\r\n\r\ndescribe('ManagementService', () => {\r\n  let data: { userData: User; refreshToken: string; accessToken: string; message?: string };\r\n  let authService: AuthService;\r\n  let managementService: ManagementService;\r\n  let usersService: UsersService;\r\n  let tokenBlacklistService: TokenBlacklistService;\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      imports: [\r\n        ConfigModule.forRoot(environmentConfig),\r\n        TypeOrmModule.forRootAsync({\r\n          inject: [ConfigService],\r\n          name: 'sql',\r\n          useFactory: async (configService: ConfigService) => getSqlTypeOrmConfig(configService),\r\n        }),\r\n        TypeOrmModule.forRootAsync({\r\n          inject: [ConfigService],\r\n          useFactory: async (configService: ConfigService) => getMongoTypeOrmConfig(configService),\r\n        }),\r\n        UsersModule,\r\n        GamesTagsModule,\r\n        NodeMailerModule,\r\n        TokenBlacklistModule,\r\n        ReviewsModule,\r\n      ],\r\n      providers: [\r\n        AuthService,\r\n        ManagementService,\r\n        JwtService,\r\n        UsersService,\r\n        NodeMailerService,\r\n        ConfigService,\r\n        TokenBlacklistService,\r\n        DropboxService,\r\n        Logger,\r\n      ],\r\n    }).compile();\r\n\r\n    usersService = module.get<UsersService>(UsersService);\r\n    tokenBlacklistService = module.get<TokenBlacklistService>(TokenBlacklistService);\r\n    managementService = module.get<ManagementService>(ManagementService);\r\n    authService = module.get<AuthService>(AuthService);\r\n\r\n    // register a user and login to get data sample for testing\r\n    await authService.signup({\r\n      username: 'test',\r\n      email: 'testuser3@me.com',\r\n      password: 'password',\r\n      country: 'test',\r\n    });\r\n    data = await authService.login({\r\n      identifier: 'test',\r\n      password: 'password',\r\n      rememberMe: true,\r\n    });\r\n  });\r\n\r\n  afterEach(async () => {\r\n    await usersService.removeAll();\r\n    await tokenBlacklistService.clearAll();\r\n  });\r\n\r\n  describe('checkEmailExists', () => {\r\n    it('should return true if email exists', async () => {\r\n      // Call the checkEmailExists method\r\n      const result = await managementService.checkEmailExists({ email: data.userData.email });\r\n\r\n      // Assert\r\n      expect(result).toEqual({ exists: true, message: 'Email already exists' });\r\n    });\r\n\r\n    it('should return false if email does not exist', async () => {\r\n      // Call the checkEmailExists method\r\n      const result = await managementService.checkEmailExists({ email: 'non-existing-email' });\r\n\r\n      // Assert\r\n      expect(result).toEqual({ exists: false, message: 'Email available' });\r\n    });\r\n  });\r\n\r\n  describe('checkUsernameExists', () => {\r\n    it('should return true if username exists', async () => {\r\n      // Call the checkUsernameExists method\r\n      const result = await managementService.checkUsernameExists({ username: data.userData.username });\r\n\r\n      // Assert\r\n      expect(result).toEqual({ exists: true, message: 'Username already exists' });\r\n    });\r\n\r\n    it('should return false if username does not exist', async () => {\r\n      // Call the checkUsernameExists method\r\n      const result = await managementService.checkUsernameExists({ username: 'non-existing-username' });\r\n\r\n      // Assert\r\n      expect(result).toEqual({ exists: false, message: 'Username available' });\r\n    });\r\n  });\r\n\r\n  describe('changeUsername', () => {\r\n    it('should change username successfully and return true', async () => {\r\n      // Call the changeUsername method\r\n      const result = await managementService.changeUsername({\r\n        userId: data.userData.id,\r\n        password: 'password',\r\n        newUsername: 'new-username',\r\n      });\r\n\r\n      // Assert\r\n      expect(result).toEqual({ message: 'Username changed successfully' });\r\n    });\r\n\r\n    it('should throw a bad request error if new username is the same as the old one', async () => {\r\n      // Call the changeUsername method with username that already exists\r\n      await expect(managementService.changeUsername({\r\n        userId: data.userData.id,\r\n        password: 'password',\r\n        newUsername: data.userData.username,\r\n      })).rejects.toThrow(BadRequestException);\r\n    });\r\n\r\n    it('should throw an conflict error if new username already exists', async () => {\r\n      // Create a new user with username 'new-username'\r\n      await authService.signup({\r\n        username: 'new-username',\r\n        email: 'new-email@test.com',\r\n        password: 'password',\r\n        country: 'TS',\r\n      });\r\n\r\n      // Call the changeUsername method with username 'new-username' that already exists\r\n      await expect(managementService.changeUsername({\r\n        userId: data.userData.id,\r\n        password: 'password',\r\n        newUsername: 'new-username',\r\n      })).rejects.toThrow(ConflictException);\r\n    });\r\n  });\r\n\r\n  describe('changeEmail', () => {\r\n    it('should change email successfully', async () => {\r\n      // Call the changeEmail method\r\n      const result = await managementService.changeEmail({\r\n        userId: data.userData.id,\r\n        password: 'password',\r\n        currentEmail: data.userData.email,\r\n        newEmail: 'new-email@test.com',\r\n      });\r\n\r\n      // Assert\r\n      expect(result).toEqual({ message: 'Email changed successfully' });\r\n    });\r\n\r\n    it('should throw a bad request error if new email is the same as the old one', async () => {\r\n      // Call the changeEmail method\r\n      await expect(managementService.changeEmail({\r\n        userId: data.userData.id,\r\n        password: 'password',\r\n        currentEmail: data.userData.email,\r\n        newEmail: data.userData.email,\r\n      })).rejects.toThrow(BadRequestException);\r\n    });\r\n\r\n    it('should throw an conflict error if new email already exists', async () => {\r\n      // Create a new user with email 'new-email@test.com'\r\n      await authService.signup({\r\n        username: 'new-username',\r\n        email: 'new-email@test.com',\r\n        password: 'password',\r\n        country: 'TS',\r\n      });\r\n\r\n      // Call the changeEmail method with email 'new-email@test.com' that already exists\r\n      await expect(managementService.changeEmail({\r\n        userId: data.userData.id,\r\n        password: 'password',\r\n        currentEmail: data.userData.email,\r\n        newEmail: 'new-email@test.com',\r\n      })).rejects.toThrow(ConflictException);\r\n    });\r\n\r\n    it('should throw an unauthorized if current email is incorrect', async () => {\r\n      // Call the changeEmail method\r\n      await expect(\r\n        managementService.changeEmail({\r\n          userId: data.userData.id,\r\n          password: 'password',\r\n          currentEmail: 'wrong-email@test.com',\r\n          newEmail: 'new-email@test.com',\r\n        }),\r\n      ).rejects.toThrow(UnauthorizedException);\r\n    });\r\n  });\r\n\r\n  describe('changeCountry', () => {\r\n    it('should change country successfully', async () => {\r\n      // Call the changeCountry method\r\n      const result = await managementService.changeCountry({\r\n        userId: data.userData.id,\r\n        newCountry: 'TS',\r\n      });\r\n\r\n      // Assert\r\n      expect(result).toEqual({ message: 'Country changed successfully' });\r\n    });\r\n\r\n    it('should throw bad request if new country is the same as the old one', async () => {\r\n      // Call the changeCountry method\r\n      await expect(\r\n        managementService.changeCountry({\r\n          userId: data.userData.id,\r\n          newCountry: data.userData.country,\r\n        }),\r\n      ).rejects.toThrow(BadRequestException);\r\n    });\r\n  });\r\n\r\n  describe('uploadAvatar', () => {\r\n    it('should upload avatar successfully', async () => {\r\n      const filePath = path.resolve(__dirname, 'test.png');\r\n      const fileContent = Buffer.from([1, 2, 3]);\r\n\r\n      // Create a test file\r\n      if (!fs.existsSync(filePath)) {\r\n        fs.writeFileSync(filePath, fileContent);\r\n      }\r\n\r\n      const file: File = {\r\n        fieldname: 'avatar',\r\n        originalname: 'avatar.png',\r\n        encoding: '7bit',\r\n        mimetype: 'image/png',\r\n        size: fileContent.length,\r\n        buffer: fileContent,\r\n        path: filePath,\r\n      };\r\n\r\n      // Call the uploadAvatar method\r\n      const result = await managementService.uploadAvatar({ avatar: file, userId: data.userData.id });\r\n\r\n      // Assert\r\n      expect(result).toEqual({ message: 'Avatar uploaded successfully' });\r\n\r\n      // Delete the test file\r\n      fs.unlinkSync(filePath);\r\n    });\r\n  });\r\n\r\n  describe('deleteAvatar', () => {\r\n    it('should delete avatar successfully', async () => {\r\n      const filePath = path.resolve(__dirname, 'test.png');\r\n      const fileContent = Buffer.from([1, 2, 3]);\r\n\r\n      // Create a test file\r\n      if (!fs.existsSync(filePath)) {\r\n        fs.writeFileSync(filePath, fileContent);\r\n      }\r\n\r\n      const file: File = {\r\n        fieldname: 'avatar',\r\n        originalname: 'avatar.png',\r\n        encoding: '7bit',\r\n        mimetype: 'image/png',\r\n        size: fileContent.length,\r\n        buffer: fileContent,\r\n        path: filePath,\r\n      };\r\n\r\n      // Call the uploadAvatar method\r\n      await managementService.uploadAvatar({ avatar: file, userId: data.userData.id });\r\n\r\n      // Call the deleteAvatar method\r\n      const result = await managementService.deleteAvatar({ userId: data.userData.id });\r\n\r\n      // Assert\r\n      expect(result).toEqual({ message: 'Avatar deleted successfully' });\r\n    });\r\n  });\r\n\r\n  describe('changePassword', () => {\r\n    it('should change password successfully', async () => {\r\n      // Call the changePassword method\r\n      const result = await managementService.changePassword({\r\n        userId: data.userData.id,\r\n        oldPassword: 'password',\r\n        newPassword: 'new-password',\r\n      });\r\n\r\n      // Assert\r\n      expect(result).toEqual({ message: 'Password changed successfully' });\r\n    });\r\n\r\n    it('should throw bad request if new password is the same as the old one', async () => {\r\n      // Call the changePassword method\r\n      await expect(\r\n        managementService.changePassword({\r\n          userId: data.userData.id,\r\n          oldPassword: 'password',\r\n          newPassword: 'password',\r\n        }),\r\n      ).rejects.toThrow(BadRequestException);\r\n    });\r\n  });\r\n\r\n  describe('forgotPassword', () => {\r\n    it('should forgot password successfully', async () => {\r\n      // Call the forgotPassword method\r\n      const result = await managementService.forgotPassword({\r\n        email: data.userData.email,\r\n      });\r\n\r\n      // Assert\r\n      expect(result).toEqual({ message: 'Reset email sent successfully' });\r\n    });\r\n  });\r\n\r\n  describe('passwordReset', () => {\r\n    it('should return true if password is changed', async () => {\r\n      // Call the forgotPassword method\r\n      await managementService.forgotPassword({\r\n        email: data.userData.email,\r\n      });\r\n\r\n      // Call the passwordReset method to reset the password with the captured token\r\n      const result = await managementService.passwordReset({\r\n        token: 'test-reset-token',\r\n        newPassword: 'new-password',\r\n      });\r\n\r\n      // Assert\r\n      expect(result).toEqual({ message: 'Password reset successful' });\r\n    });\r\n  });\r\n\r\n  describe('deleteAccount', () => {\r\n    it('should delete account successfully', async () => {\r\n      // Call the deleteAccount method\r\n      const result = await managementService.deleteAccount({ userId: data.userData.id, password: 'password' });\r\n\r\n      // Assert\r\n      expect(result).toEqual({ message: 'Account deleted successfully' });\r\n    });\r\n  });\r\n});\r\n"],"names":["describe","data","authService","managementService","usersService","tokenBlacklistService","beforeEach","module","Test","createTestingModule","imports","ConfigModule","forRoot","environmentConfig","TypeOrmModule","forRootAsync","inject","ConfigService","name","useFactory","configService","getSqlTypeOrmConfig","getMongoTypeOrmConfig","UsersModule","GamesTagsModule","NodeMailerModule","TokenBlacklistModule","ReviewsModule","providers","AuthService","ManagementService","JwtService","UsersService","NodeMailerService","TokenBlacklistService","DropboxService","Logger","compile","get","signup","username","email","password","country","login","identifier","rememberMe","afterEach","removeAll","clearAll","it","result","checkEmailExists","userData","expect","toEqual","exists","message","checkUsernameExists","changeUsername","userId","id","newUsername","rejects","toThrow","BadRequestException","ConflictException","changeEmail","currentEmail","newEmail","UnauthorizedException","changeCountry","newCountry","filePath","path","resolve","__dirname","fileContent","Buffer","from","fs","existsSync","writeFileSync","file","fieldname","originalname","encoding","mimetype","size","length","buffer","uploadAvatar","avatar","unlinkSync","deleteAvatar","changePassword","oldPassword","newPassword","forgotPassword","passwordReset","token","deleteAccount"],"mappings":"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"}