{"version":3,"sources":["../../../../../src/modules/apis/user/management/management.controller.ts"],"sourcesContent":["// NestJS\r\nimport {\r\n  Body,\r\n  Controller,\r\n  Delete,\r\n  Get,\r\n  HttpCode,\r\n  Param,\r\n  Patch,\r\n  Post,\r\n  Req,\r\n  UploadedFile,\r\n  UseGuards,\r\n  UseInterceptors,\r\n} from '@nestjs/common';\r\n\r\n// Fastify\r\nimport { FastifyRequest as Request } from 'fastify';\r\n\r\n// Recaptcha\r\nimport { Recaptcha } from '@nestlab/google-recaptcha';\r\n\r\n// Multer\r\nimport { FileInterceptor } from '@nest-lab/fastify-multer';\r\n\r\n// Swagger\r\nimport { ApiDescriptor } from '@decorators/api-descriptor.decorator';\r\nimport { ApiTags } from '@nestjs/swagger';\r\n\r\n// Decorators\r\nimport { RemoveResponseCookies } from '@decorators/remove-response-cookies.decorator';\r\n\r\n// Guards\r\nimport { JwtAccessAuthGuard } from '@guards/jwt-access-auth.guard';\r\nimport { VerifiedUserGuard } from '@guards/verified-user.guard';\r\n\r\n// Services\r\nimport { ManagementService } from '@apis/user/management/management.service';\r\n\r\n// Body DTOs\r\nimport { ChangeCountryDto } from '@apis/user/management/dtos/change-country.dto';\r\nimport { ChangeEmailDto } from '@apis/user/management/dtos/change-email.dto';\r\nimport { ChangePasswordDto } from '@apis/user/management/dtos/change-password.dto';\r\nimport { ChangeUsernameDto } from '@apis/user/management/dtos/change-username.dto';\r\nimport { DeleteAccountDto } from '@apis/user/management/dtos/delete-account.dto';\r\nimport { ForgotPasswordDto } from '@apis/user/management/dtos/forgot-password.dto';\r\nimport { PasswordResetDto } from '@apis/user/management/dtos/password-reset.dto';\r\n\r\n// Swagger descriptors\r\nimport { changeCountryDescriptor } from '@apis/user/management/api-descriptors/change-country.descriptor';\r\nimport { changeEmailDescriptor } from '@apis/user/management/api-descriptors/change-email.descriptor';\r\nimport { changePasswordDescriptor } from '@apis/user/management/api-descriptors/change-password.descriptor';\r\nimport { changeUsernameDescriptor } from '@apis/user/management/api-descriptors/change-username.descriptor';\r\nimport { checkEmailExistsDescriptor } from '@apis/user/management/api-descriptors/check-email-exists.descriptor';\r\nimport { checkUsernameExistsDescriptor } from '@apis/user/management/api-descriptors/check-username-exists.descriptor';\r\nimport { deleteAccountDescriptor } from '@apis/user/management/api-descriptors/delete-account.descriptor';\r\nimport { deleteAvatarDescriptor } from '@apis/user/management/api-descriptors/delete-avatar.descriptor';\r\nimport { forgotPasswordDescriptor } from '@apis/user/management/api-descriptors/forgot-password.descriptor';\r\nimport { passwordResetDescriptor } from '@apis/user/management/api-descriptors/password-reset.descriptor';\r\nimport { uploadAvatarDescriptor } from '@apis/user/management/api-descriptors/upload-avatar.descriptor';\r\n\r\n// Types\r\nimport type { File } from '@nest-lab/fastify-multer';\r\n\r\n@ApiTags('User Management')\r\n@Controller('user/management')\r\nexport class ManagementController {\r\n  constructor(private readonly managementService: ManagementService) {}\r\n\r\n  @ApiDescriptor(checkEmailExistsDescriptor)\r\n  @Get('email/:email')\r\n  @HttpCode(200)\r\n  public async checkEmailExists(@Param('email') email: string) {\r\n    const data = { email };\r\n\r\n    const result = await this.managementService.checkEmailExists(data);\r\n\r\n    // Send the response\r\n    return result;\r\n  }\r\n\r\n  @ApiDescriptor(checkUsernameExistsDescriptor)\r\n  @Get('username/:username')\r\n  @HttpCode(200)\r\n  public async checkUsernameExists(@Param('username') username: string) {\r\n    const data = { username };\r\n\r\n    const result = await this.managementService.checkUsernameExists(data);\r\n\r\n    // Send the response\r\n    return result;\r\n  }\r\n\r\n  @ApiDescriptor(changeUsernameDescriptor)\r\n  @UseGuards(JwtAccessAuthGuard, VerifiedUserGuard)\r\n  @Patch('username')\r\n  @HttpCode(200)\r\n  public async changeUsername(@Req() request: Request, @Body() bodyData: ChangeUsernameDto) {\r\n    const data: ChangeUsernameDto & { userId: string } = {\r\n      ...bodyData,\r\n      userId: request['userId'],\r\n    };\r\n\r\n    const result = await this.managementService.changeUsername(data);\r\n\r\n    // Send the response\r\n    return result;\r\n  }\r\n\r\n  @ApiDescriptor(changeEmailDescriptor)\r\n  @UseGuards(JwtAccessAuthGuard, VerifiedUserGuard)\r\n  @Patch('email')\r\n  @HttpCode(200)\r\n  public async changeEmail(@Req() request: Request, @Body() bodyData: ChangeEmailDto) {\r\n    const data: ChangeEmailDto & { userId: string } = {\r\n      ...bodyData,\r\n      userId: request['userId'],\r\n    };\r\n\r\n    const result = await this.managementService.changeEmail(data);\r\n\r\n    // Send the response\r\n    return result;\r\n  }\r\n\r\n  @ApiDescriptor(changeCountryDescriptor)\r\n  @UseGuards(JwtAccessAuthGuard, VerifiedUserGuard)\r\n  @Patch('country')\r\n  public async changeCountry(@Req() request: Request, @Body() bodyData: ChangeCountryDto) {\r\n    const data: ChangeCountryDto & { userId: string } = {\r\n      ...bodyData,\r\n      userId: request['userId'],\r\n    };\r\n\r\n    const result = await this.managementService.changeCountry(data);\r\n\r\n    // Send the response\r\n    return result;\r\n  }\r\n\r\n  @ApiDescriptor(uploadAvatarDescriptor)\r\n  @UseGuards(JwtAccessAuthGuard, VerifiedUserGuard)\r\n  @Patch('avatar')\r\n  @UseInterceptors(FileInterceptor('avatar'))\r\n  @HttpCode(200)\r\n  async uploadAvatar(@Req() request: Request, @UploadedFile() avatar: File) {\r\n    const data: { avatar: File; userId: string } = {\r\n      avatar,\r\n      userId: request['userId'],\r\n    };\r\n\r\n    const result = await this.managementService.uploadAvatar(data);\r\n\r\n    // Send the response\r\n    return result;\r\n  }\r\n\r\n  @ApiDescriptor(deleteAvatarDescriptor)\r\n  @UseGuards(JwtAccessAuthGuard, VerifiedUserGuard)\r\n  @Delete('avatar')\r\n  @HttpCode(200)\r\n  async deleteAvatar(@Req() request: Request) {\r\n    const data: { userId: string } = {\r\n      userId: request['userId'],\r\n    };\r\n\r\n    const result = await this.managementService.deleteAvatar(data);\r\n\r\n    // Send the response\r\n    return result;\r\n  }\r\n\r\n  @ApiDescriptor(changePasswordDescriptor)\r\n  @UseGuards(JwtAccessAuthGuard, VerifiedUserGuard)\r\n  @Patch('password/change')\r\n  @HttpCode(200)\r\n  public async changePassword(@Req() request: Request, @Body() bodyData: ChangePasswordDto) {\r\n    const data: ChangePasswordDto & { userId: string } = {\r\n      ...bodyData,\r\n      userId: request['userId'],\r\n    };\r\n\r\n    const result = await this.managementService.changePassword(data);\r\n\r\n    // Send the response\r\n    return result;\r\n  }\r\n\r\n  @ApiDescriptor(forgotPasswordDescriptor)\r\n  @Recaptcha()\r\n  @Post('password/forgot')\r\n  @HttpCode(200)\r\n  public async forgotPassword(@Body() data: ForgotPasswordDto) {\r\n    const result = await this.managementService.forgotPassword(data);\r\n\r\n    // Send the response\r\n    return result;\r\n  }\r\n\r\n  @ApiDescriptor(passwordResetDescriptor)\r\n  @Patch('password/reset')\r\n  @HttpCode(200)\r\n  public async passwordReset(@Body() data: PasswordResetDto) {\r\n    const result = await this.managementService.passwordReset(data);\r\n\r\n    // Send the response\r\n    return result;\r\n  }\r\n\r\n  @ApiDescriptor(deleteAccountDescriptor)\r\n  @UseGuards(JwtAccessAuthGuard, VerifiedUserGuard)\r\n  @RemoveResponseCookies()\r\n  @Delete('account')\r\n  @HttpCode(200)\r\n  public async deleteAccount(@Req() request: Request, @Body() bodyData: DeleteAccountDto) {\r\n    const data: DeleteAccountDto & { userId: string } = {\r\n      ...bodyData,\r\n      userId: request['userId'],\r\n    };\r\n\r\n    const result = await this.managementService.deleteAccount(data);\r\n\r\n    // Send the response\r\n    return result;\r\n  }\r\n}\r\n"],"names":["ManagementController","constructor","managementService","checkEmailExists","email","data","result","checkUsernameExists","username","changeUsername","request","bodyData","userId","changeEmail","changeCountry","uploadAvatar","avatar","deleteAvatar","changePassword","forgotPassword","passwordReset","deleteAccount"],"mappings":"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"}