{"version":3,"sources":["../../../../../src/modules/apis/user/interaction/interaction.service.ts"],"sourcesContent":["// NestJS\r\nimport { BadRequestException, Injectable, Logger } from '@nestjs/common';\r\n\r\n// Services\r\nimport { GamesService } from '@repositories/sql/games/games.service';\r\nimport { ReviewsService } from '@repositories/sql/reviews/reviews.service';\r\n\r\nimport { UserService } from '@apis/user/user.service'; // Api service (The Extended Service)\r\nimport { UsersService } from '@repositories/sql/users/users.service'; // Repository service (The Injected Service)\r\n\r\n// Types\r\nimport type { GameTag } from '@repositories/sql/games-tags/game-tag.entity';\r\nimport type { Review } from '@repositories/sql/reviews/review.entity';\r\nimport type { CartItem, LibraryItem, WishlistItem } from '@repositories/sql/users/user.entity';\r\n\r\n@Injectable()\r\nexport class InteractionService {\r\n  constructor(\r\n    private readonly userTools: UserService,\r\n    private readonly user: UsersService,\r\n    private readonly game: GamesService,\r\n    private readonly review: ReviewsService,\r\n    private readonly logger: Logger,\r\n  ) {}\r\n\r\n  /**\r\n   * Changes the user's tags\r\n   * @param data - An object containing the user's ID and the new tags\r\n   * @returns A message indicating the success of the operation\r\n   */\r\n  public async changeTags(data: { userId: string; tags: number[] }): Promise<{ message: string }> {\r\n    const { userId, tags } = data;\r\n\r\n    this.logger.log(`Changing tags for user with id: ${userId} to: ${tags}`);\r\n\r\n    // Check if user exists\r\n    await this.userTools.findUser(userId, 'id');\r\n\r\n    // Update the user's tags\r\n    await this.user.updateUserTags(userId, tags);\r\n\r\n    // Return the result\r\n    this.logger.log(`Tags changed successfully for user with ID: ${userId}`);\r\n    return { message: 'Tags changed successfully' };\r\n  }\r\n\r\n  /**\r\n   * Returns the user's tags\r\n   * @param data - An object containing the user's ID\r\n   * @returns The user's tags\r\n   */\r\n  public async getTags(data: { userId: string }): Promise<{ tags: GameTag[] }> {\r\n    const { userId } = data;\r\n\r\n    this.logger.log(`Getting tags for user with id: ${userId}`);\r\n\r\n    // Check and get user\r\n    const user = await this.userTools.findUser(userId, 'id');\r\n\r\n    // Return the user's tags\r\n    this.logger.log(`Tags fetched successfully for user with ID: ${userId}`);\r\n    return { tags: user.tags };\r\n  }\r\n\r\n  /**\r\n   * Adds items to the user's library.\r\n   * @param data - An object containing the user's ID and a list of item IDs to add to the library.\r\n   * @returns A message indicating the success of the operation.\r\n   * @throws `BadRequestException` If any of the items are already in the user's library.\r\n   */\r\n  public async addToLibrary(data: { itemsIds: number[]; userId: string }): Promise<{ message: string }> {\r\n    const { itemsIds, userId } = data;\r\n\r\n    this.logger.log(`Adding games with IDs ${itemsIds} to library for user with ID: ${userId}`);\r\n\r\n    // Check and get user\r\n    const user = await this.userTools.findUser(userId, 'id');\r\n\r\n    // Check if all the games are already in the user's library\r\n    const existingitemsIds = user.library.map((libraryItem) => libraryItem.id);\r\n    const duplicates = itemsIds.filter((itemId) => existingitemsIds.includes(itemId));\r\n    if (duplicates.length > 0) {\r\n      this.logger.warn(`Games with IDs ${duplicates} are already in the library for user with ID: ${userId}`);\r\n      throw new BadRequestException(\r\n        `Games with IDs ${duplicates} are already in the library for user with ID: ${userId}`,\r\n      );\r\n    }\r\n\r\n    // Check if any of the items does not exist\r\n    await this.game.getByIds(itemsIds);\r\n\r\n    // Add the games to the user's library\r\n    await this.user.addItemsToLibrary(userId, itemsIds);\r\n\r\n    // Return the result\r\n    this.logger.log(`Games added to library successfully for user with ID: ${userId}`);\r\n    return { message: 'Games added to library successfully' };\r\n  }\r\n\r\n  /**\r\n   * Removes items from the user's library.\r\n   * @param data - An object containing the user's ID and a list of item IDs to remove from the library.\r\n   * @returns A message indicating the success of the operation.\r\n   */\r\n  public async removeFromLibrary(data: { itemsIds: number[]; userId: string }): Promise<{ message: string }> {\r\n    const { itemsIds, userId } = data;\r\n\r\n    this.logger.log(`Removing games with IDs ${itemsIds} from library for user with ID: ${userId}`);\r\n\r\n    // Check if user exists\r\n    await this.userTools.findUser(userId, 'id');\r\n\r\n    // Remove the games from the user's library\r\n    await this.user.removeItemsFromLibrary(userId, itemsIds);\r\n\r\n    // Return the result\r\n    this.logger.log(`Games removed from library successfully for user with ID: ${userId}`);\r\n    return { message: 'Games removed from library successfully' };\r\n  }\r\n\r\n  /**\r\n   * Clears the user's library.\r\n   * @param data - An object containing the user's ID.\r\n   * @returns A message indicating the success of the operation.\r\n   */\r\n  public async clearLibrary(data: { userId: string }): Promise<{ message: string }> {\r\n    const { userId } = data;\r\n\r\n    this.logger.log(`Clearing library for user with ID: ${userId}`);\r\n\r\n    // Check if user exists\r\n    await this.userTools.findUser(userId, 'id');\r\n\r\n    // Clear the user's library\r\n    await this.user.clearLibrary(userId);\r\n\r\n    // Return the result\r\n    this.logger.log(`Library cleared successfully for user with ID: ${userId}`);\r\n    return { message: 'Library cleared successfully' };\r\n  }\r\n\r\n  /**\r\n   * Adds items to the user's wishlist.\r\n   * @param data - An object containing the user's ID and a list of item IDs to add to the wishlist.\r\n   * @returns A message indicating the success of the operation.\r\n   * @throws `BadRequestException` If any of the items are already in the user's wishlist.\r\n   */\r\n  public async addToWishlist(data: { itemsIds: number[]; userId: string }): Promise<{ message: string }> {\r\n    const { itemsIds, userId } = data;\r\n\r\n    this.logger.log(`Adding games with IDs ${itemsIds} to wishlist for user with ID: ${userId}`);\r\n\r\n    // Check and get user\r\n    const user = await this.userTools.findUser(userId, 'id');\r\n\r\n    // Check if all the games are already in the user's wishlist\r\n    const existingitemsIds = user.wishlist.map((wishlistItem) => wishlistItem.id);\r\n    const duplicates = itemsIds.filter((itemId) => existingitemsIds.includes(itemId));\r\n    if (duplicates.length > 0) {\r\n      this.logger.warn(`Games with IDs ${duplicates} are already in the wishlist`);\r\n      throw new BadRequestException(\r\n        `Games with IDs ${duplicates} are already in the wishlist for user with ID: ${userId}`,\r\n      );\r\n    }\r\n\r\n    // Check if any of the items does not exist\r\n    await this.game.getByIds(itemsIds);\r\n\r\n    // Add the games to the user's wishlist\r\n    await this.user.addItemsToWishlist(userId, itemsIds);\r\n\r\n    // Return the result\r\n    this.logger.log(`Games added to wishlist successfully for user with ID: ${userId}`);\r\n    return { message: 'Games added to wishlist successfully' };\r\n  }\r\n\r\n  /**\r\n   * Removes items from the user's wishlist.\r\n   * @param data - An object containing the user's ID and a list of item IDs to remove from the wishlist.\r\n   * @returns A message indicating the success of the operation.\r\n   */\r\n  public async removeFromWishlist(data: { itemsIds: number[]; userId: string }): Promise<{ message: string }> {\r\n    const { itemsIds, userId } = data;\r\n\r\n    this.logger.log(`Removing games with IDs ${itemsIds} from wishlist for user with ID: ${userId}`);\r\n\r\n    // Check if user exists\r\n    await this.userTools.findUser(userId, 'id');\r\n\r\n    // Remove the games from the user's wishlist\r\n    await this.user.removeItemsFromWishlist(userId, itemsIds);\r\n\r\n    // Return the result\r\n    this.logger.log(`Games removed from wishlist successfully for user with ID: ${userId}`);\r\n    return { message: 'Games removed from wishlist successfully' };\r\n  }\r\n\r\n  /**\r\n   * Clears user's wishlist.\r\n   * @param data - An object containing the user's ID\r\n   * @returns A message indicating the success of the operation.\r\n   */\r\n  public async clearWishlist(data: { userId: string }): Promise<{ message: string }> {\r\n    const { userId } = data;\r\n\r\n    this.logger.log(`Clearing wishlist for user with ID: ${userId}`);\r\n\r\n    // Check if user exists\r\n    await this.userTools.findUser(userId, 'id');\r\n\r\n    // Clear the user's wishlist\r\n    await this.user.clearWishlist(userId);\r\n\r\n    // Return the result\r\n    this.logger.log(`Wishlist cleared successfully for user with ID: ${userId}`);\r\n    return { message: 'Wishlist cleared successfully' };\r\n  }\r\n\r\n  /**\r\n   * Adds items to the user's cart.\r\n   * @param data - An object containing the user's ID and a list of item IDs to add to the cart.\r\n   * @returns A message indicating the success of the operation.\r\n   * @throws `BadRequestException` If any of the items are already in the user's cart.\r\n   */\r\n  public async addToCart(data: { itemsIds: number[]; userId: string }): Promise<{ message: string }> {\r\n    const { itemsIds, userId } = data;\r\n\r\n    this.logger.log(`Adding games with IDs ${itemsIds} to cart for user with ID: ${userId}`);\r\n\r\n    // Check and get user\r\n    const user = await this.userTools.findUser(userId, 'id');\r\n\r\n    // Check if all the games are already in the user's wishlist\r\n    const existingitemsIds = user.cart.map((cartItem) => cartItem.id);\r\n    const duplicates = itemsIds.filter((itemId) => existingitemsIds.includes(itemId));\r\n    if (duplicates.length > 0) {\r\n      this.logger.warn(`Games with IDs ${duplicates} are already in the cart`);\r\n      throw new BadRequestException(`Games with IDs ${duplicates} are already in the cart for user with ID: ${userId}`);\r\n    }\r\n\r\n    // Check if any of the items does not exist\r\n    await this.game.getByIds(itemsIds);\r\n\r\n    // Remove items from the user's wishlist if they exist in the wishlist\r\n    const currentWishlist = user.wishlist.map((item) => item.id);\r\n    const existingWishlistItems = itemsIds.filter((itemId) => currentWishlist.includes(itemId));\r\n    await this.user.removeItemsFromWishlist(userId, existingWishlistItems);\r\n\r\n    // Add the games to the user's cart\r\n    await this.user.addItemsToCart(userId, itemsIds);\r\n\r\n    // Return the result\r\n    this.logger.log(`Games added to cart successfully for user with ID: ${userId}`);\r\n    return { message: `Games added to cart successfully` };\r\n  }\r\n\r\n  /**\r\n   * Removes items from the user's cart.\r\n   * @param data - An object containing the user's ID and a list of item IDs to remove from the cart.\r\n   * @returns A message indicating the success of the operation.\r\n   */\r\n  public async removeFromCart(data: { itemsIds: number[]; userId: string }): Promise<{ message: string }> {\r\n    const { itemsIds, userId } = data;\r\n\r\n    this.logger.log(`Removing games with IDs ${itemsIds} from cart for user with ID: ${userId}`);\r\n\r\n    // Check if user exists\r\n    await this.userTools.findUser(userId, 'id');\r\n\r\n    // Remove the games from the user's cart\r\n    await this.user.removeItemsFromCart(userId, itemsIds);\r\n\r\n    // Return the result\r\n    this.logger.log(`Games removed from cart successfully for user with ID: ${userId}`);\r\n    return { message: 'Games removed from cart successfully' };\r\n  }\r\n\r\n  /**\r\n   * Clears user's cart.\r\n   * @param data - An object containing the user's ID\r\n   * @returns A message indicating the success of the operation.\r\n   */\r\n  public async clearCart(data: { userId: string }): Promise<{ message: string }> {\r\n    const { userId } = data;\r\n\r\n    this.logger.log(`Clearing cart for user with ID: ${userId}`);\r\n\r\n    // Check if user exists\r\n    await this.userTools.findUser(userId, 'id');\r\n\r\n    // Clear the user's cart\r\n    await this.user.clearCart(userId);\r\n\r\n    // Return the result\r\n    this.logger.log(`Cart cleared successfully for user with ID: ${userId}`);\r\n    return { message: 'Cart cleared successfully' };\r\n  }\r\n\r\n  /**\r\n   * Returns user's library\r\n   * @param data - An object containing the user's ID\r\n   * @returns The user's library\r\n   */\r\n  public async getLibrary(data: { userId: string }): Promise<LibraryItem[]> {\r\n    const { userId } = data;\r\n\r\n    this.logger.log(`Getting library for user with ID: ${userId}`);\r\n\r\n    // Check and get user\r\n    const user = await this.userTools.findUser(userId, 'id');\r\n\r\n    // Return the user's library\r\n    this.logger.log(`Library retrieved successfully for user with ID: ${userId}`);\r\n    return user.library;\r\n  }\r\n\r\n  /**\r\n   * Returns user's wishlist\r\n   * @param data - An object containing the user's ID\r\n   * @returns The user's wishlist\r\n   */\r\n  public async getWishlist(data: { userId: string }): Promise<WishlistItem[]> {\r\n    const { userId } = data;\r\n\r\n    this.logger.log(`Getting wishlist for user with ID: ${userId}`);\r\n\r\n    // Check and get user\r\n    const user = await this.userTools.findUser(userId, 'id');\r\n\r\n    // Return the user's wishlist\r\n    this.logger.log(`Wishlist retrieved successfully for user with ID: ${userId}`);\r\n    return user.wishlist;\r\n  }\r\n\r\n  /**\r\n   * Returns user's cart\r\n   * @param data - An object containing the user's ID\r\n   * @returns The user's cart\r\n   */\r\n  public async getCart(data: { userId: string }): Promise<CartItem[]> {\r\n    const { userId } = data;\r\n\r\n    this.logger.log(`Getting cart for user with ID: ${userId}`);\r\n\r\n    // Check and get user\r\n    const user = await this.userTools.findUser(userId, 'id');\r\n\r\n    // Return the user's cart\r\n    this.logger.log(`Cart retrieved successfully for user with ID: ${userId}`);\r\n    return user.cart;\r\n  }\r\n\r\n  /**\r\n   * Reviews a game\r\n   * @param data - An object containing the user's ID, the game ID, and the review content\r\n   * @returns A success message\r\n   */\r\n\r\n  public async reviewGame(data: {\r\n    userId: string;\r\n    gameId: number;\r\n    positive: boolean;\r\n    content: string;\r\n  }): Promise<{ message: string }> {\r\n    const { userId, gameId, positive, content } = data;\r\n\r\n    this.logger.log(`Reviewing game with ID: ${gameId} for user with ID: ${userId}`);\r\n\r\n    // Create the review\r\n    await this.review.create({ userId, gameId, positive, content });\r\n\r\n    // Return the result\r\n    this.logger.log(`Game reviewed successfully for user with ID: ${userId}`);\r\n    return { message: 'Game reviewed successfully' };\r\n  }\r\n\r\n  /**\r\n   * Updates a review\r\n   * @param data - An object containing the user's ID, the review ID, and the new review content\r\n   * @returns A success message\r\n   */\r\n  public async updateReview(data: {\r\n    reviewId: number;\r\n    positive: boolean;\r\n    content: string;\r\n  }): Promise<{ message: string }> {\r\n    const { reviewId, positive, content } = data;\r\n\r\n    this.logger.log(`Editing review with ID: ${reviewId}`);\r\n\r\n    // Update the review\r\n    await this.review.update(reviewId, { positive, content });\r\n\r\n    // Return the result\r\n    this.logger.log(`Review updated successfully for review with ID: ${reviewId}`);\r\n    return { message: 'Review updated successfully' };\r\n  }\r\n\r\n  /**\r\n   * Checks if a user has reviewed a game\r\n   * @param data - An object containing the user's ID and the game ID\r\n   * @returns A boolean indicating whether the user has reviewed the game\r\n   */\r\n  public async hasReviewedGame(data: {\r\n    userId: string;\r\n    gameId: number;\r\n  }): Promise<{ reviewed: boolean; review?: Review }> {\r\n    const { userId, gameId } = data;\r\n\r\n    this.logger.log(`Checking if user with ID: ${userId} has reviewed game with ID: ${gameId}`);\r\n\r\n    // Check if the user has reviewed the game\r\n    const hasReviewed = await this.review.hasUserReviewedGame(userId, gameId);\r\n\r\n    // Return the result\r\n    this.logger.log(`User has reviewed game successfully for user with ID: ${userId}`);\r\n    return { reviewed: hasReviewed.reviewed, review: hasReviewed.review };\r\n  }\r\n\r\n  /**\r\n   * Returns user's reviews\r\n   * @param data - An object containing the user's ID\r\n   * @returns The user's reviews\r\n   */\r\n  public async getReviews(data: { userId: string }): Promise<Review[]> {\r\n    const { userId } = data;\r\n\r\n    this.logger.log(`Getting reviews for user with ID: ${userId}`);\r\n\r\n    // Check and get user\r\n    const user = await this.userTools.findUser(userId, 'id', true);\r\n\r\n    // Return the user's reviews\r\n    this.logger.log(`Reviews retrieved successfully for user with ID: ${userId}`);\r\n    return user.reviews;\r\n  }\r\n}\r\n"],"names":["InteractionService","constructor","userTools","user","game","review","logger","changeTags","data","userId","tags","log","findUser","updateUserTags","message","getTags","addToLibrary","itemsIds","existingitemsIds","library","map","libraryItem","id","duplicates","filter","itemId","includes","length","warn","BadRequestException","getByIds","addItemsToLibrary","removeFromLibrary","removeItemsFromLibrary","clearLibrary","addToWishlist","wishlist","wishlistItem","addItemsToWishlist","removeFromWishlist","removeItemsFromWishlist","clearWishlist","addToCart","cart","cartItem","currentWishlist","item","existingWishlistItems","addItemsToCart","removeFromCart","removeItemsFromCart","clearCart","getLibrary","getWishlist","getCart","reviewGame","gameId","positive","content","create","updateReview","reviewId","update","hasReviewedGame","hasReviewed","hasUserReviewedGame","reviewed","getReviews","reviews"],"mappings":"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"}