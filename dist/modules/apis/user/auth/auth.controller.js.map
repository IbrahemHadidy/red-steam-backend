{"version":3,"sources":["../../../../../src/modules/apis/user/auth/auth.controller.ts"],"sourcesContent":["// NestJS\r\nimport { Body, Controller, Get, HttpCode, Post, Req, UseGuards } from '@nestjs/common';\r\n\r\n// Fastify\r\nimport { FastifyRequest as Request } from 'fastify';\r\n\r\n// Recaptcha\r\nimport { Recaptcha } from '@nestlab/google-recaptcha';\r\n\r\n// Swagger\r\nimport { ApiDescriptor } from '@decorators/api-descriptor.decorator';\r\nimport { ApiTags } from '@nestjs/swagger';\r\n\r\n// Decorators\r\nimport { MaskEmail } from '@decorators/mask-email.decorator';\r\nimport { RemoveResponseCookies } from '@decorators/remove-response-cookies.decorator';\r\nimport { Serialize } from '@decorators/serialize.decorator';\r\nimport { SetResponseCookies } from '@decorators/set-response-cookies.decorator';\r\n\r\n// Guards\r\nimport { JwtAccessAuthGuard } from '@guards/jwt-access-auth.guard';\r\nimport { JwtRefreshAuthGuard } from '@guards/jwt-refresh-auth.guard';\r\n\r\n// Services\r\nimport { AuthService } from '@apis/user/auth/auth.service';\r\n\r\n// Body DTOs\r\nimport { LoginDto } from '@apis/user/auth/dtos/login.dto';\r\nimport { SignupDto } from '@apis/user/auth/dtos/signup.dto';\r\nimport { VerifyEmailDto } from '@apis/user/auth/dtos/verify-email.dto';\r\n\r\n// Serializer DTOs\r\nimport { NestedDataDto } from '@apis/user/serializer-dtos/nested-data.dto';\r\n\r\n// Swagger descriptors\r\nimport { autoLoginDescriptor } from '@apis/user/auth/api-descriptors/auto-login.descriptor';\r\nimport { loginDescriptor } from '@apis/user/auth/api-descriptors/login.descriptor';\r\nimport { logoutDescriptor } from '@apis/user/auth/api-descriptors/logout.discriptor';\r\nimport { refreshTokenDescriptor } from '@apis/user/auth/api-descriptors/refresh-token.descriptor';\r\nimport { resendVerificationTokenDescriptor } from '@apis/user/auth/api-descriptors/resend-verification-token.descriptor';\r\nimport { signupDescriptor } from '@apis/user/auth/api-descriptors/signup.descriptor';\r\nimport { updateTokensDescriptor } from '@apis/user/auth/api-descriptors/update-tokens.descriptor';\r\nimport { userDataDescriptor } from '@apis/user/auth/api-descriptors/user-data.descriptor';\r\nimport { verificationStatusDescriptor } from '@apis/user/auth/api-descriptors/verification-status.descriptor';\r\nimport { verifyEmailDescriptor } from '@apis/user/auth/api-descriptors/verify-email.descriptor';\r\nimport { waitingTimeDescriptor } from '@apis/user/auth/api-descriptors/waiting-time.descriptor';\r\n\r\n@ApiTags('User Authentication')\r\n@Controller('user/auth')\r\nexport class AuthController {\r\n  constructor(private readonly authService: AuthService) {}\r\n\r\n  @ApiDescriptor(signupDescriptor)\r\n  @Recaptcha()\r\n  @MaskEmail()\r\n  @Serialize(NestedDataDto)\r\n  @Post('signup')\r\n  @HttpCode(201)\r\n  public async signup(@Body() data: SignupDto) {\r\n    const result = await this.authService.signup(data);\r\n\r\n    // Send the response\r\n    return result;\r\n  }\r\n\r\n  @ApiDescriptor(loginDescriptor)\r\n  @MaskEmail()\r\n  @SetResponseCookies()\r\n  @Serialize(NestedDataDto)\r\n  @Post('login')\r\n  @HttpCode(200)\r\n  public async login(@Body() data: LoginDto) {\r\n    const result = await this.authService.login(data);\r\n\r\n    // Send the response\r\n    return result;\r\n  }\r\n\r\n  @ApiDescriptor(autoLoginDescriptor)\r\n  @UseGuards(JwtRefreshAuthGuard)\r\n  @SetResponseCookies()\r\n  @Serialize(NestedDataDto)\r\n  @MaskEmail()\r\n  @Post('auto-login')\r\n  @HttpCode(200)\r\n  public async autoLogin(@Req() request: Request) {\r\n    const data: { userId: string } = {\r\n      userId: request['userId'],\r\n    };\r\n\r\n    const result = await this.authService.autoLogin(data);\r\n\r\n    // Send the response\r\n    return result;\r\n  }\r\n\r\n  @ApiDescriptor(logoutDescriptor)\r\n  @UseGuards(JwtAccessAuthGuard, JwtRefreshAuthGuard)\r\n  @RemoveResponseCookies()\r\n  @Post('logout')\r\n  @HttpCode(200)\r\n  async logout(@Req() request: Request) {\r\n    const data: { userId: string; accessToken: string; refreshToken: string } = {\r\n      userId: request['userId'],\r\n      accessToken: request['accessToken'],\r\n      refreshToken: request['refreshToken'],\r\n    };\r\n\r\n    const result = await this.authService.logout(data);\r\n\r\n    // Send the response\r\n    return result;\r\n  }\r\n\r\n  @ApiDescriptor(refreshTokenDescriptor)\r\n  @UseGuards(JwtRefreshAuthGuard)\r\n  @SetResponseCookies()\r\n  @Serialize(NestedDataDto)\r\n  @Post('refresh-token')\r\n  @HttpCode(200)\r\n  public async refreshToken(@Req() request: Request) {\r\n    const data: { userId: string } = {\r\n      userId: request['userId'],\r\n    };\r\n\r\n    const result = await this.authService.refreshToken(data);\r\n\r\n    // Send the response\r\n    return result;\r\n  }\r\n\r\n  @ApiDescriptor(userDataDescriptor)\r\n  @UseGuards(JwtAccessAuthGuard)\r\n  @Serialize(NestedDataDto)\r\n  @MaskEmail()\r\n  @Get('user-data')\r\n  @HttpCode(200)\r\n  public async getUserData(@Req() request: Request) {\r\n    const data: { userId: string } = {\r\n      userId: request['userId'],\r\n    };\r\n\r\n    const result = await this.authService.getUserData(data);\r\n\r\n    // Send the response\r\n    return result;\r\n  }\r\n\r\n  @ApiDescriptor(verificationStatusDescriptor)\r\n  @UseGuards(JwtAccessAuthGuard)\r\n  @Get('verification-status')\r\n  @HttpCode(200)\r\n  public async getVerificationStatus(@Req() request: Request) {\r\n    const data: { email: string } = {\r\n      email: request['email'],\r\n    };\r\n\r\n    const result = await this.authService.getVerificationStatus(data);\r\n\r\n    // Send the response\r\n    return result;\r\n  }\r\n\r\n  @ApiDescriptor(resendVerificationTokenDescriptor)\r\n  @UseGuards(JwtAccessAuthGuard)\r\n  @Post('resend-verification-token')\r\n  @HttpCode(200)\r\n  public async resendVerificationToken(@Req() request: Request) {\r\n    const data: { email: string } = {\r\n      email: request['email'],\r\n    };\r\n\r\n    const result = await this.authService.resendVerificationToken(data);\r\n\r\n    // Send the response\r\n    return result;\r\n  }\r\n\r\n  @ApiDescriptor(verifyEmailDescriptor)\r\n  @Post('verify-email')\r\n  @HttpCode(200)\r\n  public async verifyEmail(@Body() data: VerifyEmailDto) {\r\n    const result = await this.authService.verifyEmail(data);\r\n\r\n    // Send the response\r\n    return result;\r\n  }\r\n\r\n  @ApiDescriptor(updateTokensDescriptor)\r\n  @UseGuards(JwtAccessAuthGuard, JwtRefreshAuthGuard)\r\n  @SetResponseCookies()\r\n  @Serialize(NestedDataDto)\r\n  @Post('update-tokens')\r\n  @HttpCode(200)\r\n  public async updateTokens(@Req() request: Request) {\r\n    const data: { userId: string; accessToken: string; refreshToken: string } = {\r\n      userId: request['userId'],\r\n      accessToken: request['accessToken'],\r\n      refreshToken: request['refreshToken'],\r\n    };\r\n\r\n    const result = await this.authService.updateTokens(data);\r\n\r\n    // Send the response\r\n    return result;\r\n  }\r\n\r\n  @ApiDescriptor(waitingTimeDescriptor)\r\n  @Get('waiting-time')\r\n  @HttpCode(200)\r\n  public getWaitingTime() {\r\n    const result = this.authService.getWaitingTime();\r\n\r\n    // Send the response\r\n    return result;\r\n  }\r\n}\r\n"],"names":["AuthController","constructor","authService","signup","data","result","login","autoLogin","request","userId","logout","accessToken","refreshToken","getUserData","getVerificationStatus","email","resendVerificationToken","verifyEmail","updateTokens","getWaitingTime"],"mappings":"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"}