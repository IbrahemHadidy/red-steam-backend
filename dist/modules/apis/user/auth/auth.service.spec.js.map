{"version":3,"sources":["../../../../../src/modules/apis/user/auth/auth.service.spec.ts"],"sourcesContent":["import { BadRequestException, Logger } from '@nestjs/common';\r\nimport { ConfigModule, ConfigService } from '@nestjs/config';\r\nimport { JwtService } from '@nestjs/jwt';\r\nimport { Test, TestingModule } from '@nestjs/testing';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { environmentConfig, getMongoTypeOrmConfig, getSqlTypeOrmConfig } from '@test/integration-setup';\r\n\r\n// Modules\r\nimport { TokenBlacklistModule } from '@repositories/mongo/token-blacklist/token-blacklist.module';\r\nimport { GamesTagsModule } from '@repositories/sql/games-tags/games-tags.module';\r\nimport { ReviewsModule } from '@repositories/sql/reviews/reviews.module';\r\nimport { UsersModule } from '@repositories/sql/users/users.module';\r\nimport { NodeMailerModule } from '@services/node-mailer/node-mailer.module';\r\n\r\n// Services\r\nimport { AuthService } from '@apis/user/auth/auth.service';\r\nimport { TokenBlacklistService } from '@repositories/mongo/token-blacklist/token-blacklist.service';\r\nimport { CompaniesService } from '@repositories/sql/companies/companies.service';\r\nimport { GamesFeaturesService } from '@repositories/sql/games-features/games-features.service';\r\nimport { GamesLanguagesService } from '@repositories/sql/games-languages/games-languages.service';\r\nimport { GamesPricingService } from '@repositories/sql/games-pricing/games-pricing.service';\r\nimport { GamesService } from '@repositories/sql/games/games.service';\r\nimport { ReviewsService } from '@repositories/sql/reviews/reviews.service';\r\nimport { UsersService } from '@repositories/sql/users/users.service';\r\nimport { NodeMailerService } from '@services/node-mailer/node-mailer.service';\r\n\r\n// Types\r\nimport type { User } from '@repositories/sql/users/user.entity';\r\n\r\ndescribe('AuthController', () => {\r\n  let data: { message: string; accessToken: string; refreshToken: string; userData: User & { identifier?: string } };\r\n  let authService: AuthService;\r\n  let usersService: UsersService;\r\n  let tokenBlacklistService: TokenBlacklistService;\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      imports: [\r\n        ConfigModule.forRoot(environmentConfig),\r\n        TypeOrmModule.forRootAsync({\r\n          inject: [ConfigService],\r\n          name: 'sql',\r\n          useFactory: async (configService: ConfigService) => getSqlTypeOrmConfig(configService),\r\n        }),\r\n        TypeOrmModule.forRootAsync({\r\n          inject: [ConfigService],\r\n          useFactory: async (configService: ConfigService) => getMongoTypeOrmConfig(configService),\r\n        }),\r\n        UsersModule,\r\n        GamesTagsModule,\r\n        NodeMailerModule,\r\n        TokenBlacklistModule,\r\n        ReviewsModule,\r\n      ],\r\n      providers: [\r\n        AuthService,\r\n        JwtService,\r\n        UsersService,\r\n        NodeMailerService,\r\n        ConfigService,\r\n        GamesService,\r\n        GamesFeaturesService,\r\n        GamesLanguagesService,\r\n        GamesPricingService,\r\n        CompaniesService,\r\n        TokenBlacklistService,\r\n        ReviewsService,\r\n        Logger,\r\n      ],\r\n    }).compile();\r\n\r\n    usersService = module.get<UsersService>(UsersService);\r\n    tokenBlacklistService = module.get<TokenBlacklistService>(TokenBlacklistService);\r\n    authService = module.get<AuthService>(AuthService);\r\n\r\n    // Register a user and login to get data sample for testing\r\n    await authService.signup({\r\n      username: 'test',\r\n      email: 'test@test.com',\r\n      password: 'password',\r\n      country: 'test',\r\n    });\r\n    data = await authService.login({\r\n      identifier: 'test',\r\n      password: 'password',\r\n      rememberMe: true,\r\n    });\r\n  });\r\n\r\n  afterEach(async () => {\r\n    await usersService.removeAll();\r\n    await tokenBlacklistService.clearAll();\r\n  });\r\n\r\n  describe('signup', () => {\r\n    it('should create a new user and send verification email', async () => {\r\n      // Call signup function\r\n      const result = await authService.signup({\r\n        username: 'test1',\r\n        email: 'test1@test.com',\r\n        password: 'password1',\r\n        country: 'test1',\r\n      });\r\n\r\n      // Assert\r\n      expect(result).toEqual({ message: 'Signup successful' });\r\n    });\r\n  });\r\n\r\n  describe('login', () => {\r\n    it('should login a user successfully', async () => {\r\n      // Call the login method\r\n      const result = await authService.login({\r\n        identifier: 'test',\r\n        password: 'password',\r\n        rememberMe: true,\r\n      });\r\n\r\n      // Assertions\r\n      expect(result).toEqual(\r\n        expect.objectContaining({\r\n          userData: expect.objectContaining({\r\n            country: 'test',\r\n            email: 'test@test.com',\r\n            username: 'test',\r\n            // Add other properties you want to check for here\r\n          }),\r\n        }),\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('autoLogin', () => {\r\n    it('should auto login successfully with valid token', async () => {\r\n      // Call the autoLogin method\r\n      const result = await authService.autoLogin({ userId: data.userData.id });\r\n\r\n      expect(result).toEqual({\r\n        message: 'Auto login successful',\r\n        userData: expect.objectContaining({\r\n          country: 'test',\r\n          email: 'test@test.com',\r\n          username: 'test',\r\n          // Add other properties you want to check for here\r\n        }),\r\n        accessToken: expect.stringMatching(/^Bearer .+$/),\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('logout', () => {\r\n    it('should logout successfully', async () => {\r\n      // Call the logout method\r\n      const result = await authService.logout({\r\n        userId: data.userData.id,\r\n        accessToken: data.accessToken,\r\n        refreshToken: data.refreshToken,\r\n      });\r\n\r\n      // Assertions\r\n      expect(result).toEqual({ message: 'Logout successful' });\r\n    });\r\n  });\r\n\r\n  describe('refreshToken', () => {\r\n    it('should refresh access token successfully', async () => {\r\n      // Call the refreshToken method\r\n      const result = await authService.refreshToken({ userId: data.userData.id });\r\n\r\n      // Assert\r\n      expect(result).toEqual({\r\n        message: 'Refresh token successful',\r\n        accessToken: expect.stringMatching(/^Bearer .+$/),\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('getUserData', () => {\r\n    it('should get user data successfully', async () => {\r\n      // Call the getUserData method\r\n      const result = await authService.getUserData({ userId: data.userData.id });\r\n\r\n      // Assertions\r\n      expect(result).toEqual({\r\n        userData: expect.objectContaining({\r\n          country: 'test',\r\n          email: 'test@test.com',\r\n          username: 'test',\r\n          // Add other properties you want to check for here\r\n        }),\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('getVerificationStatus', () => {\r\n    it('should get verification status successfully', async () => {\r\n      // Define the identifier\r\n      data.userData.identifier = data.userData.email || data.userData.username;\r\n\r\n      // Call the getVerificationStatus method\r\n      const result = await authService.getVerificationStatus(data.userData);\r\n\r\n      // Assertions\r\n      expect(result).toEqual({ verified: true });\r\n    });\r\n  });\r\n\r\n  describe('resendVerificationToken', () => {\r\n    it('should resend verification token successfully', async () => {\r\n      // Call the resendVerificationToken method\r\n      const result = await authService.resendVerificationToken(data.userData);\r\n\r\n      // Fast-forward the timers\r\n      jest.useFakeTimers();\r\n      jest.runAllTimers();\r\n      jest.useRealTimers();\r\n\r\n      // Assertions\r\n      expect(result).toEqual({ message: 'Verification email sent' });\r\n    });\r\n\r\n    it('should throw BadRequestException if user is already verified', async () => {\r\n      // Call the resendVerificationToken method and expect it to throw BadRequestException\r\n      await expect(authService.resendVerificationToken(data.userData)).rejects.toThrow(BadRequestException);\r\n    });\r\n  });\r\n\r\n  describe('verifyEmail', () => {\r\n    it('should verify email successfully', async () => {\r\n      // construct verify data\r\n      const verifyData = {\r\n        username: data.userData.username,\r\n        email: data.userData.email,\r\n        token: data.userData.verificationToken,\r\n      };\r\n\r\n      // Call the verifyEmail method\r\n      const result = await authService.verifyEmail(verifyData);\r\n\r\n      // Assertions\r\n      expect(result).toEqual({ message: 'Email verified successfully' });\r\n    });\r\n\r\n    it('should throw BadRequestException if verification token is invalid', async () => {\r\n      // construct verify data with fake verification token\r\n      const verifyData = {\r\n        username: data.userData.username,\r\n        email: data.userData.email,\r\n        token: 'invalid-token',\r\n      };\r\n\r\n      // Call the verifyEmail method and expect it to throw BadRequestException\r\n      await expect(authService.verifyEmail(verifyData)).rejects.toThrow(BadRequestException);\r\n    });\r\n  });\r\n\r\n  describe('updateTokens', () => {\r\n    it('should update tokens successfully', async () => {\r\n      // Call the updateTokens method\r\n      const result = await authService.updateTokens({\r\n        userId: data.userData.id,\r\n        accessToken: data.accessToken,\r\n        refreshToken: data.refreshToken,\r\n      });\r\n\r\n      // Assertions\r\n      expect(result).toEqual({\r\n        accessToken: expect.stringMatching(/^Bearer .+$/),\r\n        refreshToken: expect.stringMatching(/^Bearer .+$/),\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('getWaitingTime', () => {\r\n    it('should return waiting time in milliseconds', () => {\r\n      // Call the method\r\n      const result = authService.getWaitingTime();\r\n\r\n      // Assert\r\n      expect(result).toEqual({ waitingTime: 20 * 60 * 1000 });\r\n    });\r\n  });\r\n});\r\n"],"names":["describe","data","authService","usersService","tokenBlacklistService","beforeEach","module","Test","createTestingModule","imports","ConfigModule","forRoot","environmentConfig","TypeOrmModule","forRootAsync","inject","ConfigService","name","useFactory","configService","getSqlTypeOrmConfig","getMongoTypeOrmConfig","UsersModule","GamesTagsModule","NodeMailerModule","TokenBlacklistModule","ReviewsModule","providers","AuthService","JwtService","UsersService","NodeMailerService","GamesService","GamesFeaturesService","GamesLanguagesService","GamesPricingService","CompaniesService","TokenBlacklistService","ReviewsService","Logger","compile","get","signup","username","email","password","country","login","identifier","rememberMe","afterEach","removeAll","clearAll","it","result","expect","toEqual","message","objectContaining","userData","autoLogin","userId","id","accessToken","stringMatching","logout","refreshToken","getUserData","getVerificationStatus","verified","resendVerificationToken","jest","useFakeTimers","runAllTimers","useRealTimers","rejects","toThrow","BadRequestException","verifyData","token","verificationToken","verifyEmail","updateTokens","getWaitingTime","waitingTime"],"mappings":"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"}