{"version":3,"sources":["../../../../src/modules/apis/user/user.service.ts"],"sourcesContent":["// NodeJS crypto\r\nimport { randomBytes, scryptSync } from 'crypto';\r\n\r\n// NestJS\r\nimport { Injectable, Logger, NotFoundException, UnauthorizedException } from '@nestjs/common';\r\n\r\n// Services\r\nimport { UsersService } from '@repositories/sql/users/users.service';\r\n\r\n// Types\r\nimport type { User } from '@repositories/sql/users/user.entity';\r\n\r\n@Injectable()\r\nexport class UserService {\r\n  constructor(\r\n    private readonly user: UsersService,\r\n    private readonly logger: Logger,\r\n  ) {}\r\n\r\n  /**\r\n   * Hashes a password using the Scrypt algorithm\r\n   * @param password The password to hash\r\n   * @returns The hashed password\r\n   */\r\n  public async hashPassword(password: string): Promise<string> {\r\n    this.logger.log('Hashing password');\r\n\r\n    // Generate a random salt\r\n    const salt = randomBytes(8).toString('hex');\r\n\r\n    // Hash the password\r\n    const hashBuffer = scryptSync(password, salt, 64);\r\n\r\n    // Create the hashed password\r\n    const hashedPassword = `${salt}:${hashBuffer.toString('hex')}`;\r\n\r\n    // Return the hashed password\r\n    this.logger.log('Password hashed successfully');\r\n    return hashedPassword;\r\n  }\r\n\r\n  /**\r\n   * Compares a plain text password with a hashed password\r\n   * @param plainPassword The plain text password\r\n   * @param hashedPassword The hashed password\r\n   * @returns True if the passwords match, false otherwise\r\n   * @throws `UnauthorizedException` if the passwords don't match\r\n   */\r\n  public async comparePassword(plainPassword: string, hashedPassword: string): Promise<boolean> {\r\n    this.logger.log('Comparing passwords');\r\n\r\n    // Extract the salt from the hashed password\r\n    const [salt, storedHash] = hashedPassword.split(':');\r\n\r\n    // Hash the plain text password\r\n    const hashBuffer = scryptSync(plainPassword, salt, 64);\r\n\r\n    // Create the hashed password\r\n    const hash = hashBuffer.toString('hex');\r\n\r\n    // Compare the hashes and throw an unauthorized exception if they don't match\r\n    if (storedHash !== hash) {\r\n      this.logger.warn('Password comparison failed');\r\n      throw new UnauthorizedException('Invalid password');\r\n    }\r\n\r\n    // Return true if the passwords match\r\n    this.logger.log('Password comparison successful');\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Finds a user by email, username, id or identifier\r\n   * @param key The identifier of the user\r\n   * @param {'username' | 'email' | 'id' | 'identifier'} type The type of the identifier;\r\n   * @returns The created user data\r\n   */\r\n  public async findUser(key: string, type: 'email' | 'username' | 'id' | 'identifier', reviews = false): Promise<User> {\r\n    this.logger.log(`findUser called with ${type}: ${key}`);\r\n\r\n    let user: User;\r\n    switch (type) {\r\n      case 'email':\r\n        user = await this.user.getByEmail(key, reviews);\r\n        break;\r\n      case 'username':\r\n        user = await this.user.getByUsername(key, reviews);\r\n        break;\r\n      case 'id':\r\n        user = await this.user.getById(key, reviews);\r\n        break;\r\n      case 'identifier':\r\n        user = await this.user.getByEmailOrUsername(key, reviews);\r\n        break;\r\n    }\r\n    if (!user) {\r\n      // Throw a not found exception if the user does not exist\r\n      this.logger.error(`Could not find a user with ${type}: ${key}`);\r\n      throw new NotFoundException('User not found');\r\n    }\r\n\r\n    // Return the user if it exists\r\n    this.logger.log(`User found with ${type}: ${key}`);\r\n    return user;\r\n  }\r\n\r\n  /**\r\n   * Check if user is verified\r\n   * @param user The user object\r\n   * @throws `UnauthorizedException` If user is not verified\r\n   */\r\n  public async checkVerified(user: User) {\r\n    if (!user.isVerified) {\r\n      // Throw an unauthorized exception if the user is not verified\r\n      this.logger.error(`User is not verified`);\r\n      throw new UnauthorizedException('User is not verified');\r\n    }\r\n  }\r\n}\r\n"],"names":["UserService","constructor","user","logger","hashPassword","password","log","salt","randomBytes","toString","hashBuffer","scryptSync","hashedPassword","comparePassword","plainPassword","storedHash","split","hash","warn","UnauthorizedException","findUser","key","type","reviews","getByEmail","getByUsername","getById","getByEmailOrUsername","error","NotFoundException","checkVerified","isVerified"],"mappings":"AAAA,gBAAgB;;;;;+BAaHA;;;eAAAA;;;wBAZ2B;wBAGqC;8BAGhD;;;;;;;;;;AAMtB,IAAA,AAAMA,cAAN,MAAMA;IACXC,YACE,AAAiBC,IAAkB,EACnC,AAAiBC,MAAc,CAC/B;aAFiBD,OAAAA;aACAC,SAAAA;IAChB;IAEH;;;;GAIC,GACD,MAAaC,aAAaC,QAAgB,EAAmB;QAC3D,IAAI,CAACF,MAAM,CAACG,GAAG,CAAC;QAEhB,yBAAyB;QACzB,MAAMC,OAAOC,IAAAA,mBAAW,EAAC,GAAGC,QAAQ,CAAC;QAErC,oBAAoB;QACpB,MAAMC,aAAaC,IAAAA,kBAAU,EAACN,UAAUE,MAAM;QAE9C,6BAA6B;QAC7B,MAAMK,iBAAiB,GAAGL,KAAK,CAAC,EAAEG,WAAWD,QAAQ,CAAC,QAAQ;QAE9D,6BAA6B;QAC7B,IAAI,CAACN,MAAM,CAACG,GAAG,CAAC;QAChB,OAAOM;IACT;IAEA;;;;;;GAMC,GACD,MAAaC,gBAAgBC,aAAqB,EAAEF,cAAsB,EAAoB;QAC5F,IAAI,CAACT,MAAM,CAACG,GAAG,CAAC;QAEhB,4CAA4C;QAC5C,MAAM,CAACC,MAAMQ,WAAW,GAAGH,eAAeI,KAAK,CAAC;QAEhD,+BAA+B;QAC/B,MAAMN,aAAaC,IAAAA,kBAAU,EAACG,eAAeP,MAAM;QAEnD,6BAA6B;QAC7B,MAAMU,OAAOP,WAAWD,QAAQ,CAAC;QAEjC,6EAA6E;QAC7E,IAAIM,eAAeE,MAAM;YACvB,IAAI,CAACd,MAAM,CAACe,IAAI,CAAC;YACjB,MAAM,IAAIC,6BAAqB,CAAC;QAClC;QAEA,qCAAqC;QACrC,IAAI,CAAChB,MAAM,CAACG,GAAG,CAAC;QAChB,OAAO;IACT;IAEA;;;;;GAKC,GACD,MAAac,SAASC,GAAW,EAAEC,IAAgD,EAAEC,UAAU,KAAK,EAAiB;QACnH,IAAI,CAACpB,MAAM,CAACG,GAAG,CAAC,CAAC,qBAAqB,EAAEgB,KAAK,EAAE,EAAED,KAAK;QAEtD,IAAInB;QACJ,OAAQoB;YACN,KAAK;gBACHpB,OAAO,MAAM,IAAI,CAACA,IAAI,CAACsB,UAAU,CAACH,KAAKE;gBACvC;YACF,KAAK;gBACHrB,OAAO,MAAM,IAAI,CAACA,IAAI,CAACuB,aAAa,CAACJ,KAAKE;gBAC1C;YACF,KAAK;gBACHrB,OAAO,MAAM,IAAI,CAACA,IAAI,CAACwB,OAAO,CAACL,KAAKE;gBACpC;YACF,KAAK;gBACHrB,OAAO,MAAM,IAAI,CAACA,IAAI,CAACyB,oBAAoB,CAACN,KAAKE;gBACjD;QACJ;QACA,IAAI,CAACrB,MAAM;YACT,yDAAyD;YACzD,IAAI,CAACC,MAAM,CAACyB,KAAK,CAAC,CAAC,2BAA2B,EAAEN,KAAK,EAAE,EAAED,KAAK;YAC9D,MAAM,IAAIQ,yBAAiB,CAAC;QAC9B;QAEA,+BAA+B;QAC/B,IAAI,CAAC1B,MAAM,CAACG,GAAG,CAAC,CAAC,gBAAgB,EAAEgB,KAAK,EAAE,EAAED,KAAK;QACjD,OAAOnB;IACT;IAEA;;;;GAIC,GACD,MAAa4B,cAAc5B,IAAU,EAAE;QACrC,IAAI,CAACA,KAAK6B,UAAU,EAAE;YACpB,8DAA8D;YAC9D,IAAI,CAAC5B,MAAM,CAACyB,KAAK,CAAC,CAAC,oBAAoB,CAAC;YACxC,MAAM,IAAIT,6BAAqB,CAAC;QAClC;IACF;AACF"}