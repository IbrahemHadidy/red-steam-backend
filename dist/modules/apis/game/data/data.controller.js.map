{"version":3,"sources":["../../../../../src/modules/apis/game/data/data.controller.ts"],"sourcesContent":["// NestJS\r\nimport { Controller, Get, HttpCode, Param, ParseIntPipe, Query } from '@nestjs/common';\r\n\r\n// Swagger\r\nimport { ApiDescriptor } from '@decorators/api-descriptor.decorator';\r\nimport { ApiTags } from '@nestjs/swagger';\r\n\r\n// Decorators\r\nimport { Serialize } from '@decorators/serialize.decorator';\r\n\r\n// Pipes\r\nimport { ParseQueryArrayPipe } from '@pipes/parse-query-array.pipe';\r\nimport { ParseQueryBoolPipe } from '@pipes/parse-query-boolean.pipe';\r\nimport { ParseQueryIntPipe } from '@pipes/parse-query-integer.pipe';\r\nimport { UnionTypeValidationPipe } from '@pipes/union-type-validation.pipe';\r\n\r\n// Services\r\nimport { DataService } from '@apis/game/data/data.service';\r\n\r\n// Serializing DTOs\r\nimport { GameDto } from '@apis/game/serializer-dtos/game.dto';\r\nimport { ReviewDto } from '@apis/review/serializer-dtos/review.dto';\r\n// import { PaginatedGamesDataDto } from '@apis/game/serializer-dtos/paginated-games-data.dto';\r\n\r\n// importing swagger descriptors\r\nimport { getByIdDescriptor } from '@apis/game/data/api-descriptors/get-by-id.descriptor';\r\nimport { getByIdsDescriptor } from '@apis/game/data/api-descriptors/get-by-ids.descriptor';\r\nimport { getByNewestDescriptor } from '@apis/game/data/api-descriptors/get-by-newest.descriptor';\r\nimport { getByOffersDescriptor } from '@apis/game/data/api-descriptors/get-by-offers.descriptor';\r\nimport { getByParametersDescriptor } from '@apis/game/data/api-descriptors/get-by-parameters.descriptor';\r\nimport { getByPartialNameDescriptor } from '@apis/game/data/api-descriptors/get-by-partial-name.descriptor';\r\nimport { getBySpecialsDescriptor } from '@apis/game/data/api-descriptors/get-by-specials.descriptor';\r\nimport { getByTagsDescriptor } from '@apis/game/data/api-descriptors/get-by-tags.descriptor';\r\nimport { getByTopSalesDescriptor } from '@apis/game/data/api-descriptors/get-by-top-sales.descriptor';\r\nimport { getByUpcomingDescriptor } from '@apis/game/data/api-descriptors/get-by-upcoming.descriptor';\r\nimport { getFeaturedDescriptor } from '@apis/game/data/api-descriptors/get-featured.descriptor';\r\nimport { getGameReviewsDescriptor } from '@apis/game/data/api-descriptors/get-game-reviews.descriptor';\r\n\r\n@ApiTags('Game Data')\r\n@Controller('game/data')\r\nexport class DataController {\r\n  constructor(private readonly dataService: DataService) {}\r\n\r\n  @ApiDescriptor(getByPartialNameDescriptor)\r\n  @Serialize(GameDto)\r\n  @Get('search/:partialName')\r\n  @HttpCode(200)\r\n  async search(@Param('partialName') partialName: string) {\r\n    const result = await this.dataService.getByPartialName(partialName);\r\n\r\n    // Send the response\r\n    return result;\r\n  }\r\n\r\n  @ApiDescriptor(getByParametersDescriptor)\r\n  @Serialize(GameDto)\r\n  @Get('search')\r\n  @HttpCode(200)\r\n  async getByParameters(\r\n    @Query(\r\n      'sort',\r\n      new UnionTypeValidationPipe(\r\n        ['relevance', 'name', 'lowestPrice', 'highestPrice', 'releaseDate', 'reviews', 'totalSales'],\r\n        { optional: true },\r\n      ),\r\n    )\r\n    sort?: 'relevance' | 'name' | 'lowestPrice' | 'highestPrice' | 'releaseDate' | 'reviews' | 'totalSales',\r\n    @Query('partialName') partialName?: string,\r\n    @Query('maxPrice') maxPrice?: string,\r\n    @Query('tags', new ParseQueryArrayPipe({ items: Number })) tags?: number[],\r\n    @Query('excludeTags', new ParseQueryArrayPipe({ items: Number })) excludeTags?: number[],\r\n    @Query('paid', new ParseQueryBoolPipe()) paid?: boolean,\r\n    @Query('offers', new ParseQueryBoolPipe()) offers?: boolean,\r\n    @Query('platforms', new ParseQueryArrayPipe({ items: String }))\r\n    platforms?: ('win' | 'mac')[],\r\n    @Query('publishers', new ParseQueryArrayPipe({ items: Number })) publishers?: number[],\r\n    @Query('developers', new ParseQueryArrayPipe({ items: Number })) developers?: number[],\r\n    @Query('features', new ParseQueryArrayPipe({ items: Number })) features?: number[],\r\n    @Query('languages', new ParseQueryArrayPipe({ items: Number })) languages?: number[],\r\n    @Query('featured', new ParseQueryBoolPipe()) featured?: boolean,\r\n    @Query('excludeMature', new ParseQueryBoolPipe()) excludeMature?: boolean,\r\n    @Query('excludedGames', new ParseQueryArrayPipe({ items: Number }))\r\n    excludedGames?: number[],\r\n    @Query('upcomingMode', new UnionTypeValidationPipe(['onlyUpcoming', 'exclude'], { optional: true }))\r\n    upcomingMode?: 'onlyUpcoming' | 'exclude',\r\n    @Query('page', new ParseQueryIntPipe()) page?: number,\r\n    @Query('limit', new ParseQueryIntPipe()) limit?: number,\r\n  ) {\r\n    const result = await this.dataService.getByParameters(\r\n      {\r\n        sort,\r\n        partialName,\r\n        maxPrice,\r\n        tags,\r\n        excludeTags,\r\n        paid,\r\n        offers,\r\n        platforms,\r\n        publishers,\r\n        developers,\r\n        features,\r\n        languages,\r\n        featured,\r\n        excludeMature,\r\n        excludedGames,\r\n        upcomingMode,\r\n      },\r\n      {\r\n        page,\r\n        limit,\r\n      },\r\n    );\r\n\r\n    // Send the response\r\n    return result;\r\n  }\r\n\r\n  @ApiDescriptor(getFeaturedDescriptor)\r\n  @Serialize(GameDto)\r\n  @Get('featured')\r\n  @HttpCode(200)\r\n  async getFeatured(\r\n    @Query('excludedGames', new ParseQueryArrayPipe({ items: Number }))\r\n    excludedGames: number[] = [],\r\n    @Query('limit', ParseIntPipe) limit: number = 10,\r\n  ) {\r\n    const result = await this.dataService.getFeaturedGames(excludedGames, limit);\r\n\r\n    // Send the response\r\n    return result;\r\n  }\r\n\r\n  @ApiDescriptor(getByTagsDescriptor)\r\n  @Serialize(GameDto)\r\n  @Get('tags')\r\n  @HttpCode(200)\r\n  async getByUserTags(\r\n    @Query('tags', new ParseQueryArrayPipe({ items: Number }))\r\n    tags: number[] = [],\r\n    @Query('excludedGames', new ParseQueryArrayPipe({ items: Number }))\r\n    excludedGames: number[] = [],\r\n    @Query('limit', ParseIntPipe)\r\n    limit: number,\r\n  ) {\r\n    const result = await this.dataService.getByUserTags(tags, excludedGames, limit);\r\n\r\n    // Send the response\r\n    return result;\r\n  }\r\n\r\n  @ApiDescriptor(getByIdDescriptor)\r\n  @Serialize(GameDto)\r\n  @Get(':id')\r\n  @HttpCode(200)\r\n  async getById(@Param('id', ParseIntPipe) id: number) {\r\n    const result = await this.dataService.getById(id);\r\n\r\n    // Send the response\r\n    return result;\r\n  }\r\n\r\n  @ApiDescriptor(getByIdsDescriptor)\r\n  @Serialize(GameDto)\r\n  @Get('bulk')\r\n  @HttpCode(200)\r\n  async getByIds(@Query('ids', new ParseQueryArrayPipe({ items: Number })) ids?: number[]) {\r\n    const result = await this.dataService.getByIds(ids);\r\n\r\n    // Send the response\r\n    return result;\r\n  }\r\n\r\n  @ApiDescriptor(getByOffersDescriptor)\r\n  @Serialize(GameDto)\r\n  @Get('offers')\r\n  @HttpCode(200)\r\n  async getByOffers(\r\n    @Query('excludedGames', new ParseQueryArrayPipe({ items: Number }))\r\n    excludedGames: number[] = [],\r\n  ) {\r\n    const result = await this.dataService.getByOffers(excludedGames);\r\n\r\n    // Send the response\r\n    return result;\r\n  }\r\n\r\n  @ApiDescriptor(getByNewestDescriptor)\r\n  @Serialize(GameDto)\r\n  @Get('newest')\r\n  @HttpCode(200)\r\n  async getByNewest(\r\n    @Query('excludedGames', new ParseQueryArrayPipe({ items: Number }))\r\n    excludedGames: number[] = [],\r\n  ) {\r\n    const result = await this.dataService.getByNewest(excludedGames);\r\n\r\n    // Send the response\r\n    return result;\r\n  }\r\n\r\n  @ApiDescriptor(getByTopSalesDescriptor)\r\n  @Serialize(GameDto)\r\n  @Get('top-sales')\r\n  @HttpCode(200)\r\n  async getByTopSales(\r\n    @Query('excludedGames', new ParseQueryArrayPipe({ items: Number }))\r\n    excludedGames: number[] = [],\r\n  ) {\r\n    const result = await this.dataService.getByTopSales(excludedGames);\r\n\r\n    // Send the response\r\n    return result;\r\n  }\r\n\r\n  @ApiDescriptor(getBySpecialsDescriptor)\r\n  @Serialize(GameDto)\r\n  @Get('specials')\r\n  @HttpCode(200)\r\n  async getBySpecials(\r\n    @Query('excludedGames', new ParseQueryArrayPipe({ items: Number }))\r\n    excludedGames: number[] = [],\r\n  ) {\r\n    const result = await this.dataService.getBySpecials(excludedGames);\r\n\r\n    // Send the response\r\n    return result;\r\n  }\r\n\r\n  @ApiDescriptor(getByUpcomingDescriptor)\r\n  @Serialize(GameDto)\r\n  @Get('upcoming')\r\n  @HttpCode(200)\r\n  async getByUpcoming(\r\n    @Query('excludedGames', new ParseQueryArrayPipe({ items: Number }))\r\n    excludedGames: number[] = [],\r\n  ) {\r\n    const result = await this.dataService.getByUpcoming(excludedGames);\r\n\r\n    // Send the response\r\n    return result;\r\n  }\r\n\r\n  @ApiDescriptor(getGameReviewsDescriptor)\r\n  @Serialize(ReviewDto)\r\n  @Get(':gameId/reviews')\r\n  @HttpCode(200)\r\n  async getGameReviews(\r\n    @Param('gameId', ParseIntPipe) gameId: number,\r\n    @Query('filter', new UnionTypeValidationPipe(['positive', 'negative', 'all']))\r\n    filter: 'positive' | 'negative' | 'all',\r\n    @Query('sort', new UnionTypeValidationPipe(['newest', 'oldest'])) sort: 'newest' | 'oldest',\r\n    @Query('offset', ParseIntPipe) offset: number,\r\n    @Query('limit', ParseIntPipe) limit: number,\r\n  ) {\r\n    const result = await this.dataService.getGameReviews(gameId, filter, sort, {\r\n      offset,\r\n      limit,\r\n    });\r\n\r\n    // Send the response\r\n    return result;\r\n  }\r\n}\r\n"],"names":["DataController","constructor","dataService","search","partialName","result","getByPartialName","getByParameters","sort","maxPrice","tags","excludeTags","paid","offers","platforms","publishers","developers","features","languages","featured","excludeMature","excludedGames","upcomingMode","page","limit","getFeatured","getFeaturedGames","getByUserTags","getById","id","getByIds","ids","getByOffers","getByNewest","getByTopSales","getBySpecials","getByUpcoming","getGameReviews","gameId","filter","offset","UnionTypeValidationPipe","optional","ParseQueryArrayPipe","items","Number","ParseQueryBoolPipe","String","ParseQueryIntPipe"],"mappings":"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"}