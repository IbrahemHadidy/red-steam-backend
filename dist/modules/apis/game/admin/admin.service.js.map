{"version":3,"sources":["../../../../../src/modules/apis/game/admin/admin.service.ts"],"sourcesContent":["// NodeJS path\r\nimport path from 'path';\r\n\r\n// NestJS\r\nimport { Injectable, InternalServerErrorException, Logger } from '@nestjs/common';\r\n\r\n// Services\r\nimport { GamesService } from '@repositories/sql/games/games.service';\r\nimport { GameStorageService } from '@services/dropbox/game-storage.service';\r\n\r\n// Types\r\nimport type { File } from '@nest-lab/fastify-multer';\r\nimport type { ImageEntry, ThumbnailsEntry, VideoEntry } from '@repositories/sql/games/game.entity';\r\nimport type { CreateData, UpdateData } from './admin.types';\r\n\r\n@Injectable()\r\nexport class AdminService {\r\n  constructor(\r\n    private readonly logger: Logger,\r\n    private readonly game: GamesService,\r\n    private readonly storage: GameStorageService,\r\n  ) {}\r\n\r\n  /**\r\n   * Create a new game\r\n   * @param data An object containing the game data\r\n   * @returns A success message\r\n   */\r\n  public async createGame(data: CreateData): Promise<{ message: string; id: number }> {\r\n    this.logger.log(`Creating game`);\r\n\r\n    try {\r\n      // Upload thumbnail images sequentially\r\n      const thumbnailEntries: ThumbnailsEntry = {\r\n        mainImage: await this.uploadFile(\r\n          data.thumbnailEntries.mainImage,\r\n          data.name,\r\n          `thumbnails/mainImage${path.extname(data.thumbnailEntries.mainImage.originalname)}`,\r\n          ['image/jpeg'],\r\n        ),\r\n        backgroundImage: await this.uploadFile(\r\n          data.thumbnailEntries.backgroundImage,\r\n          data.name,\r\n          `thumbnails/backgroundImage${path.extname(data.thumbnailEntries.backgroundImage.originalname)}`,\r\n          ['image/jpeg'],\r\n        ),\r\n        menuImg: await this.uploadFile(\r\n          data.thumbnailEntries.menuImg,\r\n          data.name,\r\n          `thumbnails/menuImg${path.extname(data.thumbnailEntries.menuImg.originalname)}`,\r\n          ['image/jpeg'],\r\n        ),\r\n        horizontalHeaderImage: await this.uploadFile(\r\n          data.thumbnailEntries.horizontalHeaderImage,\r\n          data.name,\r\n          `thumbnails/horizontalHeaderImage${path.extname(data.thumbnailEntries.horizontalHeaderImage.originalname)}`,\r\n          ['image/jpeg'],\r\n        ),\r\n        verticalHeaderImage: await this.uploadFile(\r\n          data.thumbnailEntries.verticalHeaderImage,\r\n          data.name,\r\n          `thumbnails/verticalHeaderImage${path.extname(data.thumbnailEntries.verticalHeaderImage.originalname)}`,\r\n          ['image/jpeg'],\r\n        ),\r\n        smallHeaderImage: await this.uploadFile(\r\n          data.thumbnailEntries.smallHeaderImage,\r\n          data.name,\r\n          `thumbnails/smallHeaderImage${path.extname(data.thumbnailEntries.smallHeaderImage.originalname)}`,\r\n          ['image/jpeg'],\r\n        ),\r\n        searchImage: await this.uploadFile(\r\n          data.thumbnailEntries.searchImage,\r\n          data.name,\r\n          `thumbnails/searchImage${path.extname(data.thumbnailEntries.searchImage.originalname)}`,\r\n          ['image/jpeg'],\r\n        ),\r\n        tabImage: await this.uploadFile(\r\n          data.thumbnailEntries.tabImage,\r\n          data.name,\r\n          `thumbnails/tabImage${path.extname(data.thumbnailEntries.tabImage.originalname)}`,\r\n          ['image/jpeg'],\r\n        ),\r\n      };\r\n\r\n      // Upload image entries sequentially\r\n      const imageEntries: ImageEntry[] = [];\r\n      for (const imageEntry of data.imageEntries) {\r\n        const link = await this.uploadFile(\r\n          imageEntry.image,\r\n          data.name,\r\n          `images/${imageEntry.order}${path.extname(imageEntry.image.originalname)}`,\r\n          ['image/jpeg'],\r\n        );\r\n        imageEntries.push({\r\n          featured: imageEntry.featured,\r\n          order: imageEntry.order,\r\n          link,\r\n        });\r\n      }\r\n\r\n      // Upload video entries sequentially\r\n      const videoEntries: VideoEntry[] = [];\r\n      for (const videoEntry of data.videoEntries) {\r\n        const link = await this.uploadFile(\r\n          videoEntry.video,\r\n          data.name,\r\n          `videos/${videoEntry.order}${path.extname(videoEntry.video.originalname)}`,\r\n          ['video/webm'],\r\n        );\r\n        const posterLink = await this.uploadFile(\r\n          videoEntry.poster,\r\n          data.name,\r\n          `videos/${videoEntry.order}-poster${path.extname(videoEntry.poster.originalname)}`,\r\n          ['image/jpeg'],\r\n        );\r\n        videoEntries.push({\r\n          order: videoEntry.order,\r\n          link,\r\n          posterLink,\r\n        });\r\n      }\r\n\r\n      // Construct game data\r\n      const gameData = {\r\n        name: data.name,\r\n        category: data.category,\r\n        description: data.description,\r\n        releaseDate: data.releaseDate,\r\n        featured: data.featured,\r\n        publishers: data.publishers,\r\n        developers: data.developers,\r\n        thumbnailEntries,\r\n        imageEntries,\r\n        videoEntries,\r\n        pricing: data.pricing,\r\n        tags: data.tags,\r\n        features: data.features,\r\n        languages: data.languages,\r\n        platformEntries: data.platformEntries,\r\n        link: data.link,\r\n        about: data.about,\r\n        mature: data.mature,\r\n        matureDescription: data.matureDescription,\r\n        systemRequirements: data.systemRequirements,\r\n        legal: data.legal,\r\n      };\r\n\r\n      // Create game\r\n      const { id } = await this.game.create(gameData);\r\n\r\n      // Return success message\r\n      return { message: 'Game created successfully', id };\r\n    } catch (e: unknown) {\r\n      if (e instanceof Error) {\r\n        this.logger.error(`Failed to create game: ${e.message}`, e.stack);\r\n      }\r\n\r\n      try {\r\n        await this.storage.deleteGame(data.name);\r\n        this.logger.log(`Game ${data.name} deleted from storage after failed creation.`);\r\n      } catch (deleteError: unknown) {\r\n        if (deleteError instanceof Error) {\r\n          this.logger.error(`Failed to delete game after creation error: ${deleteError.message}`, deleteError.stack);\r\n        }\r\n      }\r\n\r\n      throw new InternalServerErrorException('Failed to create game');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update game by ID\r\n   * @param data An object containing the updated game data and the ID of the game to update\r\n   * @returns A message indicating the success of the operation\r\n   */\r\n  public async updateGame(data: UpdateData): Promise<{ message: string }> {\r\n    this.logger.log(`Updating game with ID: ${data.id}`);\r\n    this.logger.verbose(\r\n      `Updating game with data: ${JSON.stringify({\r\n        ...data,\r\n        addedVideos: data.addedVideos.map((v) => v.order),\r\n        addedScreenshots: data.addedScreenshots.map((s) => s.order),\r\n      })}`,\r\n    );\r\n\r\n    // Get storage name\r\n    const { storageName } = await this.game.getById(data.id);\r\n\r\n    // Change the updated thumbnails\r\n    const changedThumbnails: ThumbnailsEntry = {\r\n      mainImage: data.changedThumbnails.mainImage\r\n        ? await this.uploadFile(\r\n            data.changedThumbnails.mainImage,\r\n            storageName,\r\n            `thumbnails/mainImage${path.extname(data.changedThumbnails.mainImage.originalname)}`,\r\n            ['image/jpeg'],\r\n            true,\r\n          )\r\n        : undefined,\r\n      backgroundImage: data.changedThumbnails.backgroundImage\r\n        ? await this.uploadFile(\r\n            data.changedThumbnails.backgroundImage,\r\n            storageName,\r\n            `thumbnails/backgroundImage${path.extname(data.changedThumbnails.backgroundImage.originalname)}`,\r\n            ['image/jpeg'],\r\n            true,\r\n          )\r\n        : undefined,\r\n      menuImg: data.changedThumbnails.menuImg\r\n        ? await this.uploadFile(\r\n            data.changedThumbnails.menuImg,\r\n            storageName,\r\n            `thumbnails/menuImg${path.extname(data.changedThumbnails.menuImg.originalname)}`,\r\n            ['image/jpeg'],\r\n            true,\r\n          )\r\n        : undefined,\r\n      horizontalHeaderImage: data.changedThumbnails.horizontalHeaderImage\r\n        ? await this.uploadFile(\r\n            data.changedThumbnails.horizontalHeaderImage,\r\n            storageName,\r\n            `thumbnails/horizontalHeaderImage${path.extname(data.changedThumbnails.horizontalHeaderImage.originalname)}`,\r\n            ['image/jpeg'],\r\n            true,\r\n          )\r\n        : undefined,\r\n      verticalHeaderImage: data.changedThumbnails.verticalHeaderImage\r\n        ? await this.uploadFile(\r\n            data.changedThumbnails.verticalHeaderImage,\r\n            storageName,\r\n            `thumbnails/verticalHeaderImage${path.extname(data.changedThumbnails.verticalHeaderImage.originalname)}`,\r\n            ['image/jpeg'],\r\n            true,\r\n          )\r\n        : undefined,\r\n      smallHeaderImage: data.changedThumbnails.smallHeaderImage\r\n        ? await this.uploadFile(\r\n            data.changedThumbnails.smallHeaderImage,\r\n            storageName,\r\n            `thumbnails/smallHeaderImage${path.extname(data.changedThumbnails.smallHeaderImage.originalname)}`,\r\n            ['image/jpeg'],\r\n            true,\r\n          )\r\n        : undefined,\r\n      searchImage: data.changedThumbnails.searchImage\r\n        ? await this.uploadFile(\r\n            data.changedThumbnails.searchImage,\r\n            storageName,\r\n            `thumbnails/searchImage${path.extname(data.changedThumbnails.searchImage.originalname)}`,\r\n            ['image/jpeg'],\r\n            true,\r\n          )\r\n        : undefined,\r\n      tabImage: data.changedThumbnails.tabImage\r\n        ? await this.uploadFile(\r\n            data.changedThumbnails.tabImage,\r\n            storageName,\r\n            `thumbnails/tabImage${path.extname(data.changedThumbnails.tabImage.originalname)}`,\r\n            ['image/jpeg'],\r\n            true,\r\n          )\r\n        : undefined,\r\n    };\r\n\r\n    // Delete the deleted screenshots from storage\r\n    if (data.deletedScreenshots) {\r\n      for (const screenshot of data.deletedScreenshots) {\r\n        await this.deleteFile(storageName, `images/${screenshot.toString()}.jpg`);\r\n      }\r\n    }\r\n\r\n    // Delete the deleted videos from storage\r\n    if (data.deletedVideos) {\r\n      for (const video of data.deletedVideos) {\r\n        await this.deleteFile(storageName, `videos/${video.toString()}.webm`);\r\n        await this.deleteFile(storageName, `videos/${video.toString()}-poster.jpg`);\r\n      }\r\n    }\r\n\r\n    // Rename the changed screenshots to their new orders\r\n    const renamedScreenshots: { oldOrder: number; newOrder: number; link: string }[] = [];\r\n    if (data.changedScreenshots) {\r\n      for (const entry of data.changedScreenshots) {\r\n        const screenshot = await this.renameFile(\r\n          storageName,\r\n          `images/${entry.oldOrder}.jpg`,\r\n          `images/${entry.newOrder}.jpg`,\r\n        );\r\n        renamedScreenshots.push({\r\n          oldOrder: entry.oldOrder,\r\n          newOrder: entry.newOrder,\r\n          link: screenshot,\r\n        });\r\n      }\r\n    }\r\n\r\n    // Rename the changed videos to their new orders\r\n    const renamedVideos: { oldOrder: number; newOrder: number; videoLink: string; posterLink: string }[] = [];\r\n    if (data.changedVideos) {\r\n      for (const entry of data.changedVideos) {\r\n        const video = await this.renameFile(\r\n          storageName,\r\n          `videos/${entry.oldOrder}.webm`,\r\n          `videos/${entry.newOrder}.webm`,\r\n        );\r\n        const poster = await this.renameFile(\r\n          storageName,\r\n          `videos/${entry.oldOrder}-poster.jpg`,\r\n          `videos/${entry.newOrder}-poster.jpg`,\r\n        );\r\n        renamedVideos.push({\r\n          oldOrder: entry.oldOrder,\r\n          newOrder: entry.newOrder,\r\n          videoLink: video,\r\n          posterLink: poster,\r\n        });\r\n      }\r\n    }\r\n\r\n    // Add the new screenshots to storage\r\n    const newScreenshots: ImageEntry[] = [];\r\n    if (data.addedScreenshots) {\r\n      for (const entry of data.addedScreenshots) {\r\n        const screenshot = await this.storage.uploadFile(\r\n          entry.image,\r\n          storageName,\r\n          `images/${entry.image.originalname}`,\r\n          ['image/jpeg'],\r\n        );\r\n        newScreenshots.push({\r\n          featured: entry.featured,\r\n          order: entry.order,\r\n          link: screenshot.sharedLink,\r\n        });\r\n      }\r\n    }\r\n\r\n    // Add the new videos to storage\r\n    const newVideos: VideoEntry[] = [];\r\n    if (data.addedVideos) {\r\n      for (const entry of data.addedVideos) {\r\n        const video = await this.storage.uploadFile(\r\n          entry.video,\r\n          storageName,\r\n          `videos/${entry.order}${path.extname(entry.video.originalname)}`,\r\n          ['video/webm'],\r\n        );\r\n        const poster = await this.storage.uploadFile(\r\n          entry.poster,\r\n          storageName,\r\n          `videos/${entry.order}-poster${path.extname(entry.poster.originalname)}`,\r\n          ['image/jpeg'],\r\n        );\r\n        newVideos.push({\r\n          order: entry.order,\r\n          link: video.sharedLink,\r\n          posterLink: poster.sharedLink,\r\n        });\r\n      }\r\n    }\r\n\r\n    const gameData = {\r\n      name: data.name,\r\n      category: data.category,\r\n      description: data.description,\r\n      releaseDate: data.releaseDate,\r\n      publishers: data.publishers,\r\n      developers: data.developers,\r\n      changedThumbnails,\r\n      deletedScreenshots: data.deletedScreenshots,\r\n      deletedVideos: data.deletedVideos,\r\n      renamedScreenshots,\r\n      renamedVideos,\r\n      addedScreenshots: newScreenshots,\r\n      addedVideos: newVideos,\r\n      featuredOrders: data.featuredOrders,\r\n      tags: data.tags,\r\n      pricing: data.pricing,\r\n      features: data.features,\r\n      languages: data.languages,\r\n      featured: data.featured,\r\n      platformEntries: data.platformEntries,\r\n      link: data.link,\r\n      about: data.about,\r\n      mature: data.mature,\r\n      matureDescription: data.matureDescription,\r\n      systemRequirements: data.systemRequirements,\r\n      legal: data.legal,\r\n    };\r\n\r\n    // Create game\r\n    await this.game.update(data.id, gameData);\r\n\r\n    // Return success message\r\n    return { message: 'Game updated successfully' };\r\n  }\r\n\r\n  /**\r\n   * Delete game by ID\r\n   * @param id The ID of the game\r\n   * @returns A message indicating the success of the operation\r\n   */\r\n  public async delete(id: number): Promise<{ message: string }> {\r\n    this.logger.log(`Deleting game with ID: ${id}`);\r\n\r\n    // Get game data\r\n    const game = await this.game.getById(id);\r\n\r\n    // Delete game files\r\n    await this.storage.deleteGame(game.name);\r\n\r\n    // Delete game\r\n    await this.game.remove(id);\r\n\r\n    // Return success message\r\n    return { message: 'Game deleted successfully' };\r\n  }\r\n\r\n  /**\r\n   * Upload a file to the storage\r\n   * @param file The file to upload\r\n   * @param name The name of the file\r\n   * @param filePath The path of the file\r\n   * @returns The shared link of the file\r\n   */\r\n  private async uploadFile(\r\n    file: File,\r\n    name: string,\r\n    filePath: string,\r\n    allowedMimeTypes: string[],\r\n    overwrite?: boolean,\r\n  ): Promise<string> {\r\n    const result = await this.storage.uploadFile(file, name, filePath, allowedMimeTypes, overwrite);\r\n    return result.sharedLink;\r\n  }\r\n\r\n  /**\r\n   * Rename a file in the storage\r\n   * @param file The file to rename\r\n   * @param name The new name of the file\r\n   * @param filePath The path of the file\r\n   * @returns The shared link of the file\r\n   */\r\n  private async renameFile(gameName: string, oldName: string, newName: string): Promise<string> {\r\n    const result = await this.storage.renameFile(gameName, oldName, newName);\r\n    return result.sharedLink;\r\n  }\r\n\r\n  /**\r\n   * Delete a file from the storage\r\n   * @param file The file to delete\r\n   * @param name The name of the file\r\n   * @param filePath The path of the file\r\n   */\r\n  private async deleteFile(gameName: string, filePath: string): Promise<void> {\r\n    await this.storage.deleteFile(gameName, filePath);\r\n  }\r\n}\r\n"],"names":["AdminService","constructor","logger","game","storage","createGame","data","log","thumbnailEntries","mainImage","uploadFile","name","path","extname","originalname","backgroundImage","menuImg","horizontalHeaderImage","verticalHeaderImage","smallHeaderImage","searchImage","tabImage","imageEntries","imageEntry","link","image","order","push","featured","videoEntries","videoEntry","video","posterLink","poster","gameData","category","description","releaseDate","publishers","developers","pricing","tags","features","languages","platformEntries","about","mature","matureDescription","systemRequirements","legal","id","create","message","e","Error","error","stack","deleteGame","deleteError","InternalServerErrorException","updateGame","verbose","JSON","stringify","addedVideos","map","v","addedScreenshots","s","storageName","getById","changedThumbnails","undefined","deletedScreenshots","screenshot","deleteFile","toString","deletedVideos","renamedScreenshots","changedScreenshots","entry","renameFile","oldOrder","newOrder","renamedVideos","changedVideos","videoLink","newScreenshots","sharedLink","newVideos","featuredOrders","update","delete","remove","file","filePath","allowedMimeTypes","overwrite","result","gameName","oldName","newName"],"mappings":"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"}