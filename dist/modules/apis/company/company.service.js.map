{"version":3,"sources":["../../../../src/modules/apis/company/company.service.ts"],"sourcesContent":["// NestJS\r\nimport { Injectable, Logger } from '@nestjs/common';\r\n\r\n// Services\r\nimport { CompaniesService } from '@repositories/sql/companies/companies.service';\r\n\r\n// Types\r\nimport type { Developer, Publisher } from '@repositories/sql/companies/company.entity';\r\n\r\n@Injectable()\r\nexport class CompanyService {\r\n  constructor(\r\n    private readonly logger: Logger,\r\n    private readonly company: CompaniesService,\r\n  ) {}\r\n\r\n  /**\r\n   * Create a new publisher\r\n   * @param data - The name and website of the publisher\r\n   * @return A message indicating the success of the creation\r\n   */\r\n  public async createPublisher(data: { name: string; website: string }): Promise<{ message: string }> {\r\n    const { name, website } = data;\r\n    this.logger.log(`Creating publisher with name ${name} and website ${website}`);\r\n\r\n    // Create the publisher\r\n    await this.company.create({ name, website }, 'publisher');\r\n\r\n    // Return a success message\r\n    return { message: 'Publisher created successfully' };\r\n  }\r\n\r\n  /**\r\n   * Create a new developer\r\n   * @param data - The name and website of the developer\r\n   * @returns A message indicating the success of the creation\r\n   */\r\n  public async createDeveloper(data: { name: string; website: string }): Promise<{ message: string }> {\r\n    const { name, website } = data;\r\n    this.logger.log(`Creating developer with name ${name} and website ${website}`);\r\n\r\n    // Create the developer\r\n    await this.company.create({ name, website }, 'developer');\r\n\r\n    // Return a success message\r\n    return { message: 'Developer created successfully' };\r\n  }\r\n\r\n  /**\r\n   * Get publisher by ID\r\n   * @param id\r\n   * @returns The publisher\r\n   */\r\n  public async getPublisher(id: number): Promise<Publisher> {\r\n    this.logger.log(`Retrieving publisher with ID ${id}`);\r\n\r\n    // Get publisher and return it if it exists\r\n    return await this.company.getById(id, 'publisher');\r\n  }\r\n\r\n  /**\r\n   * Get developer by ID\r\n   * @param id\r\n   * @returns The developer\r\n   */\r\n  public async getDeveloper(id: number): Promise<Developer> {\r\n    this.logger.log(`Retrieving developer with ID ${id}`);\r\n\r\n    // Get developer and return it if it exists\r\n    return await this.company.getById(id, 'developer');\r\n  }\r\n\r\n  /**\r\n   * Get publishers by IDs\r\n   * @param ids\r\n   * @return `Promise<Publisher[]>` An array of publishers\r\n   */\r\n  public async getPublishers(ids: number[]): Promise<Publisher[]> {\r\n    this.logger.log(`Retrieving publishers with IDs ${ids}`);\r\n\r\n    // Get publishers and return them if they exist\r\n    return await this.company.getByIds(ids, 'publisher');\r\n  }\r\n\r\n  /**\r\n   * Get developers by IDs\r\n   * @param ids\r\n   * @returns An array of all developers\r\n   */\r\n  public async getDevelopers(ids: number[]): Promise<Developer[]> {\r\n    this.logger.log(`Retrieving developers with IDs ${ids}`);\r\n\r\n    // Get developers and return them if they exist\r\n    return await this.company.getByIds(ids, 'developer');\r\n  }\r\n\r\n  /**\r\n   * Get all publishers\r\n   * @returns An array of all publishers\r\n   */\r\n  public async getAllPublishers(): Promise<Publisher[]> {\r\n    this.logger.log(`Retrieving all publishers`);\r\n\r\n    // Get publishers and return them\r\n    return await this.company.getAll('id', 'asc', 'publishers');\r\n  }\r\n\r\n  /**\r\n   * Get all developers\r\n   * @returns  An array of all developers\r\n   */\r\n  public async getAllDevelopers(): Promise<Developer[]> {\r\n    this.logger.log(`Retrieving all developers`);\r\n\r\n    // Get developers and return them\r\n    return await this.company.getAll('id', 'asc', 'developers');\r\n  }\r\n\r\n  /**\r\n   * Get paginated publishers\r\n   * @param page - The current page number\r\n   * @param limit - The number of items per page\r\n   * @param orderBy - The column to order by\r\n   * @param order - The order direction\r\n   * @param searchQuery - The search query\r\n   * @returns The paginated publishers and the total number of publishers\r\n   */\r\n  public async getPublishersPaginated(\r\n    page: number,\r\n    limit: number,\r\n    orderBy: 'id' | 'name' | 'website',\r\n    order: 'ASC' | 'DESC',\r\n    searchQuery: { name?: string; website?: string },\r\n  ): Promise<{ items: Publisher[]; total: number; totalPages: number }> {\r\n    this.logger.log(\r\n      `Retrieving publishers, page: ${page}, limit: ${limit}, order by: ${orderBy}, order: ${order}, search query: ${JSON.stringify(\r\n        searchQuery,\r\n      )}`,\r\n    );\r\n\r\n    // Get publishers paginated and return them\r\n    return await this.company.getCompaniesPaginated(page, limit, orderBy, order, 'publisher', searchQuery);\r\n  }\r\n\r\n  /**\r\n   * Get paginated developers\r\n   * @param page - The current page number\r\n   * @param limit - The number of items per page\r\n   * @param orderBy - The column to order by\r\n   * @param order - The order direction\r\n   * @param searchQuery - The search query\r\n   * @returns The paginated developers and the total number of developers\r\n   */\r\n  public async getDevelopersPaginated(\r\n    page: number,\r\n    limit: number,\r\n    orderBy: 'id' | 'name' | 'website',\r\n    order: 'ASC' | 'DESC',\r\n    searchQuery: { name?: string; website?: string },\r\n  ): Promise<{ items: Developer[]; total: number; totalPages: number }> {\r\n    this.logger.log(\r\n      `Retrieving developers, page: ${page}, limit: ${limit}, order by: ${orderBy}, order: ${order}, search query: ${JSON.stringify(\r\n        searchQuery,\r\n      )}}`,\r\n    );\r\n\r\n    // Get developers paginated and return them\r\n    return await this.company.getCompaniesPaginated(page, limit, orderBy, order, 'developer', searchQuery);\r\n  }\r\n\r\n  /**\r\n   * Update publisher\r\n   * @param id - The ID of the publisher\r\n   * @param data - The new data for the publisher\r\n   * @returns A message indicating the success of the update\r\n   */\r\n  public async updatePublisher(id: number, data: { name?: string; website?: string }): Promise<{ message: string }> {\r\n    this.logger.log(`Updating publisher with ID ${id}`);\r\n\r\n    // Update publisher\r\n    Promise.all([\r\n      data.name && this.company.update(id, 'name', data.name, 'publisher'),\r\n      data.website && this.company.update(id, 'website', data.website, 'publisher'),\r\n    ]);\r\n\r\n    // Send a success response\r\n    return { message: 'Publisher updated successfully' };\r\n  }\r\n\r\n  /**\r\n   * Update developer\r\n   * @param id - The ID of the developer\r\n   * @param data - The new data for the developer\r\n   * @returns A message indicating the success of the update\r\n   */\r\n  public async updateDeveloper(id: number, data: { name?: string; website?: string }): Promise<{ message: string }> {\r\n    this.logger.log(`Updating developer with ID ${id}`);\r\n\r\n    // Update developer\r\n    Promise.all([\r\n      data.name && this.company.update(id, 'name', data.name, 'developer'),\r\n      data.website && this.company.update(id, 'website', data.website, 'developer'),\r\n    ]);\r\n\r\n    // Send a success response\r\n    return { message: 'Developer updated successfully' };\r\n  }\r\n\r\n  /**\r\n   * Delete publisher\r\n   * @param id - The ID of the publisher\r\n   * @returns A message indicating the success of the delete\r\n   */\r\n  public async deletePublisher(id: number): Promise<{ message: string }> {\r\n    this.logger.log(`Deleting publisher with ID ${id}`);\r\n\r\n    // Delete publisher\r\n    await this.company.remove(id, 'publisher');\r\n\r\n    // Send a success response\r\n    return { message: 'Publisher deleted successfully' };\r\n  }\r\n\r\n  /**\r\n   * Delete developer\r\n   * @param id - The ID of the developer\r\n   * @returns A message indicating the success of the delete\r\n   */\r\n  public async deleteDeveloper(id: number): Promise<{ message: string }> {\r\n    this.logger.log(`Deleting developer with ID ${id}`);\r\n\r\n    // Delete developer\r\n    await this.company.remove(id, 'developer');\r\n\r\n    // Send a success response\r\n    return { message: 'Developer deleted successfully' };\r\n  }\r\n}\r\n"],"names":["CompanyService","constructor","logger","company","createPublisher","data","name","website","log","create","message","createDeveloper","getPublisher","id","getById","getDeveloper","getPublishers","ids","getByIds","getDevelopers","getAllPublishers","getAll","getAllDevelopers","getPublishersPaginated","page","limit","orderBy","order","searchQuery","JSON","stringify","getCompaniesPaginated","getDevelopersPaginated","updatePublisher","Promise","all","update","updateDeveloper","deletePublisher","remove","deleteDeveloper"],"mappings":"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"}