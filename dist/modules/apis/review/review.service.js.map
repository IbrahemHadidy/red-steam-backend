{"version":3,"sources":["../../../../src/modules/apis/review/review.service.ts"],"sourcesContent":["// NestJS\r\nimport { Injectable, Logger } from '@nestjs/common';\r\n\r\n// Services\r\nimport { ReviewsService } from '@repositories/sql/reviews/reviews.service';\r\n\r\n// Types\r\nimport type { Review } from '@repositories/sql/reviews/review.entity';\r\n\r\n@Injectable()\r\nexport class ReviewService {\r\n  constructor(\r\n    private readonly logger: Logger,\r\n    private readonly review: ReviewsService,\r\n  ) {}\r\n\r\n  /**\r\n   * Get paginated reviews\r\n   * @param page - The current page number\r\n   * @param limit - The number of items per page\r\n   * @param orderBy - The column to order by\r\n   * @param order - The order direction\r\n   * @param searchQuery - The search query\r\n   * @returns The paginated reviews and the total number of reviews\r\n   */\r\n  public async getReviewsPaginated(\r\n    page: number,\r\n    limit: number,\r\n    orderBy: 'id' | 'username' | 'gameName' | 'content' | 'rating',\r\n    order: 'ASC' | 'DESC',\r\n    searchQuery: { username?: string; gameName?: string; content?: string },\r\n  ): Promise<{ items: Review[]; total: number; totalPages: number }> {\r\n    this.logger.log(\r\n      `Retrieving reviews, page: ${page}, limit: ${limit}, order by: ${orderBy}, order: ${order}, search query: ${JSON.stringify(searchQuery)}`,\r\n    );\r\n\r\n    // Send the paginated reviews\r\n    return await this.review.getReviewsPaginated(page, limit, orderBy, order, searchQuery);\r\n  }\r\n\r\n  /**\r\n   * Delete review\r\n   * @param id - The ID of the review\r\n   * @returns A message indicating the success of the delete\r\n   */\r\n  public async deleteReview(id: number): Promise<{ message: string }> {\r\n    this.logger.log(`Deleting review with ID ${id}`);\r\n\r\n    // Delete the review\r\n    await this.review.remove(id);\r\n\r\n    // Send a success message\r\n    return { message: 'Review deleted successfully' };\r\n  }\r\n}\r\n"],"names":["ReviewService","constructor","logger","review","getReviewsPaginated","page","limit","orderBy","order","searchQuery","log","JSON","stringify","deleteReview","id","remove","message"],"mappings":"AAAA,SAAS;;;;;+BAUIA;;;eAAAA;;;wBATsB;gCAGJ;;;;;;;;;;AAMxB,IAAA,AAAMA,gBAAN,MAAMA;IACXC,YACE,AAAiBC,MAAc,EAC/B,AAAiBC,MAAsB,CACvC;aAFiBD,SAAAA;aACAC,SAAAA;IAChB;IAEH;;;;;;;;GAQC,GACD,MAAaC,oBACXC,IAAY,EACZC,KAAa,EACbC,OAA8D,EAC9DC,KAAqB,EACrBC,WAAuE,EACN;QACjE,IAAI,CAACP,MAAM,CAACQ,GAAG,CACb,CAAC,0BAA0B,EAAEL,KAAK,SAAS,EAAEC,MAAM,YAAY,EAAEC,QAAQ,SAAS,EAAEC,MAAM,gBAAgB,EAAEG,KAAKC,SAAS,CAACH,cAAc;QAG3I,6BAA6B;QAC7B,OAAO,MAAM,IAAI,CAACN,MAAM,CAACC,mBAAmB,CAACC,MAAMC,OAAOC,SAASC,OAAOC;IAC5E;IAEA;;;;GAIC,GACD,MAAaI,aAAaC,EAAU,EAAgC;QAClE,IAAI,CAACZ,MAAM,CAACQ,GAAG,CAAC,CAAC,wBAAwB,EAAEI,IAAI;QAE/C,oBAAoB;QACpB,MAAM,IAAI,CAACX,MAAM,CAACY,MAAM,CAACD;QAEzB,yBAAyB;QACzB,OAAO;YAAEE,SAAS;QAA8B;IAClD;AACF"}