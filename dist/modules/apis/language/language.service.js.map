{"version":3,"sources":["../../../../src/modules/apis/language/language.service.ts"],"sourcesContent":["// NestJS\r\nimport { Injectable, Logger } from '@nestjs/common';\r\n\r\n// Services\r\nimport { GamesLanguagesService } from '@repositories/sql/games-languages/games-languages.service';\r\n\r\n// Types\r\nimport type { GameLanguage } from '@repositories/sql/games-languages/game-language.entity';\r\n\r\n@Injectable()\r\nexport class LanguageService {\r\n  constructor(\r\n    private readonly logger: Logger,\r\n    private readonly language: GamesLanguagesService,\r\n  ) {}\r\n\r\n  /**\r\n   * Create a new language\r\n   * @param data - The name and website of the language\r\n   * @returns A message indicating the success of the creation\r\n   */\r\n  public async createLanguage(data: { name: string }): Promise<{ message: string }> {\r\n    const { name } = data;\r\n    this.logger.log(`Creating tag with name ${name}`);\r\n\r\n    // Create the language\r\n    await this.language.create(name);\r\n\r\n    // Send a success response\r\n    return { message: 'Language created successfully' };\r\n  }\r\n\r\n  /**\r\n   * Get Language by ID\r\n   * @param id\r\n   * @returns The language\r\n   */\r\n  public async getLanguage(id: number) {\r\n    this.logger.log(`Retrieving language with ID ${id}`);\r\n\r\n    // Send the response\r\n    return this.language.getById(id);\r\n  }\r\n\r\n  /**\r\n   * Get languages by IDs\r\n   * @param ids\r\n   * @returns An array of languages\r\n   */\r\n  public async getLanguages(ids: number[]) {\r\n    this.logger.log(`Retrieving languages with IDs ${ids}`);\r\n\r\n    // Send the response\r\n    return this.language.getByIds(ids);\r\n  }\r\n\r\n  /**\r\n   * Get all languages\r\n   * @return An array of all languages\r\n   */\r\n  public async getAllLanguages() {\r\n    this.logger.log(`Retrieving all languages`);\r\n\r\n    // Send the response\r\n    return this.language.getAll('id', 'ASC');\r\n  }\r\n\r\n  /**\r\n   * Get paginated languages\r\n   * @param page - The current page number\r\n   * @param limit - The number of items per page\r\n   * @param orderBy - The column to order by\r\n   * @param order - The order direction\r\n   * @param searchQuery - The search query\r\n   * @returns The paginated languages\r\n   */\r\n  public async getLanguagesPaginated(\r\n    page: number,\r\n    limit: number,\r\n    orderBy: 'id' | 'name',\r\n    order: 'ASC' | 'DESC',\r\n    searchQuery: { name?: string; website?: string },\r\n  ): Promise<{ items: GameLanguage[]; total: number; totalPages: number }> {\r\n    this.logger.log(\r\n      `Retrieving languages, page: ${page}, limit: ${limit}, order by: ${orderBy}, order: ${order}, search query: ${JSON.stringify(searchQuery)}`,\r\n    );\r\n    return await this.language.getLanguagesPaginated(page, limit, orderBy, order, searchQuery);\r\n  }\r\n\r\n  /**\r\n   * Update language\r\n   * @param id - The ID of the language\r\n   * @param data - The new data for the language\r\n   * @returns The updated language\r\n   */\r\n  public async updateLanguage(id: number, data: { name?: string; icon?: string }): Promise<{ message: string }> {\r\n    const { name } = data;\r\n    this.logger.log(`Updating language with ID ${id}`);\r\n\r\n    // Update the language\r\n    await this.language.update(id, name);\r\n\r\n    // Send a success message\r\n    return { message: 'Language updated successfully' };\r\n  }\r\n\r\n  /**\r\n   * Delete language\r\n   * @param id - The ID of the language\r\n   * @returns `Promise<{ message: string }>` A message indicating the success of the delete\r\n   */\r\n  public async deleteLanguage(id: number): Promise<{ message: string }> {\r\n    this.logger.log(`Deleting language with ID ${id}`);\r\n\r\n    // Delete the language\r\n    await this.language.remove(id);\r\n\r\n    // Send a success message\r\n    return { message: 'Language deleted successfully' };\r\n  }\r\n}\r\n"],"names":["LanguageService","constructor","logger","language","createLanguage","data","name","log","create","message","getLanguage","id","getById","getLanguages","ids","getByIds","getAllLanguages","getAll","getLanguagesPaginated","page","limit","orderBy","order","searchQuery","JSON","stringify","updateLanguage","update","deleteLanguage","remove"],"mappings":"AAAA,SAAS;;;;;+BAUIA;;;eAAAA;;;wBATsB;uCAGG;;;;;;;;;;AAM/B,IAAA,AAAMA,kBAAN,MAAMA;IACXC,YACE,AAAiBC,MAAc,EAC/B,AAAiBC,QAA+B,CAChD;aAFiBD,SAAAA;aACAC,WAAAA;IAChB;IAEH;;;;GAIC,GACD,MAAaC,eAAeC,IAAsB,EAAgC;QAChF,MAAM,EAAEC,IAAI,EAAE,GAAGD;QACjB,IAAI,CAACH,MAAM,CAACK,GAAG,CAAC,CAAC,uBAAuB,EAAED,MAAM;QAEhD,sBAAsB;QACtB,MAAM,IAAI,CAACH,QAAQ,CAACK,MAAM,CAACF;QAE3B,0BAA0B;QAC1B,OAAO;YAAEG,SAAS;QAAgC;IACpD;IAEA;;;;GAIC,GACD,MAAaC,YAAYC,EAAU,EAAE;QACnC,IAAI,CAACT,MAAM,CAACK,GAAG,CAAC,CAAC,4BAA4B,EAAEI,IAAI;QAEnD,oBAAoB;QACpB,OAAO,IAAI,CAACR,QAAQ,CAACS,OAAO,CAACD;IAC/B;IAEA;;;;GAIC,GACD,MAAaE,aAAaC,GAAa,EAAE;QACvC,IAAI,CAACZ,MAAM,CAACK,GAAG,CAAC,CAAC,8BAA8B,EAAEO,KAAK;QAEtD,oBAAoB;QACpB,OAAO,IAAI,CAACX,QAAQ,CAACY,QAAQ,CAACD;IAChC;IAEA;;;GAGC,GACD,MAAaE,kBAAkB;QAC7B,IAAI,CAACd,MAAM,CAACK,GAAG,CAAC,CAAC,wBAAwB,CAAC;QAE1C,oBAAoB;QACpB,OAAO,IAAI,CAACJ,QAAQ,CAACc,MAAM,CAAC,MAAM;IACpC;IAEA;;;;;;;;GAQC,GACD,MAAaC,sBACXC,IAAY,EACZC,KAAa,EACbC,OAAsB,EACtBC,KAAqB,EACrBC,WAAgD,EACuB;QACvE,IAAI,CAACrB,MAAM,CAACK,GAAG,CACb,CAAC,4BAA4B,EAAEY,KAAK,SAAS,EAAEC,MAAM,YAAY,EAAEC,QAAQ,SAAS,EAAEC,MAAM,gBAAgB,EAAEE,KAAKC,SAAS,CAACF,cAAc;QAE7I,OAAO,MAAM,IAAI,CAACpB,QAAQ,CAACe,qBAAqB,CAACC,MAAMC,OAAOC,SAASC,OAAOC;IAChF;IAEA;;;;;GAKC,GACD,MAAaG,eAAef,EAAU,EAAEN,IAAsC,EAAgC;QAC5G,MAAM,EAAEC,IAAI,EAAE,GAAGD;QACjB,IAAI,CAACH,MAAM,CAACK,GAAG,CAAC,CAAC,0BAA0B,EAAEI,IAAI;QAEjD,sBAAsB;QACtB,MAAM,IAAI,CAACR,QAAQ,CAACwB,MAAM,CAAChB,IAAIL;QAE/B,yBAAyB;QACzB,OAAO;YAAEG,SAAS;QAAgC;IACpD;IAEA;;;;GAIC,GACD,MAAamB,eAAejB,EAAU,EAAgC;QACpE,IAAI,CAACT,MAAM,CAACK,GAAG,CAAC,CAAC,0BAA0B,EAAEI,IAAI;QAEjD,sBAAsB;QACtB,MAAM,IAAI,CAACR,QAAQ,CAAC0B,MAAM,CAAClB;QAE3B,yBAAyB;QACzB,OAAO;YAAEF,SAAS;QAAgC;IACpD;AACF"}