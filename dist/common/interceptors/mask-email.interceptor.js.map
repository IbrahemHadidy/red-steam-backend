{"version":3,"sources":["../../../src/common/interceptors/mask-email.interceptor.ts"],"sourcesContent":["// NestJS\r\nimport { Injectable } from '@nestjs/common';\r\n\r\n// RxJS\r\nimport { map } from 'rxjs/operators';\r\n\r\n// Types\r\nimport type { CallHandler, ExecutionContext, NestInterceptor } from '@nestjs/common';\r\nimport type { Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class MaskEmailInterceptor implements NestInterceptor {\r\n  public intercept(_context: ExecutionContext, next: CallHandler): Observable<unknown> {\r\n    return next.handle().pipe(map((data) => this.maskEmailsRecursive(data)));\r\n  }\r\n\r\n  private maskEmailsRecursive(data: unknown): unknown {\r\n    if (Array.isArray(data)) {\r\n      // If data is an array, recursively mask emails in each item\r\n      return data.map((item) => this.maskEmailsRecursive(item));\r\n    } else if (typeof data === 'object' && data !== null) {\r\n      // If data is an object, recursively mask emails in the object\r\n      for (const key in data) {\r\n        if (data.hasOwnProperty(key)) {\r\n          data[key] = this.maskEmailsRecursive(data[key]);\r\n        }\r\n      }\r\n    } else if (typeof data === 'string') {\r\n      // If data is a string, check if it is an email and mask it\r\n      return this.isEmail(data) ? maskEmail(data) : data;\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  private isEmail(value: string): boolean {\r\n    // Basic email validation\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return emailRegex.test(value);\r\n  }\r\n}\r\n\r\nexport const maskEmail = (email: string) => {\r\n  // Split the email address into local part and domain part\r\n  const [localPart, domainPart] = email.split('@');\r\n\r\n  // Mask all characters except the first two in the local part\r\n  const hiddenLocalPart = localPart.substring(0, 2) + localPart.substring(2).replace(/./g, '*');\r\n\r\n  // Construct the masked email address\r\n  const maskedEmail = hiddenLocalPart + '@' + domainPart;\r\n\r\n  return maskedEmail;\r\n};\r\n"],"names":["MaskEmailInterceptor","maskEmail","intercept","_context","next","handle","pipe","map","data","maskEmailsRecursive","Array","isArray","item","key","hasOwnProperty","isEmail","value","emailRegex","test","email","localPart","domainPart","split","hiddenLocalPart","substring","replace","maskedEmail"],"mappings":"AAAA,SAAS;;;;;;;;;;;;IAWIA,oBAAoB;eAApBA;;IA+BAC,SAAS;eAATA;;;wBAzCc;2BAGP;;;;;;;AAOb,IAAA,AAAMD,uBAAN,MAAMA;IACJE,UAAUC,QAA0B,EAAEC,IAAiB,EAAuB;QACnF,OAAOA,KAAKC,MAAM,GAAGC,IAAI,CAACC,IAAAA,cAAG,EAAC,CAACC,OAAS,IAAI,CAACC,mBAAmB,CAACD;IACnE;IAEQC,oBAAoBD,IAAa,EAAW;QAClD,IAAIE,MAAMC,OAAO,CAACH,OAAO;YACvB,4DAA4D;YAC5D,OAAOA,KAAKD,GAAG,CAAC,CAACK,OAAS,IAAI,CAACH,mBAAmB,CAACG;QACrD,OAAO,IAAI,OAAOJ,SAAS,YAAYA,SAAS,MAAM;YACpD,8DAA8D;YAC9D,IAAK,MAAMK,OAAOL,KAAM;gBACtB,IAAIA,KAAKM,cAAc,CAACD,MAAM;oBAC5BL,IAAI,CAACK,IAAI,GAAG,IAAI,CAACJ,mBAAmB,CAACD,IAAI,CAACK,IAAI;gBAChD;YACF;QACF,OAAO,IAAI,OAAOL,SAAS,UAAU;YACnC,2DAA2D;YAC3D,OAAO,IAAI,CAACO,OAAO,CAACP,QAAQP,UAAUO,QAAQA;QAChD;QAEA,OAAOA;IACT;IAEQO,QAAQC,KAAa,EAAW;QACtC,yBAAyB;QACzB,MAAMC,aAAa;QACnB,OAAOA,WAAWC,IAAI,CAACF;IACzB;AACF;;;;AAEO,MAAMf,YAAY,CAACkB;IACxB,0DAA0D;IAC1D,MAAM,CAACC,WAAWC,WAAW,GAAGF,MAAMG,KAAK,CAAC;IAE5C,6DAA6D;IAC7D,MAAMC,kBAAkBH,UAAUI,SAAS,CAAC,GAAG,KAAKJ,UAAUI,SAAS,CAAC,GAAGC,OAAO,CAAC,MAAM;IAEzF,qCAAqC;IACrC,MAAMC,cAAcH,kBAAkB,MAAMF;IAE5C,OAAOK;AACT"}