{"version":3,"sources":["../../../src/common/interceptors/set-response-cookies.interceptor.ts"],"sourcesContent":["// NestJS\r\nimport { Injectable } from '@nestjs/common';\r\n\r\n// RxJS\r\nimport { tap } from 'rxjs/operators';\r\n\r\n// Types\r\nimport type { CallHandler, ExecutionContext, NestInterceptor } from '@nestjs/common';\r\nimport type { FastifyReply, FastifyRequest } from 'fastify';\r\nimport type { Observable } from 'rxjs';\r\n\r\n/**\r\n * Interceptor to handle setting tokens in cookies\r\n * @returns Set JWT tokens in HttpOnly cookies\r\n */\r\n@Injectable()\r\nexport class SetResponseCookiesInterceptor implements NestInterceptor {\r\n  public intercept(context: ExecutionContext, next: CallHandler): Observable<unknown> {\r\n    return next.handle().pipe(\r\n      tap({\r\n        next: (data?: { accessToken?: string; refreshToken?: string; loggingIn?: boolean }) => {\r\n          // Get context, request and response\r\n          const ctx = context.switchToHttp();\r\n          const request = ctx.getRequest<FastifyRequest>();\r\n          const response = ctx.getResponse<FastifyReply>();\r\n\r\n          // Destructure data\r\n          const { accessToken, refreshToken, loggingIn } = data;\r\n\r\n          // Get rememberMe value\r\n          const rememberMe: boolean = (loggingIn && request.body['rememberMe']) || false;\r\n\r\n          // Set accessToken in HttpOnly cookie\r\n          if (accessToken) {\r\n            response.setCookie('accessToken', accessToken, {\r\n              httpOnly: true,\r\n              secure: true,\r\n              sameSite: 'none',\r\n              path: '/',\r\n              maxAge: 3600, // 1 hour\r\n            });\r\n          }\r\n\r\n          // Set refreshToken in HttpOnly cookie\r\n          if (refreshToken) {\r\n            response.setCookie('refreshToken', refreshToken, {\r\n              httpOnly: true,\r\n              secure: true,\r\n              sameSite: 'none',\r\n              path: '/',\r\n\r\n              // If rememberMe & loggingIn is true, 30 days cookie, else session cookie\r\n              maxAge: rememberMe ? 2592000 : undefined,\r\n            });\r\n          }\r\n\r\n          // Remove tokens and loggingIn from response data\r\n          delete data.accessToken;\r\n          delete data.refreshToken;\r\n          delete data.loggingIn;\r\n        },\r\n      }),\r\n    );\r\n  }\r\n}\r\n"],"names":["SetResponseCookiesInterceptor","intercept","context","next","handle","pipe","tap","data","ctx","switchToHttp","request","getRequest","response","getResponse","accessToken","refreshToken","loggingIn","rememberMe","body","setCookie","httpOnly","secure","sameSite","path","maxAge","undefined"],"mappings":"AAAA,SAAS;;;;;+BAgBIA;;;eAAAA;;;wBAfc;2BAGP;;;;;;;AAYb,IAAA,AAAMA,gCAAN,MAAMA;IACJC,UAAUC,OAAyB,EAAEC,IAAiB,EAAuB;QAClF,OAAOA,KAAKC,MAAM,GAAGC,IAAI,CACvBC,IAAAA,cAAG,EAAC;YACFH,MAAM,CAACI;gBACL,oCAAoC;gBACpC,MAAMC,MAAMN,QAAQO,YAAY;gBAChC,MAAMC,UAAUF,IAAIG,UAAU;gBAC9B,MAAMC,WAAWJ,IAAIK,WAAW;gBAEhC,mBAAmB;gBACnB,MAAM,EAAEC,WAAW,EAAEC,YAAY,EAAEC,SAAS,EAAE,GAAGT;gBAEjD,uBAAuB;gBACvB,MAAMU,aAAsB,AAACD,aAAaN,QAAQQ,IAAI,CAAC,aAAa,IAAK;gBAEzE,qCAAqC;gBACrC,IAAIJ,aAAa;oBACfF,SAASO,SAAS,CAAC,eAAeL,aAAa;wBAC7CM,UAAU;wBACVC,QAAQ;wBACRC,UAAU;wBACVC,MAAM;wBACNC,QAAQ;oBACV;gBACF;gBAEA,sCAAsC;gBACtC,IAAIT,cAAc;oBAChBH,SAASO,SAAS,CAAC,gBAAgBJ,cAAc;wBAC/CK,UAAU;wBACVC,QAAQ;wBACRC,UAAU;wBACVC,MAAM;wBAEN,yEAAyE;wBACzEC,QAAQP,aAAa,UAAUQ;oBACjC;gBACF;gBAEA,iDAAiD;gBACjD,OAAOlB,KAAKO,WAAW;gBACvB,OAAOP,KAAKQ,YAAY;gBACxB,OAAOR,KAAKS,SAAS;YACvB;QACF;IAEJ;AACF"}