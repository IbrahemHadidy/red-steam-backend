{"version":3,"sources":["../../../src/common/interceptors/exception.interceptor.ts"],"sourcesContent":["import type { CallHandler, ExecutionContext, NestInterceptor } from '@nestjs/common';\r\nimport { HttpException, Injectable, Logger } from '@nestjs/common';\r\nimport type { Observable } from 'rxjs';\r\nimport { throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class ExceptionInterceptor implements NestInterceptor {\r\n  constructor(private readonly logger: Logger) {}\r\n\r\n  public intercept(_context: ExecutionContext, next: CallHandler): Observable<unknown> {\r\n    return next.handle().pipe(\r\n      catchError((error) => {\r\n        let statusCode = 500;\r\n        let message = 'Internal server error';\r\n        let userMessage = 'An unexpected error occurred';\r\n\r\n        if (error instanceof HttpException) {\r\n          statusCode = error.getStatus();\r\n          const errorMessage = error.getResponse()['message'] || error.message;\r\n\r\n          if (Array.isArray(errorMessage)) {\r\n            message = errorMessage.join(', ');\r\n          } else {\r\n            message = errorMessage;\r\n          }\r\n\r\n          userMessage = process.env.NODE_ENV === 'production' ? 'An unexpected error occurred' : message;\r\n        } else if (error instanceof Error) {\r\n          message = error.message;\r\n        }\r\n\r\n        const response = {\r\n          statusCode,\r\n          message: userMessage,\r\n          timestamp: new Date().toISOString(),\r\n          path: _context.switchToHttp().getRequest().url,\r\n          method: _context.switchToHttp().getRequest().method,\r\n        };\r\n\r\n        this.logger.error(`Status: ${statusCode} | Message: ${message} | Path: ${_context.switchToHttp().getRequest().url}`, error.stack);\r\n\r\n        return throwError(() => response);\r\n      }),\r\n    );\r\n  }\r\n}\r\n"],"names":["ExceptionInterceptor","constructor","logger","intercept","_context","next","handle","pipe","catchError","error","statusCode","message","userMessage","HttpException","getStatus","errorMessage","getResponse","Array","isArray","join","process","env","NODE_ENV","Error","response","timestamp","Date","toISOString","path","switchToHttp","getRequest","url","method","stack","throwError"],"mappings":";;;;+BAOaA;;;eAAAA;;;wBANqC;sBAEvB;2BACA;;;;;;;;;;AAGpB,IAAA,AAAMA,uBAAN,MAAMA;IACXC,YAAY,AAAiBC,MAAc,CAAE;aAAhBA,SAAAA;IAAiB;IAEvCC,UAAUC,QAA0B,EAAEC,IAAiB,EAAuB;QACnF,OAAOA,KAAKC,MAAM,GAAGC,IAAI,CACvBC,IAAAA,qBAAU,EAAC,CAACC;YACV,IAAIC,aAAa;YACjB,IAAIC,UAAU;YACd,IAAIC,cAAc;YAElB,IAAIH,iBAAiBI,qBAAa,EAAE;gBAClCH,aAAaD,MAAMK,SAAS;gBAC5B,MAAMC,eAAeN,MAAMO,WAAW,EAAE,CAAC,UAAU,IAAIP,MAAME,OAAO;gBAEpE,IAAIM,MAAMC,OAAO,CAACH,eAAe;oBAC/BJ,UAAUI,aAAaI,IAAI,CAAC;gBAC9B,OAAO;oBACLR,UAAUI;gBACZ;gBAEAH,cAAcQ,QAAQC,GAAG,CAACC,QAAQ,KAAK,eAAe,iCAAiCX;YACzF,OAAO,IAAIF,iBAAiBc,OAAO;gBACjCZ,UAAUF,MAAME,OAAO;YACzB;YAEA,MAAMa,WAAW;gBACfd;gBACAC,SAASC;gBACTa,WAAW,IAAIC,OAAOC,WAAW;gBACjCC,MAAMxB,SAASyB,YAAY,GAAGC,UAAU,GAAGC,GAAG;gBAC9CC,QAAQ5B,SAASyB,YAAY,GAAGC,UAAU,GAAGE,MAAM;YACrD;YAEA,IAAI,CAAC9B,MAAM,CAACO,KAAK,CAAC,CAAC,QAAQ,EAAEC,WAAW,YAAY,EAAEC,QAAQ,SAAS,EAAEP,SAASyB,YAAY,GAAGC,UAAU,GAAGC,GAAG,EAAE,EAAEtB,MAAMwB,KAAK;YAEhI,OAAOC,IAAAA,gBAAU,EAAC,IAAMV;QAC1B;IAEJ;AACF"}