{"version":3,"sources":["../../../src/common/pipes/union-type-validation.pipe.ts"],"sourcesContent":["// NestJS\r\nimport { BadRequestException, Injectable } from '@nestjs/common';\r\n\r\n// Types\r\nimport type { PipeTransform } from '@nestjs/common';\r\n\r\n/**\r\n * Pipe to validate union type\r\n * @param allowedValues - Allowed values\r\n * @param options - Options for the pipe: required\r\n * @returns Validated value\r\n * @throws BadRequestException if value is not in allowed values list\r\n */\r\n@Injectable()\r\nexport class UnionTypeValidationPipe<T> implements PipeTransform {\r\n  private readonly allowedValues: T[];\r\n  private readonly options: { optional: boolean };\r\n\r\n  constructor(allowedValues: T[], options: { optional: boolean } = { optional: false }) {\r\n    this.allowedValues = allowedValues;\r\n    this.options = options;\r\n  }\r\n\r\n  public transform(value: unknown): T | undefined {\r\n    if (this.options.optional && (value === undefined || value === null)) {\r\n      return undefined;\r\n    } else if (!this.allowedValues.includes(value as T)) {\r\n      throw new BadRequestException(`Invalid value: ${value}. Allowed values are ${this.allowedValues.join(', ')}`);\r\n    } else {\r\n      return value as T;\r\n    }\r\n  }\r\n}\r\n"],"names":["UnionTypeValidationPipe","constructor","allowedValues","options","optional","transform","value","undefined","includes","BadRequestException","join"],"mappings":"AAAA,SAAS;;;;;+BAcIA;;;eAAAA;;;wBAbmC;;;;;;;;;;AAazC,IAAA,AAAMA,0BAAN,MAAMA;IAIXC,YAAYC,aAAkB,EAAEC,UAAiC;QAAEC,UAAU;IAAM,CAAC,CAAE;QACpF,IAAI,CAACF,aAAa,GAAGA;QACrB,IAAI,CAACC,OAAO,GAAGA;IACjB;IAEOE,UAAUC,KAAc,EAAiB;QAC9C,IAAI,IAAI,CAACH,OAAO,CAACC,QAAQ,IAAKE,CAAAA,UAAUC,aAAaD,UAAU,IAAG,GAAI;YACpE,OAAOC;QACT,OAAO,IAAI,CAAC,IAAI,CAACL,aAAa,CAACM,QAAQ,CAACF,QAAa;YACnD,MAAM,IAAIG,2BAAmB,CAAC,CAAC,eAAe,EAAEH,MAAM,qBAAqB,EAAE,IAAI,CAACJ,aAAa,CAACQ,IAAI,CAAC,OAAO;QAC9G,OAAO;YACL,OAAOJ;QACT;IACF;AACF"}