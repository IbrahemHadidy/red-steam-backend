{"version":3,"sources":["../../../src/common/guards/admin.guard.ts"],"sourcesContent":["// NestJS\r\nimport { BadRequestException, Injectable, NotFoundException, UnauthorizedException } from '@nestjs/common';\r\n\r\n// Services\r\nimport { UsersService } from '@repositories/sql/users/users.service';\r\n\r\n// Types\r\nimport type { CanActivate, ExecutionContext } from '@nestjs/common';\r\n\r\n@Injectable()\r\nexport class AdminGuard implements CanActivate {\r\n  constructor(private readonly usersService: UsersService) {}\r\n\r\n  public async canActivate(context: ExecutionContext): Promise<boolean> {\r\n    const request = context.switchToHttp().getRequest();\r\n    const userId = request['userId'];\r\n\r\n    // Verify if user exists\r\n    if (!userId) throw new BadRequestException('User ID is missing');\r\n\r\n    // Check if user exists\r\n    const user = await this.usersService.getById(userId);\r\n    if (!user) throw new NotFoundException('User not found');\r\n\r\n    // Check if user is verified\r\n    if (!user.isAdmin) throw new UnauthorizedException('User is not an admin');\r\n\r\n    return true;\r\n  }\r\n}\r\n"],"names":["AdminGuard","constructor","usersService","canActivate","context","request","switchToHttp","getRequest","userId","BadRequestException","user","getById","NotFoundException","isAdmin","UnauthorizedException"],"mappings":"AAAA,SAAS;;;;;+BAUIA;;;eAAAA;;;wBAT6E;8BAG7D;;;;;;;;;;AAMtB,IAAA,AAAMA,aAAN,MAAMA;IACXC,YAAY,AAAiBC,YAA0B,CAAE;aAA5BA,eAAAA;IAA6B;IAE1D,MAAaC,YAAYC,OAAyB,EAAoB;QACpE,MAAMC,UAAUD,QAAQE,YAAY,GAAGC,UAAU;QACjD,MAAMC,SAASH,OAAO,CAAC,SAAS;QAEhC,wBAAwB;QACxB,IAAI,CAACG,QAAQ,MAAM,IAAIC,2BAAmB,CAAC;QAE3C,uBAAuB;QACvB,MAAMC,OAAO,MAAM,IAAI,CAACR,YAAY,CAACS,OAAO,CAACH;QAC7C,IAAI,CAACE,MAAM,MAAM,IAAIE,yBAAiB,CAAC;QAEvC,4BAA4B;QAC5B,IAAI,CAACF,KAAKG,OAAO,EAAE,MAAM,IAAIC,6BAAqB,CAAC;QAEnD,OAAO;IACT;AACF"}